import React from 'react';
import PropTypes from 'prop-types';
interface SVGPropsBase {
    children?: React.ReactNode;
    /**
     *  Defaults to the value of the size prop. Height is defined as a number of ems or as
     * a string with any other unit.
     */
    height?: number | string;
    /** Hides default screen text tooltip visually, but still renders for screen readers. */
    hideDefaultTooltip?: boolean;
    /**
     * Set `inline` to false to remove `vertical-align: middle`, and center the icon horizontally.
     */
    inline?: boolean;
    /** Displays to screen readers instead of the `icon` value. Set the prop to null or
     * an empty string to hide the icon from screen readers, such as when a text label
     * exists beside an icon. All icons have a default value that matches the icon name. */
    screenReaderText?: string | null;
    /**
     * Sets the value for the `width` or `height` attribute, whichever is larger,
     * and scales the other dimension proportionally. The default size of 0.75 makes the icon
     * a similar size as the font size. Size is defined as a number of ems, or as a
     * string with any other unit.
     */
    size?: number | string;
    /**
     * Defaults to the value of the size prop. Width is defined as a number of ems or as
     * a string with any other unit.
     */
    width?: number | string;
    /**
     * The value of the `viewBox` attribute is a string consisting of four space-separated numbers:
     * min-x, min-y, width, and height. For example, "0 0 24 24" or "-20.4 -11.8 203.4 203.5";
     */
    viewBox: string;
    /**
     * Defaults to the preserved aspect ratio, the height and width define a max dimension,
     * and centers the icon. These are standard SVG values.  */
    preserveAspectRatio?: 'none' | 'xMinYMin' | 'xMidYMin' | 'xMaxYMin' | 'xMinYMid' | 'xMidYMid' | 'xMaxYMid' | 'xMinYMax' | 'xMidYMax' | 'xMaxYMax';
}
declare type SVGProps = SVGPropsBase & Omit<JSX.IntrinsicElements['svg'], keyof SVGPropsBase | 'ref'>;
/** @public Props interface for `SVG` with `viewBox` optional. Use this when wrapping `SVG`. */
declare type SVGPropsOptionalViewBox = Omit<SVGProps, 'viewBox'> & Partial<Pick<SVGProps, 'viewBox'>>;
declare function SVG({ children, height, hideDefaultTooltip, inline, preserveAspectRatio, screenReaderText, size, viewBox, width, ...otherProps }: SVGProps): JSX.Element;
declare namespace SVG {
    var propTypes: {
        children: PropTypes.Requireable<PropTypes.ReactNodeLike>;
        height: PropTypes.Requireable<string | number>;
        hideDefaultTooltip: PropTypes.Requireable<boolean>;
        inline: PropTypes.Requireable<boolean>;
        screenReaderText: PropTypes.Requireable<string>;
        size: PropTypes.Requireable<string | number>;
        width: PropTypes.Requireable<string | number>;
        viewBox: PropTypes.Validator<string>;
        preserveAspectRatio: PropTypes.Requireable<string>;
    };
}
export default SVG;
export { SVGPropsOptionalViewBox };
