module.exports =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 131);
/******/ })
/************************************************************************/
/******/ ({

/***/ 1:
/***/ (function(module, exports) {

module.exports = require("prop-types");

/***/ }),

/***/ 131:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
// ESM COMPAT FLAG
__webpack_require__.r(__webpack_exports__);

// EXPORTS
__webpack_require__.d(__webpack_exports__, "default", function() { return /* reexport */ AnimationToggle_AnimationToggle; });
__webpack_require__.d(__webpack_exports__, "AnimationToggleContext", function() { return /* reexport */ AnimationToggleContext; });
__webpack_require__.d(__webpack_exports__, "AnimationToggleProvider", function() { return /* reexport */ AnimationToggleProvider_AnimationToggleProvider; });
__webpack_require__.d(__webpack_exports__, "useAnimationToggle", function() { return /* reexport */ useAnimationToggle_useAnimationToggle; });

// EXTERNAL MODULE: external "react"
var external_react_ = __webpack_require__(2);
var external_react_default = /*#__PURE__*/__webpack_require__.n(external_react_);

// EXTERNAL MODULE: external "prop-types"
var external_prop_types_ = __webpack_require__(1);
var external_prop_types_default = /*#__PURE__*/__webpack_require__.n(external_prop_types_);

// CONCATENATED MODULE: ./src/AnimationToggle/AnimationToggleContext.tsx

/**
 * A React context used to control whether animations are enabled or disabled.
 * Prefer `useAnimationToggle` or `AnimationToggle` over consuming this context
 * directly, since they take the user's reduced motion preference into account.
 * This context should only be used if direct access to the animation setting
 * is required. The context type is `Boolean` and defaults to `true`.
 *
 * @public
 */

var AnimationToggleContext = /*#__PURE__*/external_react_default.a.createContext(true);

// CONCATENATED MODULE: ./src/AnimationToggle/useAnimationToggle.tsx
function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }



/**
 * A React hook that combines the animation setting (see `AnimationToggleProvider`)
 * and the user's reduced motion preference into one value.
 *
 * @returns {string} `'off'` if animations are disabled. If animations are enabled
 * and the user prefers reduced motion, `'reduced'` is returned, `'on'` otherwise.
 * @public
 */

var useAnimationToggle_useAnimationToggle = function useAnimationToggle() {
  var animationEnabled = Object(external_react_["useContext"])(AnimationToggleContext);
  var query = 'screen and (prefers-reduced-motion: reduce)';
  var matchMedia = typeof window !== 'undefined' && !!window.matchMedia;

  var _useState = Object(external_react_["useState"])(matchMedia && window.matchMedia(query).matches),
      _useState2 = _slicedToArray(_useState, 2),
      reduced = _useState2[0],
      setReduced = _useState2[1];

  Object(external_react_["useEffect"])(function () {
    if (matchMedia) {
      var mediaQuery = window.matchMedia(query);

      var reducedMotionChanged = function reducedMotionChanged() {
        setReduced(mediaQuery.matches);
      };

      mediaQuery.addListener(reducedMotionChanged);
      return function () {
        mediaQuery.removeListener(reducedMotionChanged);
      };
    }

    return undefined;
  }, [matchMedia, query]);

  if (animationEnabled) {
    return reduced ? 'reduced' : 'on';
  }

  return 'off';
};


// CONCATENATED MODULE: ./src/AnimationToggle/AnimationToggle.tsx




var callMeMaybe = function callMeMaybe(maybeFunction) {
  return typeof maybeFunction === 'function' ? maybeFunction() : maybeFunction;
};

var propTypes = {
  on: external_prop_types_default.a.oneOfType([external_prop_types_default.a.node, external_prop_types_default.a.func]).isRequired,
  off: external_prop_types_default.a.oneOfType([external_prop_types_default.a.node, external_prop_types_default.a.func]).isRequired,
  reduced: external_prop_types_default.a.oneOfType([external_prop_types_default.a.node, external_prop_types_default.a.func])
};
/**
 * Used to allow animation to be externally controlled through a provider or user preference.
 */

function AnimationToggle(_ref) {
  var on = _ref.on,
      off = _ref.off,
      reduced = _ref.reduced;
  var animationToggle = useAnimationToggle_useAnimationToggle();

  if (animationToggle === 'on') {
    return callMeMaybe(on);
  }

  if (animationToggle === 'reduced' && reduced) {
    return callMeMaybe(reduced);
  }

  return callMeMaybe(off); // react-docgen ignores components that don't use JSX/React.createElement.
  // the following line forces detection:

  return /*#__PURE__*/external_react_default.a.createElement(external_react_default.a.Fragment, null); // eslint-disable-line no-unreachable
}

AnimationToggle.propTypes = propTypes;
/* harmony default export */ var AnimationToggle_AnimationToggle = (AnimationToggle);
// CONCATENATED MODULE: ./src/AnimationToggle/AnimationToggleProvider.tsx



var AnimationToggleProvider_propTypes = {
  children: external_prop_types_default.a.node,
  enabled: external_prop_types_default.a.bool
};
/**
 * Used to provide a setting to enable or disable animation.
 */

var AnimationToggleProvider_AnimationToggleProvider = function AnimationToggleProvider(_ref) {
  var children = _ref.children,
      _ref$enabled = _ref.enabled,
      enabled = _ref$enabled === void 0 ? false : _ref$enabled;
  return /*#__PURE__*/external_react_default.a.createElement(AnimationToggleContext.Provider, {
    value: enabled
  }, children);
};

AnimationToggleProvider_AnimationToggleProvider.propTypes = AnimationToggleProvider_propTypes;

// CONCATENATED MODULE: ./src/AnimationToggle/index.ts





/***/ }),

/***/ 2:
/***/ (function(module, exports) {

module.exports = require("react");

/***/ })

/******/ });