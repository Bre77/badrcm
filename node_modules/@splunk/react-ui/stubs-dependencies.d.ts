declare namespace Chai {
    interface Assert {
        throwsSilent(fn: Function, message?: string): void;
        throwsSilent(fn: Function, regExp: RegExp, message?: string): void;
        throwsSilent(fn: Function, errType: Function, message?: string): void;
        throwsSilent(fn: Function, errType: Function, regExp: RegExp): void;
    }
}

declare module 'commonmark-react-renderer' {
    export default class Renderer {
        constructor(options: {});
        render(ast: import('commonmark').Node): React.ReactNode[];
    }
}

// https://github.com/storybookjs/storybook/issues/7677
// https://github.com/ComponentDriven/csf/blob/next/src/story.test.ts
declare module '@storybook/react' {
    type Context = {
        id: StoryId;
        kind: StoryKind;
        name: StoryName;
    };

    type StoryId = string;
    type StoryKind = string;
    type StoryName = string;

    type StoryFnType<Context, ReturnType> = (context?: Context) => ReturnType;

    type DecoratorFunctionBase<Context, StoryFn extends StoryFnType<Context, any>> = (
        fn: StoryFn,
        context: Context
    ) => ReturnType<StoryFn>;

    type DefaultParameters = { [name: string]: any };

    type ParametersType<T extends { [P: string]: any } = DefaultParameters> = {
        [P in keyof T]: T[P];
    };

    interface KindMetaBase<
        Decorator extends DecoratorFunctionBase<any, any>,
        Parameters extends ParametersType,
        Component = unknown
    > {
        id?: StoryId;
        title: StoryKind;
        component?: Component;
        subcomponents?: Record<string, Component>;
        decorators?: Decorator[];
        parameters?: Parameters;
    }

    interface StoryMetaBase<
        Context,
        StoryFn extends StoryFnType<Context, any>,
        Decorator extends DecoratorFunctionBase<Context, StoryFn>,
        Parameters extends ParametersType
    > {
        (context?: Context): ReturnType<StoryFn>;
        storyName?: StoryName;
        decorators?: Decorator[];
        parameters?: Parameters;
    }

    export type StoryFn = (c?: Context) => JSXElementConstructor<Record<string, unknown>>;

    export type DecoratorFunction = DecoratorFunctionBase<Context, StoryFn>;

    export type KindMetaWithParams<Parameters, Component = unknown> = KindMetaBase<
        DecoratorFunction,
        Parameters,
        Component
    >;

    export type KindMeta<Component = unknown> = KindMetaWithParams<DefaultParameters, Component>;

    export type StoryMeta<Parameters = DefaultParameters> = StoryMetaBase<
        Context,
        StoryFn,
        DecoratorFunction,
        Parameters
    >;
}
