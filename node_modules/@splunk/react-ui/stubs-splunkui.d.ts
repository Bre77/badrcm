declare const __DEV__: boolean;
declare const __EXAMPLES__: any;
declare const __OPTIONS__: any;
declare const __EXAMPLES_OFFSET__: number;

declare module '__FONTS_IMPORT__/*' {
    const component: string;
    export default component;
}

declare module '@splunk/ui-utils/color' {
    function expandShortHandHex<T extends string | null | undefined>(arg: T): T;
    function isValidHexColor(value: string): boolean;
    function isCSSColor(value: string): boolean;
    const extendedColorKeywords: string[];
}

declare module '@splunk/ui-utils/filter' {
    function keywordLocations(
        phrase: string,
        keywords: string[]
    ): { keyword: string; start: number; end: number }[];
    function stringToKeywords(filterPhrase?: string): string[];
    function testPhrase(phrase: string, keywords: string[]): boolean;
}

declare module '@splunk/ui-utils/format' {
    // for now, assume this is guaranteed to return a string (and not undefined, null, ...)
    function sprintf(...args: any[]): string;
}

declare module '@splunk/ui-utils/focus' {
    // getSortedTabbableElements returns Elements
    // handleTab / takeFocus both call focus() which exists only on HTMLElement/SVGElement (modern browsers), but not Element
    function getSortedTabbableElements(container: Element): Element[];
    function isTabKey(event: KeyboardEvent<Element>): boolean;
    function handleTab(container: Element, event: KeyboardEvent): Element | null;
    function takeFocus(container: Element, defaultElement?: 'first' | 'container'): Element | null;
}

declare module '@splunk/ui-utils/i18n' {
    // for now, assume this is guaranteed to return a string (and not undefined, null, ...)
    function _(...args: any[]): string;
}

declare module '@splunk/ui-utils/id' {
    function createDOMID(prefix?: string): string;
    function createGUID(): string;
}

declare module '@splunk/ui-utils/keyboard' {
    function addsCharacter(event: KeyboardEvent): boolean | undefined;
    function keycode(event: KeyboardEvent | number | string): string;
    function isDecimal(event: KeyboardEvent, options?: { locale: string }): boolean;
    function isMinus(event: KeyboardEvent): boolean;
    function isNumber(event: KeyboardEvent): boolean;
    function isNumeric(event: KeyboardEvent, options?: { locale: string }): boolean;
}

declare module '@splunk/ui-utils/promise' {
    interface CancelablePromise<T> {
        cancel: () => void;
        promise: Promise<T>;
    }

    function makeCancelable<T>(arg: Promise<T>): CancelablePromise<T>;
}

declare module '@splunk/ui-utils/style' {
    type ClassNameArg = ClassNameArg | Record<string, unknown> | string | undefined | null;
    function toClassName(...args: ClassNameArg[]): string;
}

declare module '@splunk/ui-utils/userAgent' {
    function isIE11(): boolean;
}

declare module '@splunk/wdio-functional-test-runner/testUtils' {
    function isEdge(): boolean;
    function isFirefox(): boolean;
    function isIE(): boolean;
    function isSafari(): boolean;

    function clickAndDragElement(options: {
        selector: string | Function;
        locationOffsetX?: number;
        locationOffsetY?: number;
        x?: number;
        y?: number;
        immediateRelease?: boolean;
    }): (() => {}) | undefined;

    function focusOnSelector(selector: string): void;
    function resetFocus(): void;
    function setTextValue(
        selector: string | Function,
        value: string,
        options?: { click?: boolean }
    );
}

declare module '@splunk/react-docs/DocExample' {
    function getDependencyVersions(
        packageJSON: Record<string, unknown>,
        additionalDependencies?: string[],
        packageVersion?: string
    ): Record<string, unknown>;
}

declare module '!!raw-loader!*' {
    const contents: string;
    export = contents;
}
