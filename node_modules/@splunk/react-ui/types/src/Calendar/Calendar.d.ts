import React, { Component } from 'react';
import { DateTableChangeHandler } from './DateTable';
import { ClassComponentProps } from '../utils/types';
declare type CalendarChangeHandler = DateTableChangeHandler;
interface CalendarPropsBase {
    /**
     * The id of the description. When placed in a ControlGroup, this automatically set to the
     * ControlGroup's help component.
     */
    describedBy?: string;
    /** Highlight today's day. */
    highlightToday?: boolean;
    /**
     * The id of the label. When placed in a ControlGroup, this automatically set to the
     * ControlGroup's label.
     */
    labelledBy?: string;
    /** Locale set by language and localization specifiers. */
    locale?: string;
    /**
     * Called when a date is selected from the Calendar.
     */
    onChange?: CalendarChangeHandler;
    /**
     * The current date value formatted 'YYYY-MM-DD'.
     */
    value?: string;
}
declare const defaultProps: Required<Pick<CalendarPropsBase, 'locale' | 'value'>>;
declare type CalendarProps = ClassComponentProps<CalendarPropsBase, typeof defaultProps, 'div'>;
interface CalendarState {
    internalValue: string;
    todayValue: string;
}
declare class Calendar extends Component<CalendarProps, CalendarState> {
    private monthHeaderId;
    private todayTimerId?;
    static propTypes: React.WeakValidationMap<ClassComponentProps<CalendarPropsBase, Required<Pick<CalendarPropsBase, "value" | "locale">>, "div", never>>;
    static defaultProps: Required<Pick<CalendarPropsBase, "value" | "locale">>;
    constructor(props: Readonly<CalendarProps>);
    componentDidMount(): void;
    componentWillUnmount(): void;
    componentDidUpdate(prevProps: Readonly<CalendarProps>): void;
    private getToday;
    private handleMonthChange;
    private static validateValue;
    render(): JSX.Element;
}
export default Calendar;
export { CalendarChangeHandler };
