import React, { Component } from 'react';
import Body from './Body';
import Footer from './Footer';
import Header from './Header';
import { ClassComponentProps } from '../utils/types';
/** @public */
declare type CardClickHandler = (event: React.MouseEvent<HTMLAnchorElement | HTMLButtonElement>, data: {
    selected: boolean;
    value?: any;
}) => void;
interface CardPropsBase {
    /**
     * Any children that can be rendered can be passed to the `Card`.
     *
     * To use the default Splunk UI `Card` styles, use the
     * `Card.Header`, `Card.Body`, and `Card.Footer`.
     */
    children?: React.ReactNode;
    /**
     * A React ref which is set to the DOM element when the component mounts and null when it unmounts.
     */
    elementRef?: React.Ref<HTMLAnchorElement | HTMLButtonElement | HTMLDivElement>;
    /** @private */
    margin?: number;
    /** @private */
    minWidth?: number | string;
    /** @private */
    maxWidth?: number | string;
    /**
     * Callback when the `Card` is clicked.
     */
    onClick?: CardClickHandler;
    /**
     * To open the `to` link in a new window, set `openInNewContext` to `true`.
     */
    openInNewContext?: boolean;
    /**
     * Renders `Card` as selected if set to `true`.
     */
    selected?: boolean;
    /**
     * Includes a border on the `Card` if set to `true`.
     * @excludeTheme prisma
     * */
    showBorder?: boolean;
    /**
     * Takes a URL to go to when the `Card` is clicked.
     */
    to?: string;
    /** Returns a value on click. Use when composing or if you have more than one selectable `Card`. */
    value?: any;
}
declare const defaultProps: Required<Pick<CardPropsBase, 'openInNewContext' | 'selected' | 'showBorder'>>;
interface CardPropsBaseNonClickable extends CardPropsBase {
    elementRef?: React.Ref<HTMLDivElement>;
    onClick?: never;
    to?: never;
}
interface CardPropsBaseClickable extends CardPropsBase {
    elementRef?: React.Ref<HTMLAnchorElement | HTMLButtonElement>;
    onClick?: CardClickHandler;
    to?: string;
}
declare type CardNonClickableProps = ClassComponentProps<CardPropsBaseNonClickable, typeof defaultProps, 'div'>;
declare type CardClickableButtonProps = ClassComponentProps<CardPropsBaseClickable, typeof defaultProps, 'button'>;
declare type CardClickableLinkProps = ClassComponentProps<CardPropsBaseClickable, typeof defaultProps, 'a', 'href'>;
declare type CardProps = CardNonClickableProps | CardClickableButtonProps | CardClickableLinkProps;
declare class Card extends Component<CardProps, {}> {
    static propTypes: React.WeakValidationMap<ClassComponentProps<CardPropsBaseNonClickable, Required<Pick<CardPropsBase, "selected" | "openInNewContext" | "showBorder">>, "div", never>> | React.WeakValidationMap<ClassComponentProps<CardPropsBaseClickable, Required<Pick<CardPropsBase, "selected" | "openInNewContext" | "showBorder">>, "button", never>> | React.WeakValidationMap<ClassComponentProps<CardPropsBaseClickable, Required<Pick<CardPropsBase, "selected" | "openInNewContext" | "showBorder">>, "a", "href">>;
    static defaultProps: Required<Pick<CardPropsBase, "selected" | "openInNewContext" | "showBorder">>;
    static Header: typeof Header;
    static Body: typeof Body;
    static Footer: typeof Footer;
    private handleCardClick;
    render(): JSX.Element;
}
export default Card;
export { CardClickHandler, Header, Body, Footer };
