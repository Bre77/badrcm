import React from 'react';
import PropTypes from 'prop-types';
import { ComponentProps } from '../utils/types';
interface CardLayoutPropsBase {
    /** Aligns `Card`s in layout. */
    alignCards?: 'left' | 'center' | 'right';
    /**
     * Must be `Card`.
     */
    children?: React.ReactNode;
    /** Sets width of each `Card`. */
    cardWidth?: number | string;
    /** Sets minimum width of each `Card`. */
    cardMinWidth?: number | string;
    /** Sets maximum width of each `Card`. */
    cardMaxWidth?: number | string;
    /**
     * A React ref which is set to the DOM element when the component mounts and null when it unmounts.
     */
    elementRef?: React.Ref<HTMLDivElement>;
    /** Sets space in pixels between each `Card`. */
    gutterSize?: number;
    /** Lets `Card`s wrap to a new line when the container gets narrow. */
    wrapCards?: boolean;
}
declare type CardLayoutProps = ComponentProps<CardLayoutPropsBase, 'div'>;
declare function CardLayout({ alignCards, cardMaxWidth, cardMinWidth, cardWidth, children, elementRef, gutterSize, style, wrapCards, ...otherProps }: CardLayoutProps): JSX.Element;
declare namespace CardLayout {
    var propTypes: {
        alignCards: PropTypes.Requireable<string>;
        cardMaxWidth: PropTypes.Requireable<React.ReactText>;
        cardMinWidth: PropTypes.Requireable<React.ReactText>;
        cardWidth: PropTypes.Requireable<React.ReactText>;
        children: PropTypes.Requireable<PropTypes.ReactNodeLike>;
        elementRef: PropTypes.Requireable<object>;
        gutterSize: PropTypes.Requireable<number>;
        wrapCards: PropTypes.Requireable<boolean>;
    };
}
export default CardLayout;
