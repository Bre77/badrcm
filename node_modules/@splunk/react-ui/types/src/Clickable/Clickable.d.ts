import React, { Component } from 'react';
import { legacyRefMode } from '@splunk/react-ui/Dropdown';
import { NavigationProviderClickHandler } from './NavigationProvider';
import { ClassComponentProps } from '../utils/types';
export declare const isInternalLink: (to: string | undefined) => boolean;
interface ClickablePropsBase {
    /**
     * Links may need to be rendered as "disabled": e.g. last link in a breadcrumb. Disabled links, must have the `to` (ideally to '') and `disabled` props set.
     *  @private
     */
    allowDisabledLink?: boolean;
    children?: React.ReactNode;
    /**
     * Add a disabled attribute and prevent clicking.
     */
    disabled?: boolean;
    /**
     * A React ref which is set to the DOM element when the component mounts and null when it unmounts.
     *
     * `HTMLAnchorElement` in link mode, `HTMLButtonElement` otherwise.
     */
    elementRef?: React.Ref<HTMLButtonElement | HTMLAnchorElement>;
    /**
     * The onClick event handler is ignored if Ctrl or meta keys are pressed,
     * which allows the link to open in a new context.
     */
    onClick?: React.MouseEventHandler<HTMLButtonElement | HTMLAnchorElement>;
    /**
     * To open the link in a new window, set openInNewContext to `true`.
     * Ignored if not in link mode.
     */
    openInNewContext?: boolean;
    /**
     * The text representation of the navigational link.
     * This should be provided if child content is not a string.
     *
     * Ignored if not in link mode.
     */
    navigationLabel?: string;
    /**
     * A URL for a link. If set and not disabled, an `a` element is used instead
     * of a `button` element (link mode).
     */
    to?: string;
}
declare const defaultProps: Required<Pick<ClickablePropsBase, 'disabled' | 'openInNewContext'>>;
declare type ClickableButtonProps = ClassComponentProps<ClickablePropsBase, typeof defaultProps, 'button'>;
declare type ClickableLinkProps = ClassComponentProps<ClickablePropsBase, typeof defaultProps, 'a', 'href'>;
declare type ClickableProps = ClickableButtonProps | ClickableLinkProps;
/**
 * `Clickable` renders as a `button` element, or as an `a` element if the `to` prop is set
 * and the `disabled` prop is `false`. This is called link mode.
 */
declare class Clickable extends Component<ClickableProps> {
    private el;
    static contextType: React.Context<{
        onClick?: NavigationProviderClickHandler | undefined;
        prefix?: string | undefined;
    }>;
    static propTypes: React.WeakValidationMap<ClassComponentProps<ClickablePropsBase, Required<Pick<ClickablePropsBase, "disabled" | "openInNewContext">>, "button", never>> | React.WeakValidationMap<ClassComponentProps<ClickablePropsBase, Required<Pick<ClickablePropsBase, "disabled" | "openInNewContext">>, "a", "href">>;
    static defaultProps: Required<Pick<ClickablePropsBase, "disabled" | "openInNewContext">>;
    static [legacyRefMode]: boolean;
    constructor(props: Readonly<ClickableProps>);
    private handleMount;
    private createHandleOnClick;
    /**
     * Place focus on the element.
     */
    focus(): void;
    render(): JSX.Element;
}
export default Clickable;
