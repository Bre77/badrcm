import React, { Component } from 'react';
import Panel from './Panel';
import { ClassComponentProps } from '../utils/types';
interface ConcertinaPropsBase {
    /**
     * Must be `Concertina.Panel`.
     */
    children?: React.ReactNode;
    /**
     * A React ref which is set to the DOM element when the component mounts and null when it unmounts.
     */
    elementRef?: React.Ref<HTMLDivElement>;
}
declare const defaultProps: {};
declare type ConcertinaProps = ClassComponentProps<ConcertinaPropsBase, typeof defaultProps, 'div'>;
interface ConcertinaState {
    innerWidth?: number | string;
    panelsBottomCount: number;
    panelsTopCount: number;
    scrollEl: Element | null;
    targetTop?: number;
}
declare class Concertina extends Component<ConcertinaProps, ConcertinaState> {
    private panelPositions;
    static propTypes: React.WeakValidationMap<ClassComponentProps<ConcertinaPropsBase, {}, "div", never>>;
    static defaultProps: {};
    static Panel: typeof Panel;
    constructor(props: Readonly<ConcertinaProps>);
    componentWillUnmount(): void;
    private handleUpdate;
    private handleElementMount;
    private handleResize;
    private handleScroll;
    private handleScrollComplete;
    private handleClick;
    private updateHeadingsImpl;
    private updateHeadings;
    private renderHeadings;
    render(): JSX.Element;
}
export default Concertina;
export { Panel };
