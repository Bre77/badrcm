import React, { Component } from 'react';
import Heading, { HeadingClickHandler } from './Heading';
import { ClassComponentProps } from '../utils/types';
import ConcertinaContext from './ConcertinaContext';
declare type PanelClickHandler = HeadingClickHandler;
declare type PanelChangeHandler = (event: UIEvent | undefined, data: {
    headingHeight: number;
    height: number;
    index: number;
    panelId?: string;
}) => void;
interface PanelPropsBase {
    children?: React.ReactNode;
    /** Displays right-aligned text in the title bar of the `panel`. */
    description?: React.ReactNode;
    /**
     * A React ref which is set to the DOM element when the component mounts and null when it unmounts.
     */
    elementRef?: React.Ref<HTMLDivElement>;
    /** @private */
    index?: number;
    /** An optional `id` that is displayed in the markup for testing. */
    panelId?: string;
    /**
     * Set the state of a `panel` to 'error' (red), 'warning' (yellow), or 'disabled' (gray).
     * Disabled panels do not allow user interaction, and do not display content.
     */
    status?: 'normal' | 'warning' | 'error' | 'disabled';
    /**
     * Displays left-aligned title text in the title bar of the `panel`.
     */
    title: React.ReactNode;
}
declare const defaultProps: Required<Pick<PanelPropsBase, 'status'>>;
declare type PanelProps = ClassComponentProps<PanelPropsBase, typeof defaultProps, 'div'>;
interface PanelState {
    containerEl: HTMLDivElement | null;
    bodyEl: HTMLDivElement | null;
    heading: Heading | null;
}
declare class Panel extends Component<PanelProps, PanelState> {
    private lastHeight?;
    static propTypes: React.WeakValidationMap<ClassComponentProps<PanelPropsBase, Required<Pick<PanelPropsBase, "status">>, "div", never>>;
    static defaultProps: Required<Pick<PanelPropsBase, "status">>;
    static contextType: React.Context<ConcertinaContext>;
    constructor(props: Readonly<PanelProps>);
    componentDidUpdate(prevProps: Readonly<PanelProps>, prevState: Readonly<PanelState>): void;
    componentWillUnmount(): void;
    private measureHeight;
    private handleResize;
    private handleMount;
    private handleHeadingMount;
    private handleBodyMount;
    focus(): void;
    render(): JSX.Element;
}
export default Panel;
export { PanelChangeHandler, PanelClickHandler };
