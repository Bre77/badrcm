import React from 'react';
import PropTypes from 'prop-types';
import Description from './Description';
import Term from './Term';
import { ComponentProps } from '../utils/types';
interface DefinitionListPropsBase {
    children?: React.ReactNode;
    /**
     * A React ref which is set to the DOM element when the component mounts and null when it unmounts.
     */
    elementRef?: React.Ref<HTMLDListElement>;
    /**
     * Defines the width of an item on the list.
     */
    termWidth?: number | string;
}
declare type DefinitionListProps = ComponentProps<DefinitionListPropsBase, 'dl'>;
declare function DefinitionList({ children, elementRef, termWidth, ...otherProps }: DefinitionListProps): JSX.Element;
declare namespace DefinitionList {
    var propTypes: {
        children: PropTypes.Requireable<PropTypes.ReactNodeLike>;
        elementRef: PropTypes.Requireable<object>;
        termWidth: PropTypes.Requireable<React.ReactText>;
    };
    var Description: typeof import("./Description").default;
    var Term: typeof import("./Term").default;
}
export default DefinitionList;
export { Description, Term };
