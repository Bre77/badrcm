import React, { Component } from 'react';
import PropTypes from 'prop-types';
import Row from './Row';
import type { RowRequestRemoveHandler, RowWithoutSortable } from './Row';
import { ClassComponentProps } from '../utils/types';
/** @public */
declare type FormRowsRequestMoveHandler = (data: {
    fromIndex: number;
    toIndex: number;
}) => void;
interface FormRowsPropsBase {
    /** Label on the Add Row Button. Ignored when menu prop is defined. */
    addLabel?: string;
    /** @private */
    children?: React.ReactNode;
    /** Disable the add button, the remove button and the sort/drag action. */
    disabled?: boolean;
    /**
     * A React ref which is set to the DOM element when the component mounts, and null when it unmounts.
     */
    elementRef?: React.Ref<HTMLDivElement>;
    /** Header for the rows. */
    header?: React.ReactNode;
    /** Replaces Add Row Button with custom content or controls. */
    menu?: React.ReactNode;
    /** Callback when the "Add" button is clicked. If `onRequestAdd` is defined, 'onRequestRemove' should be defined in `<FormRows.Row>`. Neither should be defined for a reorder-only variant of `<FormRows>`. */
    onRequestAdd?: React.MouseEventHandler<HTMLButtonElement | HTMLAnchorElement>;
    /** Callback when sort action completes. Omit this to make rows unsortable. */
    onRequestMove?: FormRowsRequestMoveHandler;
}
declare const defaultProps: Required<Pick<FormRowsPropsBase, 'addLabel' | 'disabled' | 'header'>>;
declare type FormRowsProps = ClassComponentProps<FormRowsPropsBase, typeof defaultProps, 'div'>;
declare class FormRows extends Component<FormRowsProps, {}> {
    static propTypes: React.WeakValidationMap<ClassComponentProps<FormRowsPropsBase, Required<Pick<FormRowsPropsBase, "header" | "disabled" | "addLabel">>, "div", never>>;
    static defaultProps: Required<Pick<FormRowsPropsBase, "header" | "disabled" | "addLabel">>;
    static Row: React.ComponentClass<Pick<import("./Row").RowPropsBase, "children" | "value" | "elementRef" | "index" | "onRequestRemove" | "rowIndex"> & Pick<PropTypes.InferProps<React.WeakValidationMap<import("./Row").RowPropsBase>>, never> & Pick<import("./Row").RowPropsBase, never>, any>;
    /**
     * Static function for adding a row.
     *
     * Example Use:
     *
     *      onRequestAdd() => {
     *          this.setState(state => ({
     *              items: FormRows.addRow(
     *                  <FormRows.Row
     *                      index={state.items.length}
     *                      key={createDOMID()}
     *                      onRequestRemove={this.handleRequestRemove}
     *                  >
     *                      <Text />
     *                  </FormRows.Row>,
     *                  state.items
     *              ),
     *          }));
     *      };
     *
     * @param element Row element to add.
     * @param items Array of current FormRows to add to.
     * @return New array of FormRows with new Row added.
     */
    static addRow(element: React.ReactElement, items: React.ReactElement[]): React.ReactElement<any, string | ((props: any) => React.ReactElement<any, string | any | (new (props: any) => React.Component<any, any, any>)> | null) | (new (props: any) => React.Component<any, any, any>)>[];
    /**
     * Static function for moving a row.
     *
     * Example Use:
     *
     *      onRequestMove({ fromIndex, toIndex }) => {
     *          this.setState(state => ({
     *              items: FormRows.moveRow(fromIndex, toIndex, state.items),
     *          }));
     *      };
     *
     * @param fromIndex Current index of row to move.
     * @param toIndex New index to move row to.
     * @param items Array of current FormRows.
     * @return New array of FormRows arranged in new order.
     */
    static moveRow(fromIndex: number, toIndex: number, items: React.ReactElement[]): React.ReactElement<any, string | ((props: any) => React.ReactElement<any, string | any | (new (props: any) => React.Component<any, any, any>)> | null) | (new (props: any) => React.Component<any, any, any>)>[];
    /**
     * Static function for removing a row.
     *
     * Example Use:
     *
     *      onRequestRemove(e, { index }) => {
     *          this.setState(state => ({
     *              items: FormRows.removeRow(index, state.items),
     *          }));
     *      };
     *
     * @param index Index of Row to delete.
     * @param items Array of current FormRows.
     * @return New array of FormRows with Row of given index deleted.
     */
    static removeRow(index: number, items: React.ReactElement[]): React.ReactElement<any, string | ((props: any) => React.ReactElement<any, string | any | (new (props: any) => React.Component<any, any, any>)> | null) | (new (props: any) => React.Component<any, any, any>)>[];
    private handleKeyDown;
    private handleSortEnd;
    render(): JSX.Element;
}
export default FormRows;
export { Row };
export type { FormRowsRequestMoveHandler, RowRequestRemoveHandler, RowWithoutSortable };
