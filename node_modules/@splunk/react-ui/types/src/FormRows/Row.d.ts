import React, { Component } from 'react';
import PropTypes from 'prop-types';
import FormRowsContext from './FormRowsContext';
declare type RowKeyDownHandler = (event: React.KeyboardEvent<HTMLDivElement>, data: {
    index: number;
}) => void;
/** @public */
declare type RowRequestRemoveHandler = (event: React.MouseEvent<HTMLButtonElement>, data: {
    index: number;
}) => void;
interface RowPropsBase {
    children?: React.ReactNode;
    /**
     * A React ref which is set to the DOM element when the component mounts and null when it unmounts.
     */
    elementRef?: React.Ref<HTMLDivElement>;
    /** Index of the row */
    index?: number;
    /** Callback when remove button is clicked. */
    onRequestRemove?: RowRequestRemoveHandler;
    /**
     * @private
     * Sortable HOC consumes and removes `index`, so we have `rowIndex` to keep
     * track of it internally.
     */
    rowIndex?: number;
    /** The contents of Row */
    value?: React.ReactNode;
}
declare class Row extends Component<RowPropsBase, {}> {
    static propTypes: React.WeakValidationMap<RowPropsBase>;
    static contextType: React.Context<FormRowsContext>;
    private handleKeyDown;
    private handleRequestRemove;
    render(): JSX.Element;
}
declare const SortableRow: React.ComponentClass<Pick<RowPropsBase, "children" | "value" | "elementRef" | "index" | "onRequestRemove" | "rowIndex"> & Pick<PropTypes.InferProps<React.WeakValidationMap<RowPropsBase>>, never> & Pick<RowPropsBase, never>, any>;
export default SortableRow;
export type { Row as RowWithoutSortable, RowKeyDownHandler, RowPropsBase, RowRequestRemoveHandler };
