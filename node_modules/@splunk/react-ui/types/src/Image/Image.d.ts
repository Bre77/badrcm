import React, { Component } from 'react';
import PropTypes from 'prop-types';
import { ClassComponentProps } from '../utils/types';
/** @public */
declare type ImageImageChangeHandler = (data: {
    filename: string | null;
    imageDataURI: string | null;
}) => void;
interface ImagePropsBase {
    /** Specify the allowed image extensions. Should be an array
     * of image extensions, e.g., ['gif', 'jpg', 'png'].
     */
    allowExtensions?: string[];
    /** The default file name of the selected image. In order to render selected image preview,
     * need to set valid defaultFilename (end with allowed image extensions, e.g., 'default.png')
     * and defaultImageDataURI at the same time. */
    defaultFilename?: string;
    /** The default selected image data (as data URI). Need to set with defaultFilename at the same time. */
    defaultImageDataURI?: string;
    /** Prevents user from selecting or dropping images. */
    disabled?: boolean;
    /** Image can be dropped anywhere on the page. */
    dropAnywhere?: boolean;
    /** A React ref which is set to the DOM element when the component mounts and
     * null when it unmounts. */
    elementRef?: React.Ref<HTMLDivElement>;
    /** Show the component in an error state. */
    error: boolean;
    /** The max-height of the preview in pixels. */
    maxHeight?: number;
    /** A callback for when the image changes. The function is passed an
     * object containing two keys: `filename` and `imageDataURI`. Both are
     * `null` if the image was removed. */
    onImageChange?: ImageImageChangeHandler;
}
declare const defaultProps: Required<Pick<ImagePropsBase, 'allowExtensions' | 'disabled' | 'dropAnywhere' | 'error' | 'maxHeight'>>;
declare type ImageProps = ClassComponentProps<ImagePropsBase, typeof defaultProps, 'div'>;
interface ImageState {
    filename?: string | null;
    imageDataURI?: string | null;
}
/**
 * Image provides the ability to accept image files and present a preview of the image.
 */
declare class Image extends Component<ImageProps, ImageState> {
    private fileReader;
    static propTypes: {
        allowExtensions: PropTypes.Requireable<(string | null | undefined)[]>;
        defaultFilename: PropTypes.Requireable<string>;
        defaultImageDataURI: PropTypes.Requireable<string>;
        disabled: PropTypes.Requireable<boolean>;
        dropAnywhere: PropTypes.Requireable<boolean>;
        elementRef: PropTypes.Requireable<object>;
        error: PropTypes.Requireable<boolean>;
        maxHeight: PropTypes.Requireable<number>;
        onImageChange: PropTypes.Requireable<(...args: any[]) => any>;
    };
    static defaultProps: Required<Pick<ImagePropsBase, "disabled" | "maxHeight" | "error" | "dropAnywhere" | "allowExtensions">>;
    static isAllowedFilename(filename: string, allowExtensions: string[]): boolean;
    constructor(props: Readonly<ImageProps>);
    componentDidUpdate(prevProps: Readonly<ImageProps>): void;
    private handleAddFiles;
    private handleRemoveFile;
    render(): JSX.Element;
}
export default Image;
export { ImageImageChangeHandler };
export type { ImagePropsBase };
