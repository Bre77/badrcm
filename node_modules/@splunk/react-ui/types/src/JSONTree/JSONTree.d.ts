import React from 'react';
import PropTypes from 'prop-types';
import { ComponentProps } from '../utils/types';
/** @public */
declare type JSONElement = string | {
    [x: string]: JSONElement;
} | number | boolean | null | JSONElement[];
/** @public */
declare type JSONTreeClickValueHandler = (event: React.MouseEvent<HTMLButtonElement>, data: {
    key: string;
    keyPath: (string | number)[];
    value: string;
}) => void;
/** @public */
declare type JSONTreeClickKeyHandler = (event: React.MouseEvent<HTMLButtonElement>, data: {
    key: string;
    keyPath: (string | number)[];
}) => void;
interface JSONTreePropsBase {
    /**
     * A React ref which is set to the DOM element when the component mounts and null when it unmounts.
     */
    elementRef?: React.Ref<HTMLElement>;
    /**
     * The JSON string to visualize. Alternatively, this prop also accepts objects and other
     * possible return types of `JSON.parse`. `JSONTree` doesn't perform any runtime type
     * validation. If the passed value contains circular dependencies or types not
     * representable in JSON like functions and symbols, the component behavior is unspecified.
     */
    json: string | JSONElement;
    /**
     * Number of space characters per level of indentation.
     */
    indent?: number;
    /**
     * Optional event handler to call if keys are clicked on.
     * The function signature is `onClickKey({path, keyPath, value})`, where `path` is the property path
     *, `.a.b`; and keyPath is an array of that property path, `['a', 'b'].
     */
    onClickKey?: JSONTreeClickKeyHandler;
    /**
     * Optional event handler to call if values are clicked on.
     * The function signature is `onClickValue({path, keyPath, value})`, where `path` is the property path
     *, `.a.b`; keyPath is an array of that property path, `['a', 'b']; and `value` is the value that was clicked.
     */
    onClickValue?: JSONTreeClickValueHandler;
    /**
     * Starts with all nodes expanded if set to `true`. The default is `false`, which expands only the first
     * level of properties.
     */
    expandChildren?: boolean | 'withShiftModifier';
    /**
     * Handles overflow by wrapping values or by enabling scrolling.
     */
    overflow?: 'wrap' | 'scroll';
}
declare type JSONTreeProps = ComponentProps<JSONTreePropsBase, 'code'>;
/**
 * Used to visualize a JSON string.
 */
declare function JSONTree({ elementRef, expandChildren, indent, json, onClickKey, onClickValue, overflow, ...otherProps }: JSONTreeProps): JSX.Element;
declare namespace JSONTree {
    var propTypes: {
        elementRef: PropTypes.Requireable<object>;
        json: PropTypes.Validator<string | number | boolean | object>;
        indent: PropTypes.Requireable<number>;
        onClickKey: PropTypes.Requireable<(...args: any[]) => any>;
        onClickValue: PropTypes.Requireable<(...args: any[]) => any>;
        expandChildren: PropTypes.Requireable<string | boolean>;
        overflow: PropTypes.Requireable<string>;
    };
}
export default JSONTree;
export { JSONElement, JSONTreeClickValueHandler, JSONTreeClickKeyHandler };
