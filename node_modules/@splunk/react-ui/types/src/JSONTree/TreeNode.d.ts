import React, { Component } from 'react';
import { JSONElement, JSONTreeClickValueHandler, JSONTreeClickKeyHandler } from './JSONTree';
import { ClassComponentProps } from '../utils/types';
interface JSONTreeNodePropsBase {
    path?: (string | number)[];
    defaultOpen?: boolean;
    expandChildren?: boolean | 'withShiftModifier';
    indent?: number;
    indentLevel?: number;
    obj: JSONElement;
    onClickKey?: JSONTreeClickKeyHandler;
    onClickValue?: JSONTreeClickValueHandler;
    overflow?: 'wrap' | 'scroll';
}
declare const defaultProps: Required<Pick<JSONTreeNodePropsBase, 'path' | 'defaultOpen' | 'expandChildren' | 'indent' | 'indentLevel' | 'overflow'>>;
declare type JSONTreeNodeProps = ClassComponentProps<JSONTreeNodePropsBase, typeof defaultProps, 'span'>;
interface JSONTreeNodeState {
    open: boolean;
}
/**
 * An internal container class for expandable tree nodes (objects and arrays).
 */
declare class JSONTreeNode extends Component<JSONTreeNodeProps, JSONTreeNodeState> {
    private regularIndent;
    private closingIndent;
    static propTypes: React.WeakValidationMap<ClassComponentProps<JSONTreeNodePropsBase, Required<Pick<JSONTreeNodePropsBase, "path" | "overflow" | "defaultOpen" | "expandChildren" | "indent" | "indentLevel">>, "span", never>>;
    static defaultProps: Required<Pick<JSONTreeNodePropsBase, "path" | "overflow" | "defaultOpen" | "expandChildren" | "indent" | "indentLevel">>;
    constructor(props: JSONTreeNodeProps);
    private handleExpandClick;
    private handleClickKey;
    private handleClickValue;
    private renderExpandLink;
    private renderValue;
    private renderKey;
    private renderObject;
    render(): JSX.Element;
}
export default JSONTreeNode;
