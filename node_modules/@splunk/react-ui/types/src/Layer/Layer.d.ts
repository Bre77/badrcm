import React, { Component } from 'react';
/** @public */
declare type LayerPossibleCloseReason = 'clickAway' | 'escapeKey';
/** @public */
declare type LayerRequestCloseHandler = (data: {
    event: MouseEvent | KeyboardEvent | TouchEvent;
    reason: LayerPossibleCloseReason;
}) => void;
interface LayerPropsBase {
    children?: React.ReactNode;
    /**
     * An array of reasons (`clickAway`, `escapeKey`) for which this `Layer` should close.
     */
    closeReasons?: LayerPossibleCloseReason[];
    /**
     * Invoked when a potential close event occurs. The function is passed a data object
     * containing the event and a reason. Possible reasons are `escapeKey` and `clickAway`.
     */
    onRequestClose?: LayerRequestCloseHandler;
    /**
     * Whether the component is currently open.
     */
    open?: boolean;
}
declare const defaultProps: Required<Pick<LayerPropsBase, 'closeReasons' | 'open'>>;
declare type LayerProps = LayerPropsBase & typeof defaultProps;
declare class Layer extends Component<LayerProps, {}> {
    private layerClickEvent;
    private static layerContainer;
    static possibleCloseReasons: LayerPossibleCloseReason[];
    static propTypes: React.WeakValidationMap<LayerProps>;
    static defaultProps: Required<Pick<LayerPropsBase, "open" | "closeReasons">>;
    static contextType: React.Context<Layer[]>;
    constructor(props: Readonly<LayerProps>);
    componentDidMount(): void;
    componentDidUpdate(prevProps: Readonly<LayerProps>): void;
    componentWillUnmount(): void;
    private getLayerStack;
    private handleClickOnLayer;
    private handleClickOnWindow;
    private handleKeyDownOnWindow;
    render(): JSX.Element | null;
}
export default Layer;
export { LayerPossibleCloseReason, LayerRequestCloseHandler };
