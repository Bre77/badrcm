import React from 'react';
import PropTypes from 'prop-types';
import Layer from './Layer';
/**
 * `LayerStackContext` is used to manage the array that `Layer` (and components that
 * depend on it, such as `Modal`) uses to determine the order of open layers.
 * @public
 */
export declare const LayerStackContext: React.Context<Layer[]>;
interface LayerContextProps {
    /** Whether or not to have each layer create its own CSS stacking context. */
    separateStackingContexts?: boolean;
}
export declare const LayerContext: React.Context<LayerContextProps>;
interface LayerStackGlobalProviderProps extends LayerContextProps {
    children?: React.ReactNode;
    /** The object used to store the layer stack variable, for example `window`. */
    scope?: {
        [x: string]: any;
    };
    /** The variable name used to store the layer stack (on `scope`). */
    name?: string;
}
/**
 * A `LayerStackContext` provider that stores a shared layer stack using a global variable.
 * Applications should only use this provider if there's a known need to support multiple
 * instances of this library on the same page.
 */
declare function LayerStackGlobalProvider({ children, name, scope, separateStackingContexts, }: LayerStackGlobalProviderProps): JSX.Element;
declare namespace LayerStackGlobalProvider {
    var propTypes: {
        children: PropTypes.Requireable<PropTypes.ReactNodeLike>;
        name: PropTypes.Requireable<string>;
        scope: PropTypes.Requireable<object>;
        separateStackingContexts: PropTypes.Requireable<boolean>;
    };
}
export { LayerStackGlobalProvider };
