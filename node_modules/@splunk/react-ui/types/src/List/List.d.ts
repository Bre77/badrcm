import React from 'react';
import PropTypes from 'prop-types';
import Item from './Item';
import { ComponentProps } from '../utils/types';
interface ListPropsBase {
    children?: React.ReactNode;
    /**
     * A React ref which is set to the DOM element when the component mounts and null when it unmounts.
     *
     * `HTMLUListElement` if type is 'disc', `HTMLOListElement` otherwise.
     */
    elementRef?: React.Ref<HTMLOListElement | HTMLUListElement>;
    type?: 'disc' | 'decimal' | 'lower-alpha' | 'upper-alpha';
}
interface ListOrderedPropsBase extends ListPropsBase {
    elementRef?: React.Ref<HTMLOListElement>;
    type: 'decimal' | 'lower-alpha' | 'upper-alpha';
}
interface ListUnorderedPropsBase extends ListPropsBase {
    elementRef?: React.Ref<HTMLUListElement>;
    type?: 'disc';
}
declare type ListOrderedProps = ComponentProps<ListOrderedPropsBase, 'ol'>;
declare type ListUnorderedProps = ComponentProps<ListUnorderedPropsBase, 'ul'>;
declare type ListProps = ListOrderedProps | ListUnorderedProps;
declare function List({ children, elementRef, type, ...otherProps }: ListProps): JSX.Element;
declare namespace List {
    var propTypes: {
        children: PropTypes.Requireable<PropTypes.ReactNodeLike>;
        elementRef: PropTypes.Requireable<object>;
        type: PropTypes.Requireable<string>;
    };
    var Item: typeof import("./Item").default;
}
export default List;
export { Item };
