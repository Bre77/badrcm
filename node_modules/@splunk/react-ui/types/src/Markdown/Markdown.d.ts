import React from 'react';
import PropTypes from 'prop-types';
import { ComponentProps } from '../utils/types';
import { MarkdownBlockquote, MarkdownCodeBlock, MarkdownCode, MarkdownHeading, MarkdownAnchorHeading, MarkdownImage, MarkdownItem, MarkdownLink, MarkdownList, MarkdownParagraph } from './renderers';
/** @public */
declare type AnchorHeadingRenderer = (data: {
    children: React.ReactNode[];
    level: 1 | 2 | 3 | 4 | 5 | 6;
    nodeKey: string;
}) => React.ReactNode;
/** @public */
declare type BlockquoteRenderer = (data: {
    children: React.ReactNode[];
    nodeKey: string;
}) => React.ReactNode;
/** @public */
declare type CodeRenderer = (data: {
    inline: true;
    literal: string;
    nodeKey: string;
}) => React.ReactNode;
/** @public */
declare type CodeBlockRenderer = (data: {
    language?: string;
    literal: string;
    nodeKey: string;
}) => React.ReactNode;
/** @public */
declare type HeadingRenderer = (data: {
    children: React.ReactNode[];
    level: 1 | 2 | 3 | 4 | 5 | 6;
    nodeKey: string;
}) => React.ReactNode;
/** @public */
declare type ImageRenderer = (data: {
    alt: string;
    nodeKey: string;
    src: string;
    title?: string;
}) => React.ReactNode;
/** @public */
declare type ItemRenderer = (data: {
    children: React.ReactNode[];
    nodeKey: string;
}) => React.ReactNode;
/** @public */
declare type LinkRenderer = (data: {
    children: React.ReactNode[];
    href: string;
    nodeKey: string;
    title?: string;
}) => React.ReactNode;
/** @public */
declare type ListRenderer = (data: {
    children: React.ReactNode[];
    nodeKey: string;
    start: number | null;
    tight: boolean;
    type: 'bullet' | 'ordered';
}) => React.ReactNode;
/** @public */
declare type ParagraphRenderer = (data: {
    children: React.ReactNode[];
    nodeKey: string;
}) => React.ReactNode;
interface MarkdownPropsBase {
    /**
     * A custom blockquote renderer. The function is passed an object containing `children` and `nodeKey`.
     */
    blockquoteRenderer?: BlockquoteRenderer;
    /**
     * A custom code literal renderer. The function is passed an object containing `literal`,
     * `inline`, and `nodeKey`.
     */
    codeRenderer?: CodeRenderer;
    /**
     * A custom code block renderer. The function is passed an object containing `language`,
     * `literal`, and `nodeKey`.
     */
    codeBlockRenderer?: CodeBlockRenderer;
    /**
     * A React ref which is set to the DOM element when the component mounts and null when it unmounts.
     */
    elementRef?: React.Ref<HTMLDivElement>;
    /**
     * A custom heading renderer. The function is passed an object containing `level` from 1 to
     * 6, `children`, and `nodeKey`.
     */
    headingRenderer?: HeadingRenderer | AnchorHeadingRenderer;
    /**
     * A custom image renderer. The function is passed an object containing `src`, `title`,
     * `alt`, and `nodeKey`.
     */
    imageRenderer?: ImageRenderer;
    /**
     * A custom link renderer. This is useful for single-page apps that need to handle links
     * internally. The function is passed an object containing `href`, `title`, `children`, and `nodeKey`.
     */
    linkRenderer?: LinkRenderer;
    /**
     * A custom list renderer. The function is passed an object containing `start`,
     * `type` ('bullet' or 'ordered'), `tight`, and `nodeKey`.
     */
    listRenderer?: ListRenderer;
    /**
     * A custom list item renderer. The function is passed an object containing `children` and `nodeKey`.
     */
    itemRenderer?: ItemRenderer;
    /**
     * A custom paragraph renderer. The function is passed an object containing `children` and `nodeKey`.
     */
    paragraphRenderer?: ParagraphRenderer;
    /** The content to be parsed and rendered. */
    text: string;
}
declare type MarkdownProps = ComponentProps<MarkdownPropsBase, 'div'>;
/**
 * The `Markdown` component renders the given Markdown text as a React component.
 * The component prefers @splunk/react-ui components over plain HTML components. For example
 * links are rendered as the `@splunk/react-ui/Link` component instead of plain `<a>` tag.
 */
declare function Markdown({ blockquoteRenderer, codeBlockRenderer, codeRenderer, headingRenderer, imageRenderer, itemRenderer, linkRenderer, listRenderer, paragraphRenderer, text, ...otherProps }: MarkdownProps): JSX.Element;
declare namespace Markdown {
    var propTypes: {
        blockquoteRenderer: PropTypes.Requireable<(...args: any[]) => any>;
        codeBlockRenderer: PropTypes.Requireable<(...args: any[]) => any>;
        codeRenderer: PropTypes.Requireable<(...args: any[]) => any>;
        elementRef: PropTypes.Requireable<object>;
        headingRenderer: PropTypes.Requireable<(...args: any[]) => any>;
        imageRenderer: PropTypes.Requireable<(...args: any[]) => any>;
        itemRenderer: PropTypes.Requireable<(...args: any[]) => any>;
        linkRenderer: PropTypes.Requireable<(...args: any[]) => any>;
        listRenderer: PropTypes.Requireable<(...args: any[]) => any>;
        paragraphRenderer: PropTypes.Requireable<(...args: any[]) => any>;
        text: PropTypes.Validator<string>;
    };
}
export default Markdown;
export { MarkdownBlockquote, MarkdownCodeBlock, MarkdownCode, MarkdownHeading, MarkdownAnchorHeading, MarkdownImage, MarkdownItem, MarkdownLink, MarkdownList, MarkdownParagraph, BlockquoteRenderer, CodeBlockRenderer, CodeRenderer, HeadingRenderer, ImageRenderer, ItemRenderer, LinkRenderer, ListRenderer, ParagraphRenderer, };
