import React from 'react';
import PropTypes from 'prop-types';
import { ComponentProps } from '../utils/types';
interface LinkPropsBase {
    children?: React.ReactNode;
    /**
     * A React ref which is set to the DOM element when the component mounts and null when it unmounts.
     */
    elementRef?: React.Ref<HTMLAnchorElement | HTMLButtonElement>;
    /**
     * To open the link in a new window, set `openInNewContext` to `true`. An icon is added
     * indicating the behavior.
     */
    openInNewContext?: boolean;
    /**
     * The URL or path to link to.
     */
    to?: string;
}
declare type LinkLinkProps = ComponentProps<LinkPropsBase, 'a', 'href'>;
declare type LinkButtonProps = ComponentProps<LinkPropsBase, 'button'>;
declare type LinkProps = LinkLinkProps | LinkButtonProps;
/**
 * @deprecated `Message.Link` is deprecated and will be removed in a future major version. Use `Link` instead.
 *
 * A `Link` styled to work with `Message`'s `banner` appearance.
 */
declare function Link({ children, ...otherProps }: LinkProps): JSX.Element;
declare namespace Link {
    var propTypes: {
        children: PropTypes.Requireable<PropTypes.ReactNodeLike>;
        elementRef: PropTypes.Requireable<object>;
        openInNewContext: PropTypes.Requireable<boolean>;
        to: PropTypes.Requireable<string>;
    };
}
export default Link;
