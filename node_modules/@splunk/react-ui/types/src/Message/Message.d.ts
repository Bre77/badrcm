import React from 'react';
import PropTypes from 'prop-types';
import Link from './Link';
import { ComponentProps } from '../utils/types';
interface MessagePropsBase {
    /**
     *
     * Changes the style of the Message.
     *
     * @deprecatedValue 'banner'
     * The `banner` value is deprecated and will be removed in a future major version. Use `MessageBar` instead.
     *
     */
    appearance?: 'default' | 'fill' | 'banner';
    children?: React.ReactNode;
    /**
     * A React ref which is set to the DOM element when the component mounts and null when it unmounts.
     */
    elementRef?: React.Ref<HTMLDivElement>;
    /**
     * Includes a remove button if set. Always set this prop when using the `banner`
     * appearance, never set it when using the `default` appearance.
     */
    onRequestRemove?: React.MouseEventHandler<HTMLButtonElement>;
    /** Sets the severity or type of this `Message`. */
    type?: 'info' | 'warning' | 'error' | 'success';
}
declare type MessageProps = ComponentProps<MessagePropsBase, 'div'>;
declare function Message({ appearance, children, type, onRequestRemove, ...otherProps }: MessageProps): JSX.Element;
declare namespace Message {
    var propTypes: {
        appearance: PropTypes.Requireable<string>;
        children: PropTypes.Requireable<PropTypes.ReactNodeLike>;
        elementRef: PropTypes.Requireable<object>;
        onRequestRemove: PropTypes.Requireable<(...args: any[]) => any>;
        type: PropTypes.Requireable<string>;
    };
    var Title: typeof import("./Title").default;
    var Link: typeof import("./Link").default;
}
export default Message;
export { Link };
