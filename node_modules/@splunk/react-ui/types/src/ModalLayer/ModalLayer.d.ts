import React, { Component } from 'react';
interface AdditionalInterpolationProperties {
    top?: number;
}
declare type ModalLayerRenderModalHandler = (interpolatedStyle: {
    opacity: number;
} & AdditionalInterpolationProperties) => React.ReactNode;
declare type ModalLayerRequestCloseHandler = (data: {
    event: React.MouseEvent<HTMLDivElement> | MouseEvent | KeyboardEvent | TouchEvent;
    reason: 'clickAway' | 'escapeKey';
}) => void;
interface ModalLayerPropsBase {
    /**
     * A function that returns a default style object for react-spring. The values will be
     * used as initial values.
     */
    getDefaultMotionStyle?: () => AdditionalInterpolationProperties;
    /**
     * A function that returns a react-spring style object. The resulting interpolated style
     * will be passed to `renderModal`.
     */
    getMotionStyle?: () => AdditionalInterpolationProperties;
    /**
     * Indicate whether the animation of the children is still running.
     * If true, the ModalLayer should not close.
     */
    childrenInAnimation?: boolean;
    /**
     * A function that will be called when a close event occurs.
     * The callback will be passed a reason (either 'escapeKey', 'clickAway') and the event.
     */
    onRequestClose?: ModalLayerRequestCloseHandler;
    /**
     * Function that renders the modal. It is passed the current style object as interpolated by react-spring,
     * and is expected to return renderable content.
     */
    renderModal: ModalLayerRenderModalHandler;
    /**
     * Indicates whether to add an overlay mask on the whole page, blocking other interactions
     * while the Modal is open.
     */
    useLayerForClickAway?: boolean;
    /**
     * Indicates whether the modal is currently open.
     */
    open?: boolean;
}
declare const defaultProps: Required<Pick<ModalLayerPropsBase, 'childrenInAnimation' | 'open' | 'useLayerForClickAway'>>;
declare type ModalLayerProps = ModalLayerPropsBase & typeof defaultProps;
interface ModalLayerState {
    animating: boolean;
    prevOpen: boolean;
}
declare class ModalLayer extends Component<ModalLayerProps, ModalLayerState> {
    static propTypes: React.WeakValidationMap<ModalLayerProps>;
    static defaultProps: Required<Pick<ModalLayerPropsBase, "open" | "childrenInAnimation" | "useLayerForClickAway">>;
    static getDerivedStateFromProps: React.GetDerivedStateFromProps<ModalLayerProps, ModalLayerState>;
    private allowAnimationUpdates;
    constructor(props: Readonly<ModalLayerProps>);
    componentWillUnmount(): void;
    private handleClickAway;
    private handleAnimationEnd;
    private renderLayer;
    render(): JSX.Element;
}
export default ModalLayer;
export { ModalLayerRequestCloseHandler, ModalLayerRenderModalHandler };
