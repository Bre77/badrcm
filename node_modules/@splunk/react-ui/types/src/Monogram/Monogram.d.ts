import React from 'react';
import PropTypes from 'prop-types';
import { ComponentProps } from '../utils/types';
/** @public */
declare type MonogramClickHandler = (event: React.MouseEvent<HTMLButtonElement>, data: {
    name?: string;
}) => void;
interface MonogramPropsBase {
    /**
     * All CSS color definitions are supported, such as `#223344` or `red`.
     * If set to `auto` the background color is derived from the `initials` prop.
     * Using `theme` enables the theme default.
     */
    backgroundColor?: string;
    /** A React ref which is set to the DOM element when the component mounts and `null` when it unmounts. */
    elementRef?: React.Ref<HTMLButtonElement | HTMLDivElement>;
    /** The contents of this `Monogram`. Must not exceed three characters in length. */
    initials: string;
    /**
     * The name is returned with `onClick` events, which can be used to identify the
     * control when multiple controls share an `onClick` callback. Not to be confused with `initials`.
     */
    name?: string;
    /** Enables interactive mode. */
    onClick?: MonogramClickHandler;
    /**
     *  @deprecated The `xlarge` option has been marked for deprecation and will be removed in a future major version.
     *
     * Adjusts the size of the `Monogram`.
     */
    size?: 'small' | 'medium' | 'large' | 'xlarge' | number;
}
declare const defaultProps: Required<Pick<MonogramPropsBase, 'backgroundColor' | 'size'>>;
declare type MonogramInteractiveProps = ComponentProps<MonogramPropsBase, 'button'> & typeof defaultProps & {
    elementRef?: React.Ref<HTMLButtonElement>;
    onClick: MonogramClickHandler;
};
declare type MonogramNonInteractiveProps = ComponentProps<MonogramPropsBase, 'div'> & typeof defaultProps & {
    elementRef?: React.Ref<HTMLDivElement>;
    onClick?: never;
};
declare type MonogramProps = MonogramInteractiveProps | MonogramNonInteractiveProps;
/**
 * Returns a suitable set of initials for a name. Uses the first character of each
 * name segment and omits middle segments if the segment count is greater than three.
 * @param {string} name - The full name.
 * @returns {string} Limited to three characters. Empty if `name` is empty.
 * @public
 */
declare function getInitials(name: string): string;
declare function Monogram(props: MonogramProps): JSX.Element;
declare namespace Monogram {
    var propTypes: {
        backgroundColor: PropTypes.Requireable<string>;
        elementRef: PropTypes.Requireable<object>;
        initials: PropTypes.Validator<string>;
        name: PropTypes.Requireable<string>;
        onClick: PropTypes.Requireable<(...args: any[]) => any>;
        size: PropTypes.Requireable<React.ReactText>;
    };
    var defaultProps: Required<Pick<MonogramPropsBase, "size" | "backgroundColor">>;
}
export default Monogram;
export { getInitials, MonogramClickHandler };
