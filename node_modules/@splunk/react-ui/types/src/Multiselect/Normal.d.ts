import React, { Component } from 'react';
import { Divider, Heading } from '@splunk/react-ui/Menu';
import { MultiselectChangeHandler, MultiselectFilterChangeHandler, MultiselectScrollBottomHandler } from './Multiselect';
import Option from './Option';
import { ClassComponentProps } from '../utils/types';
interface NormalPropsBase {
    animateLoading?: boolean;
    /**
     * Allow the user to add arbitrary values.
     */
    allowNewValues?: boolean;
    /**
     * `children` should be `Multiselect.Option`, `Multiselect.Heading`, or
     * `Multiselect.Divider`.
     */
    children?: React.ReactNode;
    /** If true, this component will not handle filtering. The parent must update the
     * Options based on the onFilterChange value. */
    controlledFilter?: boolean;
    /**
     * The default placement of the dropdown menu. It might be rendered in a different direction
     * depending upon the space available.
     */
    defaultPlacement?: 'above' | 'below' | 'vertical';
    /**
     * Set this property instead of value to keep the value uncontrolled.
     */
    defaultValues?: (string | number | boolean)[];
    /**
     * The id of the description. When placed in a ControlGroup, this automatically set to the
     * ControlGroup's help component.
     */
    describedBy?: string;
    /** Disable adding and removing. */
    disabled?: boolean;
    /**
     * A React ref which is set to the DOM element when the component mounts and null when it unmounts.
     */
    elementRef?: React.Ref<HTMLDivElement>;
    /** Display as in an error. */
    error?: boolean;
    /**
     * The footer message can show additional information, such as a truncation message.
     */
    footerMessage?: React.ReactNode;
    /** Make the control an inline block with variable width. */
    inline?: boolean;
    /**
     * An id for the input, which may be necessary for accessibility, such as for aria
     * attributes.
     */
    inputId?: string;
    /**
     * A React ref which is set to the input element when the component mounts and null when it unmounts.
     */
    inputRef?: React.Ref<HTMLInputElement>;
    isLoadingOptions?: boolean;
    /**
     * The id of the label. When placed in a ControlGroup, this automatically set to the
     * ControlGroup's label.
     */
    labelledBy?: string;
    /**
     * The loading message to show when isLoadingOptions. */
    loadingMessage?: React.ReactNode;
    menuStyle?: React.CSSProperties;
    /** The name is returned with onChange events, which can be used to identify the
     * control when multiple controls share an onChange callback. */
    name?: string;
    /**
     * The noOptionsMessage is shown when there are no children and not loading, such as when
     * there are no Options matching the filter. This can be customized to the type of content,
     * such as "No matching dashboards"; insert other content, such as an error message; or
     * communicate a minimum number of characters to enter to see results. */
    noOptionsMessage?: React.ReactNode;
    /**
     * A callback to receive the change events.  If values is set, this callback is required.
     * This must set the values prop to retain the change.
     */
    onChange?: MultiselectChangeHandler;
    /**
     * A callback function invoked when the menu is scrolled.
     */
    onScroll?: React.UIEventHandler<Element>;
    /**
     * A callback function for loading additional list items.
     * Called when the list is scrolled to the bottom or all items in the list are visible.
     * This is called with an event argument if this is the result of a scroll.
     *
     * This should be set this to `null` when all items are loaded.
     */
    onScrollBottom?: MultiselectScrollBottomHandler;
    /**
     * A callback with the change event and value of the filter box. Providing this callback and
     * setting controlledFilter to true enables you to filter and update the children by other
     * criteria.
     */
    onFilterChange?: MultiselectFilterChangeHandler;
    /**
     * A callback function invoked when the popover closes.
     */
    onClose?: () => void;
    /**
     * A callback function invoked when the popover opens.
     */
    onOpen?: () => void;
    /**
     * If 'value' is undefined or don't match an item, the Button will display this text.
     */
    placeholder?: string;
    /**
     * See `repositionMode` on `Popover` for details.
     */
    repositionMode?: 'none' | 'flip';
    /** Pressing tab while entering an input confirms the new value. Requires `allowNewValues`. */
    tabConfirmsNewValue?: boolean;
    /**
     * Specifies whether or not to add a overlay div to clickaway from the popover. This is
     * to avoid cases where some other element is accidentally clicked when the popover is open
     */
    useClickawayOverlay?: boolean;
    /**
     * Value will be matched to one of the children to deduce the label and/or icon for the
     * toggle. An `onChange` callback is required.
     */
    values?: (string | number | boolean)[];
}
declare const defaultProps: Required<Pick<NormalPropsBase, 'allowNewValues' | 'animateLoading' | 'defaultPlacement' | 'disabled' | 'inline' | 'isLoadingOptions' | 'menuStyle' | 'noOptionsMessage' | 'placeholder' | 'tabConfirmsNewValue' | 'useClickawayOverlay'>>;
declare type NormalProps = ClassComponentProps<NormalPropsBase, typeof defaultProps, 'div'>;
interface NormalState {
    activeIndex: number;
    el: HTMLDivElement | null;
    filterKeyword: string;
    hasFocus: boolean;
    open: boolean;
    values: (string | number | boolean)[];
    loadingMoreMessage: string;
}
declare class Normal extends Component<NormalProps, NormalState> {
    private activeItemId;
    private activeValue?;
    private availableOptionCount;
    private children;
    private controlledExternally;
    private input;
    private popoverId;
    private previousActiveIndex;
    static propTypes: React.WeakValidationMap<ClassComponentProps<NormalPropsBase, Required<Pick<NormalPropsBase, "placeholder" | "disabled" | "inline" | "defaultPlacement" | "animateLoading" | "noOptionsMessage" | "allowNewValues" | "isLoadingOptions" | "menuStyle" | "tabConfirmsNewValue" | "useClickawayOverlay">>, "div", never>>;
    static defaultProps: Required<Pick<NormalPropsBase, "placeholder" | "disabled" | "inline" | "defaultPlacement" | "animateLoading" | "noOptionsMessage" | "allowNewValues" | "isLoadingOptions" | "menuStyle" | "tabConfirmsNewValue" | "useClickawayOverlay">>;
    static Option: typeof Option;
    static Divider: typeof Divider;
    static Heading: typeof Heading;
    constructor(props: Readonly<NormalProps>);
    componentDidUpdate(prevProps: Readonly<NormalProps>, prevState: Readonly<NormalState>): void;
    private getCurrentValues;
    private handleClick;
    private handleRequestRemove;
    private handleInputFocus;
    private handleInputKeyDown;
    private handleInputChange;
    private handleMenuOptionClick;
    private handleInputBlur;
    private handleRequestClose;
    private handleScrollBottom;
    private handleMount;
    private handleInputMount;
    private handleActiveOptionMount;
    private isControlled;
    /**
     * Place focus on the text input.
     */
    focus(): void;
    private addValue;
    private removeValue;
    private renderButtons;
    private renderMenu;
    render(): (JSX.Element | null)[];
}
export default Normal;
