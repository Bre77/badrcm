import React from 'react';
import PropTypes from 'prop-types';
import { ComponentProps } from '../utils/types';
/** @public */
declare type PaginatorChangeHandler = (event: React.MouseEvent<HTMLButtonElement>, data: {
    page: number;
}) => void;
interface PaginatorPropsBase {
    /** Displays a link to the last page in a collection. */
    alwaysShowLastPageLink?: boolean;
    /** Currently selected page. */
    current?: number;
    /**
     * A React ref which is set to the DOM element when the component mounts and null when it unmounts.
     */
    elementRef?: React.Ref<HTMLDivElement>;
    /**
     * Number of pages to display. If greater than `totalPages`, `totalPages` is used instead.
     */
    numPageLinks?: number;
    /** Callback to handle page change. */
    onChange?: PaginatorChangeHandler;
    /** Total number of pages in collection. This can change as collection populates. */
    totalPages: number;
}
declare type PaginatorProps = ComponentProps<PaginatorPropsBase, 'div'>;
declare function Paginator({ onChange, current, alwaysShowLastPageLink, numPageLinks, totalPages, ...otherProps }: PaginatorProps): JSX.Element | null;
declare namespace Paginator {
    var propTypes: {
        alwaysShowLastPageLink: PropTypes.Requireable<boolean>;
        current: PropTypes.Requireable<number>;
        elementRef: PropTypes.Requireable<object>;
        numPageLinks: PropTypes.Requireable<number>;
        onChange: PropTypes.Requireable<(...args: any[]) => any>;
        totalPages: PropTypes.Requireable<number>;
    };
}
export default Paginator;
export type { PaginatorChangeHandler };
