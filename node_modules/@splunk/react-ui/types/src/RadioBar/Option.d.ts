import React from 'react';
import PropTypes from 'prop-types';
import { ComponentProps } from '../utils/types';
declare type OptionClickHandler = (event: React.MouseEvent<HTMLAnchorElement | HTMLButtonElement> | React.KeyboardEvent<HTMLElement>, data: {
    label?: string;
    value: any;
}) => void;
declare type OnKeyDownHandler = (event: React.KeyboardEvent<HTMLElement>, data: {
    label?: string;
    value: any;
}) => void;
declare type OnChangeHandler = (event: React.KeyboardEvent<HTMLElement> | React.MouseEvent<HTMLAnchorElement | HTMLButtonElement>, data: {
    label?: string;
    value: any;
}) => void;
interface OptionPropsBase {
    /** @private Set by `RadioBar`. */
    append?: boolean;
    /** Add a disabled attribute and prevent clicking. */
    disabled?: boolean;
    /** Adornment after the label. */
    endAdornment?: React.ReactNode;
    /**
     * @deprecated Icon is deprecated and will be removed in a future major version. Use `startAdornment` or `endAdornment` instead.
     *
     * Applies an icon to the button. See @splunk/react-icons documentation for
     * more information.
     */
    icon?: React.ReactNode;
    /** The text shown on the button. */
    label?: string;
    /** @private Set by `RadioBar`. */
    prepend?: boolean;
    /** Adornment in front of the label. */
    startAdornment?: React.ReactNode;
    /** @private Set by `RadioBar`. */
    selected?: boolean;
    /** The value of the `Option`. */
    value: any;
}
declare type OptionProps = ComponentProps<OptionPropsBase, 'button'>;
declare function Option({ disabled, icon, label, selected, startAdornment, endAdornment, value, ...otherProps }: OptionProps): JSX.Element;
declare namespace Option {
    var propTypes: {
        disabled: PropTypes.Requireable<boolean>;
        startAdornment: PropTypes.Requireable<PropTypes.ReactNodeLike>;
        endAdornment: PropTypes.Requireable<PropTypes.ReactNodeLike>;
        icon: PropTypes.Requireable<PropTypes.ReactNodeLike>;
        label: PropTypes.Requireable<string>;
        /** @private Set by `RadioBar`. */
        selected: PropTypes.Requireable<boolean>;
        /** The value of the `Option`. */
        value: PropTypes.Validator<any>;
    };
}
export default Option;
export { OptionClickHandler, OnKeyDownHandler, OnChangeHandler };
