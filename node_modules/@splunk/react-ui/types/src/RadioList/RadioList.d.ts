import React from 'react';
import PropTypes from 'prop-types';
import { ComponentProps } from '../utils/types';
import Option from './Option';
declare type RadioListValueTypes = number | string | boolean | Record<string, unknown> | symbol;
/** @public */
declare type RadioListChangeHandler = (event: React.ChangeEvent<HTMLInputElement>, data: {
    name?: string;
    value: RadioListValueTypes;
}) => void;
interface RadioListPropsBase {
    /**
     * `children` should be `RadioList.Option`s.
     */
    children?: React.ReactNode;
    disabled?: boolean;
    /** The name is returned with onChange events, which can be used to identify the
     * control when multiple controls share an onChange callback.
     * A randomly generated name is used if one is not provided. */
    name?: string;
    /** Changes the layout of the RadioList. */
    direction?: 'column' | 'row';
    /**
     * Highlight the field as having an error. The buttons and labels will turn red.
     */
    error?: boolean;
    /** The current selected value.  Setting this value makes the property controlled. A
     * callback is required.
     */
    value?: RadioListValueTypes;
    /**
     * Set this property instead of value to make value uncontrolled.
     */
    defaultValue?: RadioListValueTypes;
    /**
     * A React ref which is set to the DOM element when the component mounts and null when it unmounts.
     */
    elementRef?: React.Ref<HTMLDivElement>;
    /**
     * A callback to receive the change events.
     * If value is set, this callback is required. This must set the value prop to retain the
     * change.
     */
    onChange?: RadioListChangeHandler;
    /**
     * When placed in a ControlGroup, this is automatically set to the ControlGroup's label.
     * @private
     */
    labelledBy?: string;
    /**
     * When placed in a ControlGroup, this is automatically set to the ControlGroup's help component.
     * @private
     */
    describedBy?: string;
}
interface RadioListPropsBaseControlled extends RadioListPropsBase {
    value: RadioListValueTypes;
    onChange: RadioListChangeHandler;
    defaultValue?: never;
}
interface RadioListPropsBaseUncontrolled extends RadioListPropsBase {
    onChange?: RadioListChangeHandler;
    defaultValue?: RadioListValueTypes;
    value?: never;
}
declare type RadioListProps = ComponentProps<RadioListPropsBaseControlled | RadioListPropsBaseUncontrolled, 'div'>;
declare function RadioList({ children, defaultValue: defaultValueProp, describedBy, direction, disabled, error, labelledBy, name: nameProp, onChange, value: valueProp, ...otherProps }: RadioListProps): JSX.Element;
declare namespace RadioList {
    var propTypes: {
        direction: PropTypes.Requireable<string>;
        children: PropTypes.Requireable<PropTypes.ReactNodeLike>;
        defaultValue: PropTypes.Requireable<any>;
        disabled: PropTypes.Requireable<boolean>;
        elementRef: PropTypes.Requireable<object>;
        error: PropTypes.Requireable<boolean>;
        name: PropTypes.Requireable<string>;
        onChange: PropTypes.Requireable<(...args: any[]) => any>;
        value: PropTypes.Requireable<any>;
        labelledBy: PropTypes.Requireable<string>;
        describedBy: PropTypes.Requireable<string>;
    };
    var Option: typeof import("./Option").default;
}
export default RadioList;
export { Option, RadioListValueTypes, RadioListChangeHandler };
export type { RadioListPropsBase, RadioListPropsBaseControlled, RadioListPropsBaseUncontrolled };
