import React, { Component } from 'react';
import { ClassComponentProps } from '../utils/types';
/** @public */
declare type ResizeDirection = 'nw' | 'n' | 'ne' | 'w' | 'e' | 'sw' | 's' | 'se';
/** @public */
declare type ResizeRequestResizeHandler = (event: MouseEvent | React.KeyboardEvent<HTMLButtonElement>, data: {
    height: number;
    width: number;
}) => void;
interface ResizePropsBase {
    /** The appearance of the resize handles. */
    appearance?: 'border' | 'overlay';
    /** The appearance of the resize handles. */
    showHandles?: 'always' | 'on-hover';
    children?: React.ReactNode;
    /**
     * A React ref which is set to the DOM element when the component mounts and null when it unmounts.
     */
    elementRef?: React.Ref<HTMLDivElement>;
    /** When focused on a resize handle, the arrow keys will adjust the height or width by
     * this amount with each press. */
    keyIncrement?: number;
    /** A callback which is passed the event and an object with the requested height and width. */
    onRequestResize: ResizeRequestResizeHandler;
    /** An array of resize handles placements. */
    resizeHandles: ResizeDirection[];
}
declare const defaultProps: Required<Pick<ResizePropsBase, 'appearance' | 'keyIncrement' | 'showHandles'>>;
declare type ResizeProps = ClassComponentProps<ResizePropsBase, typeof defaultProps, 'div'>;
interface ResizeState {
    dragDirection?: ResizeDirection;
    el: HTMLDivElement | null;
    startHeight?: number;
    startWidth?: number;
    startX?: number;
    startY?: number;
}
/**
 * Resize is a utility container with drag handles for resizing.
 */
declare class Resize extends Component<ResizeProps, ResizeState> {
    static propTypes: React.WeakValidationMap<ClassComponentProps<ResizePropsBase, Required<Pick<ResizePropsBase, "appearance" | "keyIncrement" | "showHandles">>, "div", never>>;
    static defaultProps: Required<Pick<ResizePropsBase, "appearance" | "keyIncrement" | "showHandles">>;
    static handleOrder: ResizeDirection[];
    static handleLabels: {
        nw: string;
        n: string;
        ne: string;
        w: string;
        e: string;
        sw: string;
        s: string;
        se: string;
    };
    constructor(props: Readonly<ResizeProps>);
    private handleMount;
    private handleDragStart;
    private handleDragEnd;
    private handleDrag;
    private handleKeyDown;
    private renderHandle;
    render(): JSX.Element;
}
export default Resize;
export { ResizeDirection, ResizeRequestResizeHandler };
