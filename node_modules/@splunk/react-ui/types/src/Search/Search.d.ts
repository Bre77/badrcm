import React from 'react';
import { Divider, Heading } from '@splunk/react-ui/Menu';
import Option from './Option';
import { ComponentProps } from '../utils/types';
/** @public */
declare type SearchChangeHandler = (event: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement> | React.MouseEvent<HTMLButtonElement | HTMLSpanElement> | React.KeyboardEvent<HTMLInputElement>, data: {
    name?: string;
    value: string;
}) => void;
interface SearchPropsBase {
    animateLoading?: boolean;
    /** All children must be instances of `Search.Option`. */
    children?: React.ReactNode;
    /**
     * The default placement of the dropdown menu. It might be rendered in a different direction
     * depending upon the space available.
     */
    defaultPlacement?: 'above' | 'below' | 'vertical';
    /** The initial value of the input. Only applicable in uncontrolled mode. */
    defaultValue?: string;
    /**
     * The id of the description.
     */
    describedBy?: string;
    disabled?: boolean;
    /**
     * A React ref which is set to the DOM element when the component mounts and null when it unmounts.
     */
    elementRef?: React.Ref<HTMLDivElement>;
    /**
     * Highlight the field as having an error. The border and text will turn red.
     */
    error?: boolean;
    /**
     * The footer message can show additional information, such as a truncation message.
     */
    footerMessage?: React.ReactNode;
    /** Make the control an inline block with variable width. */
    inline?: boolean;
    /**
     * A React ref which is set to the input element when the component mounts and null when it unmounts.
     */
    inputRef?: React.Ref<HTMLInputElement>;
    isLoadingOptions?: boolean;
    /**
     * The id of the label.
     */
    labelledBy?: string;
    /**
     * The loading message to show when isLoadingOptions. */
    loadingMessage?: React.ReactNode;
    menuStyle?: React.CSSProperties;
    /** The name is returned with onChange events, which can be used to identify the
     * control when multiple controls share an onChange callback. */
    name?: string;
    /**
     * The noOptionsMessage is shown when there are no children and it's not loading, such as when
     * there are no Options matching the filter. This can be customized to the type of content,
     * for example: "No matching dashboards". You can insert content such as an error message or
     * communicate a minimum number of characters to enter to see results. */
    noOptionsMessage?: React.ReactNode;
    onBlur?: React.FocusEventHandler<HTMLInputElement>;
    onChange?: SearchChangeHandler;
    onFocus?: React.FocusEventHandler<HTMLInputElement>;
    onKeyDown?: React.KeyboardEventHandler<HTMLInputElement>;
    /**
     * A callback function invoked when the menu is scrolled.
     */
    onScroll?: React.UIEventHandler<Element>;
    onSelect?: React.ReactEventHandler<HTMLInputElement>;
    /**
     * A callback function invoked when the popover closes.
     */
    onClose?: () => void;
    /**
     * A callback function invoked when the popover opens.
     */
    onOpen?: () => void;
    placeholder?: string;
    /** The value of the input. Only applicable in controlled mode. */
    value?: string;
}
interface SearchPropsBaseControlled extends SearchPropsBase {
    defaultValue?: never;
    onChange: SearchChangeHandler;
    value?: string;
}
interface SearchPropsBaseUncontrolled extends SearchPropsBase {
    defaultValue?: string;
    value?: never;
}
declare type SearchProps = ComponentProps<SearchPropsBaseControlled | SearchPropsBaseUncontrolled, 'div'>;
declare function Search({ animateLoading, children, defaultPlacement, defaultValue, describedBy, disabled, elementRef, error, footerMessage, inline, inputRef, isLoadingOptions, labelledBy, loadingMessage, menuStyle, name, noOptionsMessage, onChange, onClose, onFocus, onKeyDown, onOpen, placeholder, value: propValue, ...otherProps }: SearchProps): JSX.Element;
declare namespace Search {
    var propTypes: React.WeakValidationMap<SearchPropsBase>;
    var Option: typeof import("./Option").default;
    var Divider: typeof import("../Menu/Divider").default;
    var Heading: typeof import("../Menu/Heading").default;
}
export default Search;
export { SearchChangeHandler, Option, Divider, Heading, SearchProps, SearchPropsBase, SearchPropsBaseControlled, SearchPropsBaseUncontrolled, };
