import React, { PureComponent } from 'react';
import { ClassComponentProps } from '../utils/types';
import type { OptionClickHandler } from './OptionBase';
interface OptionPropsBase {
    /** @private */
    active?: boolean;
    /**
     * When provided, `children` is rendered instead of the `label`.
     *
     * Caution: The element(s) passed here must be pure.
     */
    children?: React.ReactNode;
    /**
     * Additional information to explain the option, such as "Recommended".
     */
    description?: string;
    /**
     * The description text may appear to the right of the label or under the label.
     * @themeNotes Themes that don't support 'right' fall back to 'bottom'.
     */
    descriptionPosition?: 'right' | 'bottom';
    /**
     * If disabled=true, the option is grayed out and cannot be clicked.
     */
    disabled?: boolean;
    /**
     * Adding hidden options can be useful for resolving the selected display label and icon,
     * when the option should not be in the list. This scenario can arise when Select's filter is
     * controlled, because the selected item may be filtered out; and when a legacy option is
     * valid, but should no longer be displayed as a selectable option.
     */
    hidden?: boolean;
    /**
     * The icon to show before the label. See the @splunk/react-icons package for
     * drop in icons.
     *
     * Caution: The element(s) passed here must be pure. All icons in the react-icons package are pure.
     */
    icon?: React.ReactNode;
    /**
     * The text to show for the option when `children` is not defined. When filtering, the
     * `label` is used for matching to the filter text.
     */
    label: string;
    /**
     * Sections of the label string to highlight as a match. This is automatically set for
     * uncontrolled filters, so it's not normally necessary to set this property when using
     * filtering.
     */
    matchRanges?: {
        start: number;
        end: number;
    }[];
    /** @private */
    onClick?: OptionClickHandler;
    /** @private */
    selected?: boolean;
    /**
     * When `true`, wrapping is disabled and any additional text is ellipsised.
     */
    truncate?: boolean;
    /**
     * The label and/or icon will be placed on the Control's toggle if it matches this value.
     */
    value: string | number | boolean;
}
declare const defaultProps: Required<Pick<OptionPropsBase, 'active' | 'descriptionPosition' | 'disabled' | 'hidden' | 'selected' | 'truncate'>>;
declare type OptionProps = ClassComponentProps<OptionPropsBase, typeof defaultProps, 'button'>;
/**
 * An option within a `Select`. This inherits from
 * [PureComponent](https://reactjs.org/docs/react-api.html#reactpurecomponent)
 * so any elements passed to it must also be pure.
 */
declare class Option extends PureComponent<OptionProps, {}> {
    private c;
    static propTypes: React.WeakValidationMap<ClassComponentProps<OptionPropsBase, Required<Pick<OptionPropsBase, "hidden" | "disabled" | "selected" | "active" | "descriptionPosition" | "truncate">>, "button", never>>;
    static defaultProps: Required<Pick<OptionPropsBase, "hidden" | "disabled" | "selected" | "active" | "descriptionPosition" | "truncate">>;
    private handleMount;
    scrollIntoViewIfNeeded(): void;
    /**
     * Place focus on the button.
     */
    focus(): void;
    render(): JSX.Element;
}
export default Option;
export type { OptionClickHandler };
