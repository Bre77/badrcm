import React, { Component } from 'react';
import { Divider, Heading } from '@splunk/react-ui/Menu';
import Option from './OptionBase';
import { ClassComponentProps } from '../utils/types';
declare type SelectBaseFilterChangeHandler = (event: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement> | React.FocusEvent<HTMLInputElement> | React.MouseEvent<HTMLSpanElement>, data: {
    keyword: string;
}) => void;
declare type SelectBaseChangeHandler = (event: React.MouseEvent<HTMLButtonElement> | React.KeyboardEvent<HTMLInputElement>, data: {
    name?: string;
    values: (string | number | boolean)[];
}) => void;
declare type SelectBaseScrollBottomHandler = (event: React.UIEvent<HTMLDivElement> | React.KeyboardEvent<HTMLInputElement> | null) => void;
interface SelectBasePropsBase {
    /**
     * Whether or not to allow entered keyboard printable characters to match options.
     * Keymatching is disabled when using filtering, multiselect, or loading.
     */
    allowKeyMatching?: boolean;
    animateLoading?: boolean;
    /**
     * Change the style of the button or link.
     * @themeNotes 'pill': supported by `enterprise`, `enterpriseDark` and `lite`. 'toggle' and 'flat': supported by `scp`.
     */
    appearance?: 'default' | 'link' | 'primary' | 'pill' | 'toggle' | 'flat';
    /**
     * Remove rounding from the left side of the toggle.
     */
    append?: boolean;
    /**
     * Allow the user to add arbitrary values.
     */
    allowNewValues?: boolean;
    /**
     * `children` should be `Multiselect.Option`, `Multiselect.Heading`, or
     * `Multiselect.Divider`.
     */
    children?: React.ReactNode;
    /**
     * The default placement of the dropdown menu. It might be rendered in a different direction
     * depending upon the space available.
     */
    defaultPlacement?: 'above' | 'below' | 'vertical';
    /**
     * Set this property instead of values to keep the values uncontrolled.
     */
    defaultValues?: (string | number | boolean)[];
    /**
     * The id of the description. When placed in a ControlGroup, this automatically set to the
     * ControlGroup's help component.
     */
    describedBy?: string;
    /** Disable adding and removing. */
    disabled?: boolean;
    /**
     * A React ref which is set to the DOM element when the component mounts and null when it unmounts.
     */
    elementRef?: React.Ref<HTMLButtonElement>;
    /** Display as in an error. */
    error?: boolean;
    /**
     * Determines whether to show the filter box. When true, the children are automatically
     * filtered based on the label. When controlled, the parent component must provide a
     * onFilterChange callback and update the children. This can also be used to fetch new
     * results. */
    filter?: boolean | 'controlled';
    /**
     * The footer message can show additional information, such as a truncation message.
     */
    footerMessage?: React.ReactNode;
    /** Make the control an inline block with variable width. */
    inline?: boolean;
    /**
     * An id for the input, which may be necessary for accessibility, such as for aria
     * attributes.
     */
    inputId?: string;
    /**
     * A React ref which is set to the input element when the component mounts and null when it unmounts.
     */
    inputRef?: React.Ref<HTMLInputElement>;
    isLoadingOptions?: boolean;
    /**
     * The id of the label. When placed in a ControlGroup, this automatically set to the
     * ControlGroup's label. This property is not used when `labelText` is provided.
     */
    labelledBy?: string;
    /**
     * Text presented in the label for this field.
     * This is used to supply this text along with the current value to a screen reader.
     */
    labelText?: string;
    /**
     * The loading message to show when isLoadingOptions. */
    loadingMessage?: React.ReactNode;
    /**
     * Style properties to apply to the Menu. */
    menuStyle?: React.CSSProperties;
    /**
     * Allow multiple values to be selected.
     */
    multiple: boolean;
    /** The name is returned with onChange events, which can be used to identify the
     * control when multiple controls share an onChange callback. */
    name?: string;
    /**
     * The noOptionsMessage is shown when there are no children and not loading, such as when
     * there are no Options matching the filter. This can be customized to the type of content,
     * such as "No matching dashboards"; insert other content, such as an error message; or
     * communicate a minimum number of characters to enter to see results. */
    noOptionsMessage?: React.ReactNode;
    /**
     * A callback to receive the change events.  If values is set, this callback is required.
     * This must set the values prop to retain the change.
     */
    onChange?: SelectBaseChangeHandler;
    /**
     * A callback function invoked when the menu is scrolled.
     */
    onScroll?: React.UIEventHandler<Element>;
    /**
     * A callback function for loading additional list items.
     * Called when the list is scrolled to the bottom or all items in the list are visible.
     * This is called with an event argument if this is the result of a scroll.
     *
     * This should be set this to `null` when all items are loaded.
     */
    onScrollBottom?: SelectBaseScrollBottomHandler;
    /**
     * A callback with the change event and value of the filter box. Providing this callback and
     * setting the `filter` prop to `"controlled"` enables you to filter and update the children by other
     * criteria.
     */
    onFilterChange?: SelectBaseFilterChangeHandler;
    /**
     * A callback function invoked when the popover closes.
     */
    onClose?: () => void;
    /**
     * A callback function invoked when the popover opens.
     */
    onOpen?: () => void;
    /**
     * If 'values' is undefined or don't match an item, the Button will display this text.
     */
    placeholder?: string;
    /**
     * When used outside of a control group, it can be useful to include the label on the toggle.
     */
    prefixLabel?: string;
    /**
     * Remove rounding from the left side of the toggle.
     */
    prepend?: boolean;
    /**
     * See `repositionMode` on `Popover` for details.
     */
    repositionMode?: 'none' | 'flip';
    showSelectedValuesFirst?: 'nextOpen' | 'immediately' | 'never';
    /**
     * Places this string after the selected label.
     */
    suffixLabel?: string;
    /** Pressing tab while entering an input confirms the new value. Requires `allowNewValues`. */
    tabConfirmsNewValue?: boolean;
    /**
     * Values will be matched to one of the children to deduce the label and/or icon for the
     * toggle.
     */
    values?: (string | number | boolean)[];
}
declare const defaultProps: Required<Pick<SelectBasePropsBase, 'allowKeyMatching' | 'allowNewValues' | 'animateLoading' | 'appearance' | 'append' | 'defaultPlacement' | 'disabled' | 'filter' | 'inline' | 'isLoadingOptions' | 'menuStyle' | 'multiple' | 'noOptionsMessage' | 'placeholder' | 'prepend' | 'repositionMode' | 'tabConfirmsNewValue'>>;
interface SelectBasePropsBaseControlled extends SelectBasePropsBase {
    defaultValues?: never;
    onChange: SelectBaseChangeHandler;
    values?: (string | number | boolean)[];
}
interface SelectBasePropsBaseUncontrolled extends SelectBasePropsBase {
    defaultValues?: (string | number | boolean)[];
    values?: never;
}
declare type SelectBaseProps = ClassComponentProps<SelectBasePropsBaseControlled | SelectBasePropsBaseUncontrolled, typeof defaultProps, 'button'>;
declare type OptionElement = React.ReactElement<React.ComponentPropsWithRef<typeof Option>, typeof Option>;
declare type ChildrenElement = React.ReactElement<React.ComponentProps<typeof Divider | typeof Heading>, typeof Divider | typeof Heading> | OptionElement;
declare function isOption(child: ChildrenElement): child is OptionElement;
interface SelectBaseState {
    activeIndex: number;
    filterKeyword: string;
    open: boolean;
    textHasFocus: boolean;
    topValues: (string | number | boolean)[];
    values: (string | number | boolean)[];
}
declare class SelectBase extends Component<SelectBaseProps, SelectBaseState> {
    private activeItemId;
    private activeValue?;
    private availableOptionCount;
    private controlledExternally;
    private displayedValues;
    private dropdown;
    private firstSelectedEnabledOption;
    private firstSelectedOptionIndex?;
    private menuId;
    private previousActiveIndex;
    private selectedOptionCount;
    private optionRefsByKey;
    private matchCharacter;
    private matchTimeout;
    private currentMatchOptions;
    private availableMatchOptions;
    static propTypes: React.WeakValidationMap<SelectBasePropsBaseControlled & Required<Pick<SelectBasePropsBase, "filter" | "placeholder" | "disabled" | "multiple" | "appearance" | "inline" | "defaultPlacement" | "repositionMode" | "append" | "prepend" | "animateLoading" | "noOptionsMessage" | "allowKeyMatching" | "allowNewValues" | "isLoadingOptions" | "menuStyle" | "tabConfirmsNewValue">> & Pick<React.DetailedHTMLProps<React.ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>, "form" | "slot" | "style" | "title" | "value" | "onPause" | "className" | "color" | "id" | "lang" | "type" | "role" | "tabIndex" | "aria-activedescendant" | "aria-atomic" | "aria-autocomplete" | "aria-busy" | "aria-checked" | "aria-colcount" | "aria-colindex" | "aria-colspan" | "aria-controls" | "aria-current" | "aria-describedby" | "aria-details" | "aria-disabled" | "aria-dropeffect" | "aria-errormessage" | "aria-expanded" | "aria-flowto" | "aria-grabbed" | "aria-haspopup" | "aria-hidden" | "aria-invalid" | "aria-keyshortcuts" | "aria-label" | "aria-labelledby" | "aria-level" | "aria-live" | "aria-modal" | "aria-multiline" | "aria-multiselectable" | "aria-orientation" | "aria-owns" | "aria-placeholder" | "aria-posinset" | "aria-pressed" | "aria-readonly" | "aria-relevant" | "aria-required" | "aria-roledescription" | "aria-rowcount" | "aria-rowindex" | "aria-rowspan" | "aria-selected" | "aria-setsize" | "aria-sort" | "aria-valuemax" | "aria-valuemin" | "aria-valuenow" | "aria-valuetext" | "dangerouslySetInnerHTML" | "onCopy" | "onCopyCapture" | "onCut" | "onCutCapture" | "onPaste" | "onPasteCapture" | "onCompositionEnd" | "onCompositionEndCapture" | "onCompositionStart" | "onCompositionStartCapture" | "onCompositionUpdate" | "onCompositionUpdateCapture" | "onFocus" | "onFocusCapture" | "onBlur" | "onBlurCapture" | "onChangeCapture" | "onBeforeInput" | "onBeforeInputCapture" | "onInput" | "onInputCapture" | "onReset" | "onResetCapture" | "onSubmit" | "onSubmitCapture" | "onInvalid" | "onInvalidCapture" | "onLoad" | "onLoadCapture" | "onError" | "onErrorCapture" | "onKeyDown" | "onKeyDownCapture" | "onKeyPress" | "onKeyPressCapture" | "onKeyUp" | "onKeyUpCapture" | "onAbort" | "onAbortCapture" | "onCanPlay" | "onCanPlayCapture" | "onCanPlayThrough" | "onCanPlayThroughCapture" | "onDurationChange" | "onDurationChangeCapture" | "onEmptied" | "onEmptiedCapture" | "onEncrypted" | "onEncryptedCapture" | "onEnded" | "onEndedCapture" | "onLoadedData" | "onLoadedDataCapture" | "onLoadedMetadata" | "onLoadedMetadataCapture" | "onLoadStart" | "onLoadStartCapture" | "onPauseCapture" | "onPlay" | "onPlayCapture" | "onPlaying" | "onPlayingCapture" | "onProgress" | "onProgressCapture" | "onRateChange" | "onRateChangeCapture" | "onSeeked" | "onSeekedCapture" | "onSeeking" | "onSeekingCapture" | "onStalled" | "onStalledCapture" | "onSuspend" | "onSuspendCapture" | "onTimeUpdate" | "onTimeUpdateCapture" | "onVolumeChange" | "onVolumeChangeCapture" | "onWaiting" | "onWaitingCapture" | "onAuxClick" | "onAuxClickCapture" | "onClick" | "onClickCapture" | "onContextMenu" | "onContextMenuCapture" | "onDoubleClick" | "onDoubleClickCapture" | "onDrag" | "onDragCapture" | "onDragEnd" | "onDragEndCapture" | "onDragEnter" | "onDragEnterCapture" | "onDragExit" | "onDragExitCapture" | "onDragLeave" | "onDragLeaveCapture" | "onDragOver" | "onDragOverCapture" | "onDragStart" | "onDragStartCapture" | "onDrop" | "onDropCapture" | "onMouseDown" | "onMouseDownCapture" | "onMouseEnter" | "onMouseLeave" | "onMouseMove" | "onMouseMoveCapture" | "onMouseOut" | "onMouseOutCapture" | "onMouseOver" | "onMouseOverCapture" | "onMouseUp" | "onMouseUpCapture" | "onSelect" | "onSelectCapture" | "onTouchCancel" | "onTouchCancelCapture" | "onTouchEnd" | "onTouchEndCapture" | "onTouchMove" | "onTouchMoveCapture" | "onTouchStart" | "onTouchStartCapture" | "onPointerDown" | "onPointerDownCapture" | "onPointerMove" | "onPointerMoveCapture" | "onPointerUp" | "onPointerUpCapture" | "onPointerCancel" | "onPointerCancelCapture" | "onPointerEnter" | "onPointerEnterCapture" | "onPointerLeave" | "onPointerLeaveCapture" | "onPointerOver" | "onPointerOverCapture" | "onPointerOut" | "onPointerOutCapture" | "onGotPointerCapture" | "onGotPointerCaptureCapture" | "onLostPointerCapture" | "onLostPointerCaptureCapture" | "onScrollCapture" | "onWheel" | "onWheelCapture" | "onAnimationStart" | "onAnimationStartCapture" | "onAnimationEnd" | "onAnimationEndCapture" | "onAnimationIteration" | "onAnimationIterationCapture" | "onTransitionEnd" | "onTransitionEndCapture" | "key" | "defaultChecked" | "defaultValue" | "suppressContentEditableWarning" | "suppressHydrationWarning" | "accessKey" | "contentEditable" | "contextMenu" | "dir" | "draggable" | "hidden" | "spellCheck" | "translate" | "radioGroup" | "about" | "datatype" | "inlist" | "prefix" | "property" | "resource" | "typeof" | "vocab" | "autoCapitalize" | "autoCorrect" | "autoSave" | "itemProp" | "itemScope" | "itemType" | "itemID" | "itemRef" | "results" | "security" | "unselectable" | "inputMode" | "is" | "autoFocus" | "formAction" | "formEncType" | "formMethod" | "formNoValidate" | "formTarget">> | React.WeakValidationMap<SelectBasePropsBaseUncontrolled & Required<Pick<SelectBasePropsBase, "filter" | "placeholder" | "disabled" | "multiple" | "appearance" | "inline" | "defaultPlacement" | "repositionMode" | "append" | "prepend" | "animateLoading" | "noOptionsMessage" | "allowKeyMatching" | "allowNewValues" | "isLoadingOptions" | "menuStyle" | "tabConfirmsNewValue">> & Pick<React.DetailedHTMLProps<React.ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>, "form" | "slot" | "style" | "title" | "value" | "onPause" | "className" | "color" | "id" | "lang" | "type" | "role" | "tabIndex" | "aria-activedescendant" | "aria-atomic" | "aria-autocomplete" | "aria-busy" | "aria-checked" | "aria-colcount" | "aria-colindex" | "aria-colspan" | "aria-controls" | "aria-current" | "aria-describedby" | "aria-details" | "aria-disabled" | "aria-dropeffect" | "aria-errormessage" | "aria-expanded" | "aria-flowto" | "aria-grabbed" | "aria-haspopup" | "aria-hidden" | "aria-invalid" | "aria-keyshortcuts" | "aria-label" | "aria-labelledby" | "aria-level" | "aria-live" | "aria-modal" | "aria-multiline" | "aria-multiselectable" | "aria-orientation" | "aria-owns" | "aria-placeholder" | "aria-posinset" | "aria-pressed" | "aria-readonly" | "aria-relevant" | "aria-required" | "aria-roledescription" | "aria-rowcount" | "aria-rowindex" | "aria-rowspan" | "aria-selected" | "aria-setsize" | "aria-sort" | "aria-valuemax" | "aria-valuemin" | "aria-valuenow" | "aria-valuetext" | "dangerouslySetInnerHTML" | "onCopy" | "onCopyCapture" | "onCut" | "onCutCapture" | "onPaste" | "onPasteCapture" | "onCompositionEnd" | "onCompositionEndCapture" | "onCompositionStart" | "onCompositionStartCapture" | "onCompositionUpdate" | "onCompositionUpdateCapture" | "onFocus" | "onFocusCapture" | "onBlur" | "onBlurCapture" | "onChangeCapture" | "onBeforeInput" | "onBeforeInputCapture" | "onInput" | "onInputCapture" | "onReset" | "onResetCapture" | "onSubmit" | "onSubmitCapture" | "onInvalid" | "onInvalidCapture" | "onLoad" | "onLoadCapture" | "onError" | "onErrorCapture" | "onKeyDown" | "onKeyDownCapture" | "onKeyPress" | "onKeyPressCapture" | "onKeyUp" | "onKeyUpCapture" | "onAbort" | "onAbortCapture" | "onCanPlay" | "onCanPlayCapture" | "onCanPlayThrough" | "onCanPlayThroughCapture" | "onDurationChange" | "onDurationChangeCapture" | "onEmptied" | "onEmptiedCapture" | "onEncrypted" | "onEncryptedCapture" | "onEnded" | "onEndedCapture" | "onLoadedData" | "onLoadedDataCapture" | "onLoadedMetadata" | "onLoadedMetadataCapture" | "onLoadStart" | "onLoadStartCapture" | "onPauseCapture" | "onPlay" | "onPlayCapture" | "onPlaying" | "onPlayingCapture" | "onProgress" | "onProgressCapture" | "onRateChange" | "onRateChangeCapture" | "onSeeked" | "onSeekedCapture" | "onSeeking" | "onSeekingCapture" | "onStalled" | "onStalledCapture" | "onSuspend" | "onSuspendCapture" | "onTimeUpdate" | "onTimeUpdateCapture" | "onVolumeChange" | "onVolumeChangeCapture" | "onWaiting" | "onWaitingCapture" | "onAuxClick" | "onAuxClickCapture" | "onClick" | "onClickCapture" | "onContextMenu" | "onContextMenuCapture" | "onDoubleClick" | "onDoubleClickCapture" | "onDrag" | "onDragCapture" | "onDragEnd" | "onDragEndCapture" | "onDragEnter" | "onDragEnterCapture" | "onDragExit" | "onDragExitCapture" | "onDragLeave" | "onDragLeaveCapture" | "onDragOver" | "onDragOverCapture" | "onDragStart" | "onDragStartCapture" | "onDrop" | "onDropCapture" | "onMouseDown" | "onMouseDownCapture" | "onMouseEnter" | "onMouseLeave" | "onMouseMove" | "onMouseMoveCapture" | "onMouseOut" | "onMouseOutCapture" | "onMouseOver" | "onMouseOverCapture" | "onMouseUp" | "onMouseUpCapture" | "onSelect" | "onSelectCapture" | "onTouchCancel" | "onTouchCancelCapture" | "onTouchEnd" | "onTouchEndCapture" | "onTouchMove" | "onTouchMoveCapture" | "onTouchStart" | "onTouchStartCapture" | "onPointerDown" | "onPointerDownCapture" | "onPointerMove" | "onPointerMoveCapture" | "onPointerUp" | "onPointerUpCapture" | "onPointerCancel" | "onPointerCancelCapture" | "onPointerEnter" | "onPointerEnterCapture" | "onPointerLeave" | "onPointerLeaveCapture" | "onPointerOver" | "onPointerOverCapture" | "onPointerOut" | "onPointerOutCapture" | "onGotPointerCapture" | "onGotPointerCaptureCapture" | "onLostPointerCapture" | "onLostPointerCaptureCapture" | "onScrollCapture" | "onWheel" | "onWheelCapture" | "onAnimationStart" | "onAnimationStartCapture" | "onAnimationEnd" | "onAnimationEndCapture" | "onAnimationIteration" | "onAnimationIterationCapture" | "onTransitionEnd" | "onTransitionEndCapture" | "key" | "defaultChecked" | "defaultValue" | "suppressContentEditableWarning" | "suppressHydrationWarning" | "accessKey" | "contentEditable" | "contextMenu" | "dir" | "draggable" | "hidden" | "spellCheck" | "translate" | "radioGroup" | "about" | "datatype" | "inlist" | "prefix" | "property" | "resource" | "typeof" | "vocab" | "autoCapitalize" | "autoCorrect" | "autoSave" | "itemProp" | "itemScope" | "itemType" | "itemID" | "itemRef" | "results" | "security" | "unselectable" | "inputMode" | "is" | "autoFocus" | "formAction" | "formEncType" | "formMethod" | "formNoValidate" | "formTarget">>;
    static defaultProps: Required<Pick<SelectBasePropsBase, "filter" | "placeholder" | "disabled" | "multiple" | "appearance" | "inline" | "defaultPlacement" | "repositionMode" | "append" | "prepend" | "animateLoading" | "noOptionsMessage" | "allowKeyMatching" | "allowNewValues" | "isLoadingOptions" | "menuStyle" | "tabConfirmsNewValue">>;
    static Option: typeof Option;
    static Divider: typeof Divider;
    static Heading: typeof Heading;
    private static invalidLinkAppearanceProps;
    private static validateAppearance;
    constructor(props: Readonly<SelectBaseProps>);
    componentDidUpdate(prevProps: Readonly<SelectBaseProps>, prevState: Readonly<SelectBaseState>): void;
    private getCurrentValues;
    private getTopValues;
    private resetMatches;
    private handleSelectAll;
    private handleClearAll;
    private handleTextKeyDown;
    private handleMenuOptionClick;
    private handleMenuOptionKeyDown;
    private handleTextChange;
    private handleTextFocus;
    private handleTextBlur;
    private handleRequestOpen;
    private handleRequestClose;
    private handleScrollBottom;
    private handleActiveOptionMount;
    private handleOptionMount;
    private isControlled;
    private hasFilter;
    private toggleValue;
    /**
     * Place focus on the toggle.
     */
    focus(): void;
    private renderControls;
    private createChildren;
    private wrapLabel;
    render(): JSX.Element;
}
export default SelectBase;
export { ChildrenElement, Divider, Heading, Option, SelectBaseChangeHandler, SelectBaseFilterChangeHandler, SelectBaseProps, isOption, };
