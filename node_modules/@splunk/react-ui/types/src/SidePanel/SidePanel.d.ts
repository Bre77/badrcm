import React, { Component } from 'react';
import { TransitionOpenPropsBase } from '@splunk/react-ui/TransitionOpen';
import { ClassComponentProps } from '../utils/types';
/** @public */
declare type SidePanelRequestCloseHandler = (data: {
    event: React.MouseEvent<HTMLDivElement> | MouseEvent | KeyboardEvent | TouchEvent;
    reason: 'clickAway' | 'escapeKey';
}) => void;
interface SidePanelPropsBase extends TransitionOpenPropsBase {
    children?: React.ReactNode;
    /**
     * The position of the panel on the screen.
     */
    dockPosition?: 'top' | 'bottom' | 'left' | 'right';
    /**
     * The inner element can control the width of the side bar when placed left or right and
     * the height when placed top or bottom.
     */
    innerClassName?: string;
    /**
     * The inner element can control the width of the side bar when placed left or right and
     * the height when placed top or bottom.
     */
    innerStyle?: React.CSSProperties;
    /**
     * A function called when the open / close animation ends.
     */
    onAnimationEnd?: () => void;
    /**
     * A function that is called when a close event occurs. The callback is passed a
     * reason and the event.
     *
     * Generally, this callback should be used to toggle the `open` prop.
     */
    onRequestClose?: SidePanelRequestCloseHandler;
    /**
     * Indicates the current open state of the panel.
     */
    open?: boolean;
    /**
     * The outer element grows to the width of the side bar when placed left or right or
     * the height when placed top or bottom. It has minimal styles:
     * a white background and a box shadow. Adding styles to this container
     * can be useful when the sidebar must be shorter than the width or height of the page
     * or when multiple sidebars are shown.
     */
    outerClassName?: string;
    /**
     * The outer element grows to the width of the side bar when placed left or right or
     * the height when placed top or bottom. It has minimal styles:
     * a white background and a box shadow. Adding styles to this container
     * can be useful when the sidebar must be shorter than the width or height of the page
     * or when multiple sidebars are shown.
     */
    outerStyle?: React.CSSProperties;
    /**
     * Indicates whether to add an overlay mask on the whole page, blocking other interactions
     * while the panel is open.
     */
    useLayerForClickAway?: boolean;
}
declare const defaultProps: Required<Pick<SidePanelPropsBase, 'dockPosition' | 'open' | 'useLayerForClickAway'>>;
declare type SidePanelProps = ClassComponentProps<SidePanelPropsBase, typeof defaultProps, 'div'>;
interface SidePanelState {
    panelAnimating: boolean;
    prevOpen: boolean;
}
declare class SidePanel extends Component<SidePanelProps, SidePanelState> {
    static propTypes: React.WeakValidationMap<ClassComponentProps<SidePanelPropsBase, Required<Pick<SidePanelPropsBase, "open" | "useLayerForClickAway" | "dockPosition">>, "div", never>>;
    static defaultProps: Required<Pick<SidePanelPropsBase, "open" | "useLayerForClickAway" | "dockPosition">>;
    static getDerivedStateFromProps: React.GetDerivedStateFromProps<SidePanelProps, SidePanelState>;
    constructor(props: Readonly<SidePanelProps>);
    private handlePanelAnimationEnd;
    private renderModal;
    render(): JSX.Element;
}
export default SidePanel;
export { SidePanelRequestCloseHandler };
