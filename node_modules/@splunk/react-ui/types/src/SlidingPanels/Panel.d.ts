import React, { Component } from 'react';
import { ClassComponentProps } from '../utils/types';
interface PanelPropsBase {
    /**
     * A React ref which is set to the DOM element when the component mounts and null when it unmounts.
     */
    elementRef?: React.Ref<HTMLDivElement>;
    /**
     * A unique `id` for this panel and used by the SlidingPanels to keep track of the open panel.
     */
    panelId: any;
    /**
     * Used internally, func passed in from outer place is overwritten
     * by SlidingPanels during rendering
     * @private
     */
    onMount?: (panel: Panel) => void;
    /**
     * Used internally, func passed in from outer place is overwritten
     * by SlidingPanels during rendering
     * @private
     */
    onUnmount?: (panel: Panel) => void;
}
declare const defaultProps: {};
declare type PanelProps = ClassComponentProps<PanelPropsBase, typeof defaultProps, 'div'>;
/**
 * Container for arbitrary content.
 */
declare class Panel extends Component<PanelProps, {}> {
    private el;
    static propTypes: React.WeakValidationMap<ClassComponentProps<PanelPropsBase, {}, "div", never>>;
    static defaultProps: {};
    componentDidMount(): void;
    componentWillUnmount(): void;
    getHeight(): number | undefined;
    getWidth(): number | undefined;
    private handleMount;
    render(): JSX.Element;
}
export default Panel;
