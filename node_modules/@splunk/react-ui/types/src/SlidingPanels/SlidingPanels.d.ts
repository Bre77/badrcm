import React, { Component } from 'react';
import Panel from './Panel';
import { ClassComponentProps } from '../utils/types';
interface SlidingPanelsPropsBase {
    activePanelId: any;
    children?: React.ReactNode;
    elementRef?: React.Ref<HTMLDivElement>;
    /** An additional className to inner container. */
    innerClassName?: string;
    innerStyle?: React.CSSProperties;
    onAnimationEnd?: () => void;
    /** An additional className to outer container. */
    outerClassName?: string;
    outerStyle?: React.CSSProperties;
    transition?: 'forward' | 'backward';
}
declare const defaultProps: Required<Pick<SlidingPanelsPropsBase, 'transition'>>;
declare type SlidingPanelsProps = ClassComponentProps<SlidingPanelsPropsBase, typeof defaultProps, 'div'>;
interface SlidingPanelsState {
    activePanel?: Panel;
    animating: boolean;
    panelLoading: boolean;
    prevActivePanelId: any;
    slidingId: any;
}
declare class SlidingPanels extends Component<SlidingPanelsProps, SlidingPanelsState> {
    static propTypes: React.WeakValidationMap<ClassComponentProps<SlidingPanelsPropsBase, Required<Pick<SlidingPanelsPropsBase, "transition">>, "div", never>>;
    static defaultProps: Required<Pick<SlidingPanelsPropsBase, "transition">>;
    static Panel: typeof Panel;
    private panelInstances;
    private allowAnimationUpdates;
    static getDerivedStateFromProps: React.GetDerivedStateFromProps<SlidingPanelsProps, SlidingPanelsState>;
    constructor(props: Readonly<SlidingPanelsProps>);
    componentWillUnmount(): void;
    private willEnter;
    private willLeave;
    private handlePanelMount;
    private handlePanelUnmount;
    private handleAnimationEnd;
    private renderPanel;
    private renderOuterContainer;
    render(): JSX.Element;
}
export default SlidingPanels;
export { Panel };
