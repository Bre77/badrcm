import React, { PureComponent } from 'react';
import { ClassComponentProps } from '../utils/types';
interface ItemPropsBase {
    /**
     * Changes the style if isMain=true, passed from SplitButton.
     * @private
     */
    appearance: 'default' | 'primary' | 'destructive';
    /**
     * Becomes the label.
     */
    children?: React.ReactNode;
    /**
     * Prevents user from clicking the button.
     */
    disabled?: boolean;
    /**
     * Becomes the main button. If no `Item`s have this prop, the first `Item` is the main button.
     */
    isMain?: boolean;
    /**
     * A callback for when an item is clicked.
     */
    onClick?: React.MouseEventHandler<HTMLAnchorElement | HTMLButtonElement>;
}
declare const defaultProps: Required<Pick<ItemPropsBase, 'appearance'>>;
declare type ItemProps = ClassComponentProps<ItemPropsBase, typeof defaultProps, 'button'>;
/**
 * An item within a `SplitButton`. This inherits from
 * [PureComponent](https://reactjs.org/docs/react-api.html#reactpurecomponent)
 * so any elements passed to it must also be pure.
 */
declare class Item extends PureComponent<ItemProps, {}> {
    private item;
    static propTypes: React.WeakValidationMap<ClassComponentProps<ItemPropsBase, Required<Pick<ItemPropsBase, "appearance">>, "button", never>>;
    static defaultProps: Required<Pick<ItemPropsBase, "appearance">>;
    private handleClick;
    scrollIntoViewIfNeeded(): void;
    /**
     * Place focus on the item.
     */
    focus(): void;
    render(): JSX.Element;
}
export default Item;
