import React, { Component } from 'react';
import { ClassComponentProps } from '../utils/types';
import TabBarContext from './TabBarContext';
declare type TabClickHandler = (event: React.MouseEvent<HTMLButtonElement>, data: {
    tabId?: string;
    tabKey?: number;
}) => void;
declare type TabFocusHandler = (event: React.FocusEvent<HTMLButtonElement>, data: {
    tabId?: string;
    tabKey?: number;
}) => void;
interface TabPropsBase {
    /** @private. Is the tab active. */
    active?: boolean;
    /**
     * The ariaControls prop is the element `id` of the content displayed when the tab is selected.
     */
    ariaControls?: string;
    /** Inserts number in tab label. */
    count?: number;
    /** Prevents user from clicking the tab. */
    disabled?: boolean;
    /**
     * A React ref which is set to the DOM element when the component mounts and null when it unmounts.
     */
    elementRef?: React.Ref<HTMLButtonElement>;
    /** See Icon documentation for more information. */
    icon?: React.ReactNode;
    /**
     * Placed on the clickable element. For accessibility, the related content must
     * have an `aria-labelledby` attribute that matches this `id`. The `id` must be unique
     * within the document, unlike `tabId`, which must be unique within the `TabBar` instance.
     */
    id?: string;
    /** The text shown in the button. */
    label?: React.ReactNode;
    ref?: React.Ref<Tab>;
    /** A unique `id` for this tab and used by the `TabBar` to keep track of the open tab. */
    tabId?: string;
    /** @private. The internal key of the tab */
    tabKey?: number;
    /** Identifies the URL for a link. If set, Splunk UI applies an <a> tag
     * instead of a <button> tag. */
    to?: string;
    /**
     * Content to show in a tooltip.
     */
    tooltip?: React.ReactNode;
}
declare const defaultProps: Required<Pick<TabPropsBase, 'active'>>;
declare type TabProps = ClassComponentProps<TabPropsBase, typeof defaultProps, 'div'>;
interface TabState {
    anchor: HTMLButtonElement | null;
    open: boolean;
}
declare class Tab extends Component<TabProps, TabState> {
    private popoverId;
    static propTypes: React.WeakValidationMap<ClassComponentProps<TabPropsBase, Required<Pick<TabPropsBase, "active">>, "div", never>>;
    static defaultProps: Required<Pick<TabPropsBase, "active">>;
    static contextType: React.Context<TabBarContext>;
    constructor(props: Readonly<TabProps>);
    private handleMount;
    private handleTooltipOpen;
    private handleTooltipClose;
    private handleClick;
    private handleFocus;
    focus(): void;
    render(): JSX.Element;
}
export default Tab;
export { TabClickHandler, TabFocusHandler };
