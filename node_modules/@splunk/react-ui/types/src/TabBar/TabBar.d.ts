import React from 'react';
import PropTypes from 'prop-types';
import Tab from './Tab';
import { ComponentProps } from '../utils/types';
/** @public */
declare type TabBarChangeHandler = (event: React.MouseEvent<HTMLButtonElement> | React.FocusEvent<HTMLButtonElement>, data: {
    selectedTabId?: string;
}) => void;
interface TabBarPropsBase {
    /** If `true`, tabs will trigger the `onChange` callback when they receive focus.  */
    autoActivate?: boolean;
    /** The `tabId` of the `TabBar.Tab` to activate. */
    activeTabId?: string;
    /**
     * Setting this prop to 'context' creates an appearance without an underline.
     * @includeTheme prisma
     */
    appearance?: 'navigation' | 'context';
    /**
     * Must be `TabBar.Tab`.
     */
    children?: React.ReactNode;
    /** @private */
    disabled?: boolean;
    /**
     * A React ref which is set to the DOM element when the component mounts and null when it unmounts.
     */
    elementRef?: React.Ref<HTMLDivElement>;
    /** Size of icon in `TabBar.Tab` if it has an icon. */
    iconSize?: 'inline' | 'small' | 'large';
    /** The layout of tabs. */
    layout?: 'horizontal' | 'vertical';
    /** A callback that receives the event and data (`selectedTabId`). */
    onChange?: TabBarChangeHandler;
    /** Width of each `TabBar.Tab` in pixels. Must be greater than 50 pixels. Leave blank for auto width. */
    tabWidth?: number;
}
declare type TabBarProps = ComponentProps<TabBarPropsBase, 'div'>;
declare function TabBar({ activeTabId, autoActivate, appearance, children, disabled, elementRef, iconSize, layout, onChange, tabWidth, ...otherProps }: TabBarProps): JSX.Element;
declare namespace TabBar {
    var propTypes: {
        autoActivate: PropTypes.Requireable<boolean>;
        activeTabId: PropTypes.Requireable<string>;
        appearance: PropTypes.Requireable<string>;
        children: PropTypes.Requireable<PropTypes.ReactNodeLike>;
        /** @private */
        disabled: PropTypes.Requireable<boolean>;
        elementRef: PropTypes.Requireable<object>;
        iconSize: PropTypes.Requireable<string>;
        layout: PropTypes.Requireable<string>;
        onChange: PropTypes.Requireable<(...args: any[]) => any>;
        tabWidth: PropTypes.Requireable<number>;
    };
    var Tab: typeof import("./Tab").default;
}
export default TabBar;
export { Tab, TabBarChangeHandler };
