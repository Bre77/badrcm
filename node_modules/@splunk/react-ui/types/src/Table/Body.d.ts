import React, { Component } from 'react';
import { RowRequestMoveRowHandler } from './Row';
import { ClassComponentProps } from '../utils/types';
declare type BodyRequestMoveRowHandler = RowRequestMoveRowHandler;
interface BodyPropsBase {
    /** @private. Generally passed by Table rather than added directly. */
    actions?: boolean;
    /**
     * Must be `Table.Row`.
     */
    children?: React.ReactNode;
    /**
     * A React ref which is set to the DOM element when the component mounts and null when it unmounts.
     */
    elementRef?: React.Ref<HTMLTableSectionElement>;
    /** @private. Generally passed by Table rather than added directly. */
    movableColumns?: boolean;
    /** @private. Generally passed by Table rather than added directly. */
    rowExpansion?: 'single' | 'multi' | 'none' | 'controlled';
    /** @private. Generally passed by Table rather than added directly. */
    onRequestMoveRow?: BodyRequestMoveRowHandler;
    /** @private. Generally passed by Table rather than added directly. */
    stripeRows?: boolean;
}
declare const defaultProps: Required<Pick<BodyPropsBase, 'actions' | 'rowExpansion' | 'stripeRows'>>;
declare type BodyProps = ClassComponentProps<BodyPropsBase, typeof defaultProps, 'tbody'>;
interface BodyState {
    dragDataId?: string | number;
    dragIndex?: number;
    dragPosition?: number;
    expanded: (string | number | null)[];
}
declare class Body extends Component<BodyProps, BodyState> {
    private el;
    private rect?;
    private rowHeight?;
    private rows?;
    static splunkUiType: string;
    static propTypes: React.WeakValidationMap<ClassComponentProps<BodyPropsBase, Required<Pick<BodyPropsBase, "actions" | "rowExpansion" | "stripeRows">>, "tbody", never>>;
    static defaultProps: Required<Pick<BodyPropsBase, "actions" | "rowExpansion" | "stripeRows">>;
    constructor(props: Readonly<BodyProps>);
    componentWillUnmount(): void;
    private handleDragStart;
    private handleDragOver;
    private handleDragEnter;
    private handleDrop;
    private handleDragEnd;
    private onRequestMoveRow;
    private handleMount;
    private handleRowExpansion;
    private calculateGuideIndex;
    private updateDragPositionImpl;
    private updateDragPosition;
    private updateScrollPosition;
    private cleanupDrag;
    render(): JSX.Element | null;
}
export default Body;
