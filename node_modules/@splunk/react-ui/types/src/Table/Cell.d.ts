import React, { Component } from 'react';
import { ClassComponentProps } from '../utils/types';
/** @public */
declare type CellClickHandler = (event: React.MouseEvent<HTMLTableCellElement> | React.KeyboardEvent<HTMLTableCellElement>, data?: any) => void;
interface CellPropsBase {
    /** Align the text in the cell. */
    align?: 'left' | 'center' | 'right';
    /** The cell's appearance will default to `'link'` when a `onClick` handler is provided.
     * 'data': Is used for regular text and row expansion.
     *      - The text does not turn blue in `enterprise`, `enterpriseDark`, `lite` themes.
     *      - The background color is not lighter on cell hover in `prisma` theme.
     * 'link':
     *      - The text is blue and darker on cell hover in `enterprise`, `enterpriseDark`, `lite` themes.
     *      - The `link` appearance is not supported by the `prisma` theme.
     * 'rowLink':
     *      - The text is blue and darker on row hover in `enterprise`, `enterpriseDark`, `lite` themes.
     *      - The text is white and the background color of the row is lighter on row hover in `prisma` theme.
     * @private */
    appearance?: 'data' | 'link' | 'rowLink';
    children?: React.ReactNode;
    /** This data is returned with the onClick events as the second argument. */
    data?: any;
    /**
     * A React ref which is set to the DOM element when the component mounts and null when it unmounts.
     */
    elementRef?: React.Ref<HTMLTableCellElement>;
    /** Providing an `onClick` handler enables focus, hover, and related styles.
     * @excludeTheme prisma
     */
    onClick?: CellClickHandler;
    /** @private This will be passed through, and will work as expected. */
    onKeyDown?: React.KeyboardEventHandler<HTMLTableCellElement>;
    /** @private */
    disabled?: boolean;
    /** @private */
    expand?: boolean;
    /** @private. */
    variant?: 'toggle' | 'expand' | 'drag' | 'actions';
}
declare const defaultProps: Required<Pick<CellPropsBase, 'align'>>;
declare type CellProps = ClassComponentProps<CellPropsBase, typeof defaultProps, 'td'>;
declare class Cell extends Component<CellProps, {}> {
    private el;
    static splunkUiType: string;
    static propTypes: React.WeakValidationMap<ClassComponentProps<CellPropsBase, Required<Pick<CellPropsBase, "align">>, "td", never>>;
    static defaultProps: Required<Pick<CellPropsBase, "align">>;
    private handleMount;
    private handleClick;
    private handleKeyDown;
    render(): JSX.Element;
}
export default Cell;
export { CellClickHandler };
