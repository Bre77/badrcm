import React, { Component } from 'react';
import { HeadAutosizeColumnHandler, HeadRequestMoveColumnHandler, HeadRequestResizeColumnHandler } from './Head';
import { ClassComponentProps } from '../utils/types';
import TableContext from './TableContext';
declare type HeadCellAutosizeColumnHandler = HeadAutosizeColumnHandler;
declare type HeadCellDragStartHandler = (index: number | undefined, columnId: any) => void;
declare type HeadCellKeyDownHandler = (event: React.KeyboardEvent<HTMLTableCellElement>, data: {
    columnId: any;
    index: number;
}) => void;
declare type HeadCellRequestMoveColumnHandler = HeadRequestMoveColumnHandler;
/** @public */
declare type HeadCellSortDir = 'asc' | 'desc' | 'none';
declare type HeadCellSortHandler = (event: React.MouseEvent<HTMLTableCellElement> | React.KeyboardEvent<HTMLTableCellElement>, data: {
    columnId: any;
    id?: string;
    index: number;
    sortDir: HeadCellSortDir;
    sortKey?: string;
}) => void;
declare type HeadCellRequestResizeHandler = HeadRequestResizeColumnHandler;
interface HeadCellPropsBase {
    /** Align the text in the label. */
    align?: 'left' | 'center' | 'right';
    children?: React.ReactNode;
    /**
     * An `id` that is returned in the draggable, sort, and resize events.
     */
    columnId?: any;
    /**
     * A React ref which is set to the DOM element when the component mounts and null when it unmounts.
     */
    elementRef?: React.Ref<HTMLTableCellElement>;
    /** @private Indicates the presence of actions. */
    hasActionsHead?: boolean;
    /** @private The index of the cell, skipping the info column. */
    index?: number;
    /** @private. */
    onAutosizeColumn?: HeadCellAutosizeColumnHandler;
    /**
     * A callback invoked when this head cell is clicked. If provided, this HeadCell is
     * sortable and renders the appropriate user interface.
     */
    onSort?: HeadCellSortHandler;
    /** @private. */
    onDragStart?: HeadCellDragStartHandler;
    /**
     * @private. Passed through and works as expected.
     */
    onKeyDown?: HeadCellKeyDownHandler;
    /** @private. */
    onClick?: () => void;
    /** @private. */
    onRequestMoveColumn?: HeadCellRequestMoveColumnHandler;
    /** @private. */
    onRequestResize?: HeadCellRequestResizeHandler;
    /**
     * Allows the user to resize the column when onRequestResize is passed to the `Table`. Set
     * resizable to `false` to prevent some columns for resizing.
     */
    resizable?: boolean;
    /** @private. */
    showGuideline?: 'none' | 'before' | 'after';
    /**
     * The current sort direction of this column.
     */
    sortDir?: HeadCellSortDir;
    /**
     * The `sortKey` is passed in the data object to the `onSort` callback, if provided.
     */
    sortKey?: string;
    /**
     * Truncate the text in the label. `truncate=false` is not compatible with `Table`'s
     * `onRequestResize`.
     */
    truncate?: boolean;
    /**
     * @private
     * Used internally to suppress focus and id when this `HeadCell` is superseded by one in an
     * overlaid `HeadTable` for user interactions.
     */
    visible?: boolean;
    /**
     * The width of the column in pixels.
     */
    width?: number | 'auto';
    /** @private. */
    variant?: 'toggleAll' | 'info' | 'actions';
    /**
     * @private
     * Used internally to manage overlapping head cell elements, i.e. drag handle
     */
    zIndex?: number;
}
declare const defaultProps: Required<Pick<HeadCellPropsBase, 'align' | 'resizable' | 'showGuideline' | 'sortDir' | 'truncate' | 'visible' | 'zIndex'>>;
declare type HeadCellProps = ClassComponentProps<HeadCellPropsBase, typeof defaultProps, 'th'>;
interface HeadCellState {
    isDragging: boolean;
}
declare class HeadCell extends Component<HeadCellProps, HeadCellState> {
    static splunkUiType: string;
    static propTypes: React.WeakValidationMap<ClassComponentProps<HeadCellPropsBase, Required<Pick<HeadCellPropsBase, "align" | "zIndex" | "visible" | "truncate" | "resizable" | "sortDir" | "showGuideline">>, "th", never>>;
    static defaultProps: Required<Pick<HeadCellPropsBase, "align" | "zIndex" | "visible" | "truncate" | "resizable" | "sortDir" | "showGuideline">>;
    static contextType: React.Context<TableContext>;
    constructor(props: Readonly<HeadCellProps>);
    private handleClick;
    private handleKeyDown;
    private handleDragStart;
    private handleDragEnd;
    private sortDirAriaMapping;
    render(): JSX.Element;
}
export default HeadCell;
export { HeadCellDragStartHandler, HeadCellKeyDownHandler, HeadCellRequestMoveColumnHandler, HeadCellSortDir, HeadCellSortHandler, };
