import React, { Component } from 'react';
import { HeadAutosizeColumnHandler, HeadRequestMoveColumnHandler, HeadRequestResizeColumnHandler } from './Head';
import { HeadCellDragStartHandler, HeadCellKeyDownHandler } from './HeadCell';
import { ClassComponentProps } from '../utils/types';
import TableContext from './TableContext';
/** @public */
declare type HeadDropdownCellPossibleCloseReason = 'clickAway' | 'contentClick' | 'escapeKey' | 'offScreen' | 'tabKey' | 'toggleClick';
declare type HeadDropdownCellAutosizeColumnHandler = HeadAutosizeColumnHandler;
declare type HeadDropdownCellDragStartHandler = HeadCellDragStartHandler;
declare type HeadDropdownCellKeyDownHandler = HeadCellKeyDownHandler;
/** @public */
declare type HeadDropdownCellRequestCloseHandler = (event: React.MouseEvent<HTMLTableHeaderCellElement | HTMLDivElement> | React.KeyboardEvent<HTMLTableHeaderCellElement> | MouseEvent | KeyboardEvent | TouchEvent | undefined, data: {
    columnId: any;
    index: number;
    reason: HeadDropdownCellPossibleCloseReason;
}) => void;
declare type HeadDropdownCellRequestMoveColumnHandler = HeadRequestMoveColumnHandler;
/** @public */
declare type HeadDropdownCellRequestOpenHandler = (event: React.MouseEvent<HTMLTableHeaderCellElement> | React.KeyboardEvent<HTMLTableHeaderCellElement>, data: {
    columnId: any;
    index: number;
    reason: 'toggleClick';
}) => void;
declare type HeadDropdownCellRequestResizeHandler = HeadRequestResizeColumnHandler;
interface HeadDropdownCellPropsBase {
    /** Align the text in the label. */
    align?: 'left' | 'center' | 'right';
    /**
     * If there is not enough room to render the `Popover` in a direction, this option
     * enables it to be rendered over the Head.
     */
    canCoverHead?: boolean;
    children: React.ReactNode;
    /**
     * An array of reasons for which this `Popover` should close.
     */
    closeReasons?: HeadDropdownCellPossibleCloseReason[];
    /**
     * An id that will be returned in the draggable, open, close and resize events.
     */
    columnId?: any;
    /**
     * The default placement of the `Popover`. It might be rendered in a different direction
     * depending upon the space available and the `repositionMode`.
     */
    defaultPlacement?: 'above' | 'below' | 'left' | 'right' | 'vertical' | 'horizontal';
    /**
     * A React ref which is set to the DOM element when the component mounts and null when it unmounts.
     */
    elementRef?: React.Ref<HTMLTableCellElement>;
    /**
     * An array of reasons for which to set focus on the toggle. Only subset of `closeReasons`
     * will be honored. When Menu.Items open a Modal or other dialog, it may be necessary to
     * remove the 'contentClick' reason to allow focus to be passed to the dialog.
     */
    focusToggleReasons?: HeadDropdownCellPossibleCloseReason[];
    /** @private The index of the cell, skipping the info column. */
    index?: number;
    /**
     * The label on the heading, which may simply be text or may contain an element with
     * icons or other markup.
     */
    label?: React.ReactNode;
    /** @private. */
    onAutosizeColumn?: HeadDropdownCellAutosizeColumnHandler;
    /** @private. */
    onDragStart?: HeadDropdownCellDragStartHandler;
    /**
     * @private. This will be passed through, and will work as expected.
     */
    onKeyDown?: HeadDropdownCellKeyDownHandler;
    /**
     * A callback function invoked with a data object containing the event (if applicable) and
     * a reason for the close request.
     */
    onRequestClose?: HeadDropdownCellRequestCloseHandler;
    /** @private. */
    onRequestMoveColumn?: HeadDropdownCellRequestMoveColumnHandler;
    /**
     * A callback function invoked with a data object containing the event. (The reason is
     * always toggleClick).
     */
    onRequestOpen?: HeadDropdownCellRequestOpenHandler;
    /** @private. */
    onRequestResize?: HeadDropdownCellRequestResizeHandler;
    /**
     * If an open prop is provided, this component will behave as a
     * [controlled component](https://reactjs.org/docs/forms.html#controlled-components).
     * This means that the consumer is responsible for handling the open/close state. If no
     * open prop is provided, the component will handle the open/close state internally.
     */
    open?: boolean;
    /**
     * See `repositionMode` on `Popover` for details.
     */
    repositionMode?: 'none' | 'flip' | 'any';
    /**
     * Allow the user to resize the column when onRequestResize is passed to the `Table`. Set
     * resizable to false to prevent some columns for resizing.
     */
    resizable?: boolean;
    /**
     * Keep focus within the Popover while open. Note, Menu handles it's own focus by default,
     * so this is only necessary when the popover contains other types of content.
     */
    retainFocus?: boolean;
    /** @private. */
    showGuideline?: 'none' | 'before' | 'after';
    /**
     * When true, the Popover will automatically take focus when 'open' changes to true.
     * Disable this for a Popover that has shows on hover, such as a tooltip.
     */
    takeFocus?: boolean;
    /**
     * Truncate the text in the label. `truncate=false` is not compatible with `Table`'s
     * `onRequestResize`.
     */
    truncate?: boolean;
    /**
     * @private
     * Used internally to suppress focus when this `HeadDropdownCell` is superseded by one in an
     * overlaid `HeadTable` for user interactions.
     */
    visible?: boolean;
    /** @private */
    variant?: 'toggleAll' | 'info' | 'actions';
    /**
     * The width of the column in pixels.
     */
    width?: number;
    /**
     * @private
     * Used internally to manage overlapping head cell elements, i.e. drag handle
     */
    zIndex?: number;
}
declare const defaultProps: Required<Pick<HeadDropdownCellPropsBase, 'align' | 'canCoverHead' | 'closeReasons' | 'defaultPlacement' | 'focusToggleReasons' | 'repositionMode' | 'resizable' | 'retainFocus' | 'takeFocus' | 'truncate' | 'visible' | 'zIndex'>>;
declare type HeadDropdownCellProps = ClassComponentProps<HeadDropdownCellPropsBase, typeof defaultProps, 'th'>;
interface HeadDropdownCellState {
    clientX?: number;
    el: HTMLTableCellElement | null;
    isDragging: boolean;
    open: boolean;
}
declare class HeadDropdownCell extends Component<HeadDropdownCellProps, HeadDropdownCellState> {
    private cellId;
    private controlledExternally;
    private popoverId;
    static splunkUiType: string;
    /**
     * Enumeration of the possible reasons for closing the Select.
     * 'clickAway', 'escapeKey', and 'offScreen' are inherited from Popover, but repeated here for
     * docs extraction.
     */
    static possibleCloseReasons: import("../Dropdown/Dropdown").DropdownPossibleCloseReason[];
    static propTypes: React.WeakValidationMap<ClassComponentProps<HeadDropdownCellPropsBase, Required<Pick<HeadDropdownCellPropsBase, "align" | "zIndex" | "retainFocus" | "takeFocus" | "visible" | "closeReasons" | "defaultPlacement" | "repositionMode" | "focusToggleReasons" | "truncate" | "resizable" | "canCoverHead">>, "th", never>>;
    static defaultProps: Required<Pick<HeadDropdownCellPropsBase, "align" | "zIndex" | "retainFocus" | "takeFocus" | "visible" | "closeReasons" | "defaultPlacement" | "repositionMode" | "focusToggleReasons" | "truncate" | "resizable" | "canCoverHead">>;
    static contextType: React.Context<TableContext>;
    constructor(props: Readonly<HeadDropdownCellProps>);
    componentDidUpdate(prevProps: Readonly<HeadDropdownCellProps>): void;
    private handleMount;
    private handleRequestClose;
    private handleClick;
    private handleKeyDown;
    private handleContentClick;
    private handleDragStart;
    private handleDragEnd;
    /**
     * Place focus on the toggle.
     */
    focus(): void;
    private isOpen;
    private isControlled;
    render(): JSX.Element;
}
export default HeadDropdownCell;
export { HeadDropdownCellDragStartHandler, HeadDropdownCellPossibleCloseReason, HeadDropdownCellRequestCloseHandler, HeadDropdownCellRequestMoveColumnHandler, HeadDropdownCellRequestOpenHandler, };
