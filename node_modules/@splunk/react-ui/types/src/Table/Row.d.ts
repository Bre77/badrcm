import React, { Component } from 'react';
import { RowDragCellDragStartHandler, RowDragCellRequestMoveRowHandler } from './RowDragCell';
import { ClassComponentProps } from '../utils/types';
/** @public */
declare type RowActionPrimaryClickHandler = (event: React.MouseEvent, data?: any) => void;
/** @public */
declare type RowActionSecondaryClickHandler = (event: React.MouseEvent, data?: any) => void;
/** @public */
declare type RowClickHandler = (event: React.MouseEvent<HTMLTableRowElement> | React.KeyboardEvent<HTMLTableRowElement>, data?: any) => void;
declare type RowDragStartHandler = RowDragCellDragStartHandler;
declare type RowExpansionHandler = (event: React.MouseEvent<HTMLTableCellElement> | React.KeyboardEvent<HTMLTableCellElement>, data?: any) => void;
declare type RowRequestMoveRowHandler = RowDragCellRequestMoveRowHandler;
/** @public */
declare type RowRequestToggleHandler = (event: React.MouseEvent<HTMLTableCellElement> | React.KeyboardEvent<HTMLTableCellElement>, data?: any) => void;
interface RowPropsBase {
    /** @private. Generally passed by Table rather than added directly. */
    activeElementId?: string;
    /**
     * Adds primary actions. For best results, use an icon-only button style.
     * The `onClick` handler of each action is passed the event and the `data` prop of this row.
     * @includeTheme prisma
     */
    actionPrimary?: React.ReactElement;
    /**
     * Adds a secondary actions dropdown menu. This prop must be a `Menu`.
     * The `onClick` handler of each action is passed the event and the `data` prop of this row.
     * @includeTheme prisma
     */
    actionsSecondary?: React.ReactElement;
    /**
     * Must be `Table.Cell`.
     */
    children?: React.ReactNode;
    /** This data is returned with the onClick and toggle events as the second argument. */
    data?: any;
    /** @private. Generally passed by Table rather than added directly. */
    dataId?: string | number;
    /** Indicates whether the row selection is disabled. */
    disabled?: boolean;
    /** @private. Generally passed by Table rather than added directly. */
    draggable?: boolean;
    /**
     * A React ref which is set to the DOM element when the component mounts and null when it unmounts.
     */
    elementRef?: React.Ref<HTMLTableRowElement>;
    /** @private. */
    expandable?: boolean;
    /**
     * Allows row expansion to be controlled programmatically if the `rowExpansion` prop is set to `controlled` in `Table`.
     */
    expanded?: boolean;
    /**
     * An optional row that is displayed when this row is expanded, or an array of rows.
     */
    expansionRow?: React.ReactElement | React.ReactElement[];
    /** @private. Indicates whether the table has an actions column. */
    actions?: boolean;
    /** @private. Generally passed by `Table` rather than added directly. */
    index?: number;
    /** @private. Generally passed by `Table` rather than added directly. */
    movableColumns?: boolean;
    /** Providing an `onClick` handler enables focus, hover, and related styles. */
    onClick?: RowClickHandler;
    /** @private. Generally passed by `Table` rather than added directly. */
    onDragStart?: RowDragStartHandler;
    /**
     * An event handler that triggers when the row expansion element is selected.
     */
    onExpansion?: RowExpansionHandler;
    /** @private. This is passed through and works as expected. */
    onKeyDown?: React.KeyboardEventHandler<HTMLTableRowElement>;
    /** @private. Generally passed by `Table` rather than added directly. */
    onRequestMoveRow?: RowRequestMoveRowHandler;
    /**
     * An event handler for toggle of the row. resize of columns. The function is passed the event and the `data` prop for this row.
     */
    onRequestToggle?: RowRequestToggleHandler;
    /**
     * When an `onRequestToggle` handler is defined, this prop determines the appearance
     * of the toggle.
     */
    selected?: boolean;
    /** @private. Generally passed by `Table` rather than added directly. */
    showRowGuideline?: 'none' | 'before' | 'after';
    /** @private. */
    stripe?: 'odd' | 'even' | 'none';
}
declare const defaultProps: Required<Pick<RowPropsBase, 'stripe'>>;
declare type RowProps = ClassComponentProps<RowPropsBase, typeof defaultProps, 'tr'>;
declare class Row extends Component<RowProps, {}> {
    static splunkUiType: string;
    static propTypes: React.WeakValidationMap<ClassComponentProps<RowPropsBase, Required<Pick<RowPropsBase, "stripe">>, "tr", never>>;
    static defaultProps: Required<Pick<RowPropsBase, "stripe">>;
    private elementRef;
    private handleClick;
    private handleKeyDown;
    private handleToggle;
    private handleExpansion;
    private renderActionPrimary;
    private renderActionsSecondary;
    private handleMount;
    render(): JSX.Element;
}
export default Row;
export { RowActionPrimaryClickHandler, RowActionSecondaryClickHandler, RowClickHandler, RowDragStartHandler, RowRequestMoveRowHandler, RowRequestToggleHandler, RowExpansionHandler, };
