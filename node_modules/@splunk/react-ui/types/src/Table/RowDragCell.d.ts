import React, { Component } from 'react';
import { TableRequestMoveRowHandler } from './Table';
declare type RowDragCellDragStartHandler = (index?: number, dataId?: string | number) => void;
declare type RowDragCellKeyDownHandler = (event: React.KeyboardEvent<HTMLTableCellElement>, data: {
    dataId?: string | number;
    index: number;
}) => void;
declare type RowDragCellRequestMoveRowHandler = TableRequestMoveRowHandler;
interface RowDragCellPropsBase {
    /**
     * event-handler that is triggered when row drag begins
     */
    onDragStart?: RowDragCellDragStartHandler;
    /**
     * event-handler that is triggered when row drag ends
     */
    onDragEnd?: () => void;
    /**
     * callback for reordering the rows
     */
    onRequestMoveRow?: RowDragCellRequestMoveRowHandler;
    /**
     * index of the data-object in input array
     */
    index?: number;
    /**
     * unique-ID of the data-object in input array
     */
    dataId?: string | number;
    /**
     * dataID of the activeElement or the selected element in DOM
     */
    activeElementId?: string;
    /**
     * location where the guideline would be displayed
     */
    showRowGuideline?: 'none' | 'before' | 'after';
    /**
     * event-handler for keyboard events
     */
    onKeyDown?: RowDragCellKeyDownHandler;
    /**
     * no of rows a cell expands to. applies when a table is rendered with expandable rows option
     */
    rowSpan?: number;
}
declare const defaultProps: Required<Pick<RowDragCellPropsBase, 'showRowGuideline'>>;
declare type RowDragCellProps = RowDragCellPropsBase & typeof defaultProps;
interface RowDragCellState {
    isDragging: boolean;
}
declare class RowDragCell extends Component<RowDragCellProps, RowDragCellState> {
    private cloneEl?;
    private el;
    static propTypes: React.WeakValidationMap<RowDragCellProps>;
    static defaultProps: Required<Pick<RowDragCellPropsBase, "showRowGuideline">>;
    constructor(props: Readonly<RowDragCellProps>);
    componentDidMount(): void;
    componentWillUnmount(): void;
    private handleMount;
    private handleDragStart;
    private handleDragEnd;
    private handleKeyDown;
    private cleanupDrag;
    render(): JSX.Element;
}
export default RowDragCell;
export { RowDragCellDragStartHandler, RowDragCellRequestMoveRowHandler };
