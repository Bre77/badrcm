import React, { Component } from 'react';
import Body from './Body';
import Caption from './Caption';
import Cell, { CellClickHandler } from './Cell';
import Head from './Head';
import HeadCell, { HeadCellSortHandler } from './HeadCell';
import HeadDropdownCell, { HeadDropdownCellPossibleCloseReason, HeadDropdownCellRequestCloseHandler, HeadDropdownCellRequestOpenHandler } from './HeadDropdownCell';
import Row, { RowActionPrimaryClickHandler, RowActionSecondaryClickHandler, RowClickHandler, RowRequestToggleHandler } from './Row';
import { ClassComponentProps } from '../utils/types';
/** @public */
declare type TableRequestMoveColumnHandler = (data: {
    columnId: any;
    fromIndex: number;
    toIndex: number;
}) => void;
/** @public */
declare type TableRequestMoveRowHandler = (data: {
    dataId?: string | number;
    fromIndex: number;
    toIndex: number;
}) => void;
/** @public */
declare type TableRequestResizeColumnHandler = (event: React.MouseEvent<HTMLButtonElement> | React.KeyboardEvent<HTMLButtonElement> | MouseEvent, data: {
    columnId: any;
    id?: string;
    index: number;
    width: number;
}) => void;
interface TablePropsBase {
    /**
     * Adds table-level actions. Not compatible with `onRequestResize`.
     * @includeTheme prisma
     */
    actions?: React.ReactElement[];
    /**
     * Specifies the width of the actions column. Adds an empty header for
     * row actions if no table-level actions are present.
     * @includeTheme prisma
     */
    actionsColumnWidth?: number;
    /**
     * Must be `Table.Head`, `Table.Body`, or `Table.Caption`.
     */
    children?: React.ReactNode;
    /**
     * Sets the offset from the top of the window. Only applies when `headType`
     * is 'docked'.
     */
    dockOffset?: number;
    /**
     * Docks the horizontal scroll bar at the bottom of the window when the bottom of the
     * table is below the viewport.
     */
    dockScrollBar?: boolean;
    /**
     * A React ref which is set to the DOM element when the component mounts and null when it unmounts.
     */
    elementRef?: React.Ref<HTMLDivElement>;
    /**
     * Sets the table head type:
     *
     *  * `docked`: The head is docked against the window
     *  * `fixed` : The head is fixed in the table. The table can scroll
     *          independently from the head.
     *  * `inline`: The head isn't fixed, but can scroll with the rest of
     *          the table.
     */
    headType?: 'docked' | 'fixed' | 'inline';
    /**
     * Style specification for the inner container, which is the scrolling container.
     */
    innerStyle?: React.CSSProperties;
    /**
     * Callback invoked when a user clicks the row selection toggle in the header.
     */
    onRequestToggleAllRows?: () => void;
    /**
     * Callback invoked when a scoll event occurs on the inner scrolling container.
     */
    onScroll?: React.UIEventHandler<HTMLDivElement>;
    /**
     * Style specification for the outer container.
     */
    outerStyle?: React.CSSProperties;
    /**
     * Adds a column to the table with an expansion button for each row that has expansion
     * content. Supported values:
     *
     * * `single`: Only one row can be expanded at a time. If another expansion button is
     * clicked, the currently expanded row closes and the new one opens.
     * * `multi`: Allows mulitple rows to be expanded at the same time.
     * * `controlled`: Allows the expanded state to be externally managed by `expanded` prop of `Row`.
     * * `none`: The default with no row expansion.
     */
    rowExpansion?: 'single' | 'multi' | 'controlled' | 'none';
    /**
     * When an `onRequestToggleAllRows` handler is defined, this prop determines the appearance
     * of the toggle all rows button.
     */
    rowSelection?: 'all' | 'some' | 'none';
    /**
     * Alternate rows are given a darker background to improve readability.
     * @excludeTheme prisma
     */
    stripeRows?: boolean;
    /**
     * The style attribute for the table. This is primarily useful for setting the CSS
     * table-layout property.
     */
    tableStyle?: React.CSSProperties;
    /**
     * An event handler for handle the re order action of Table. The function is passed an
     * options object with `fromIndex` and `toIndex`.
     */
    onRequestMoveColumn?: TableRequestMoveColumnHandler;
    /**
     * An event handler to handle the reorder rows action of Table. The function is passed an
     * options object with `fromIndex` and `toIndex`.
     */
    onRequestMoveRow?: TableRequestMoveRowHandler;
    /**
     * An event handler for resize of columns. The function is passed an event and an
     * options object with `columnId`, `index`, and `width`.
     */
    onRequestResizeColumn?: TableRequestResizeColumnHandler;
    /**
     * Table will fill parent container. Resizable columns can have a `width` of `auto` only with this prop enabled.
     */
    resizableFillLayout?: boolean;
}
declare const defaultProps: Required<Pick<TablePropsBase, 'actions' | 'dockOffset' | 'headType' | 'rowExpansion' | 'rowSelection' | 'resizableFillLayout'>>;
declare type TableProps = ClassComponentProps<TablePropsBase, typeof defaultProps, 'div'>;
interface TableState {
    cellWidths?: number[];
    dragIndex?: number;
    dragPosition?: number;
    horizontalOffset?: number;
    tableWidth?: number;
    top?: number;
    width?: number;
}
declare class Table extends Component<TableProps, TableState> {
    private dockedScrollBar;
    private head;
    private headFocusState?;
    private headTable;
    private headTableEl;
    private scrollSource?;
    private table;
    private tableContainer;
    static propTypes: React.WeakValidationMap<ClassComponentProps<TablePropsBase, Required<Pick<TablePropsBase, "actions" | "headType" | "rowSelection" | "resizableFillLayout" | "dockOffset" | "rowExpansion">>, "div", never>>;
    static contextType: React.Context<Window | Document | HTMLElement | null | undefined>;
    static defaultProps: Required<Pick<TablePropsBase, "actions" | "headType" | "rowSelection" | "resizableFillLayout" | "dockOffset" | "rowExpansion">>;
    static Caption: typeof Caption;
    static Head: typeof Head;
    static HeadCell: typeof HeadCell;
    static HeadDropdownCell: typeof HeadDropdownCell;
    static Body: typeof Body;
    static Row: typeof Row;
    static Cell: typeof Cell;
    /**
     * @private
     * @private
     * Returns an object describing the focus state of the provided `head`.
     * @param head - A reference to a mounted `Head` component.
     * @returns {Object} focusState - An object containing a target (either 'headCell' or
     * 'resizeButton') and an index.
     */
    private static getHeadFocusState;
    private static getOffset;
    /**
     * @private
     * @private
     * Applies the provided `headFocusState` to the provided `head`.
     * @param head - A reference to a mounted `Head` component.
     * @param {Object} headFocusState
     * @param {String} headFocusState.target - Focus can be applied to a 'headCell' or a
     * 'resizeButton'.
     * @param {Number} headFocusState.index - The index of the element to set focus on.
     */
    private static applyHeadFocusState;
    constructor(props: Readonly<TableProps>);
    componentDidUpdate(prevProps: Readonly<TableProps>): void;
    componentDidMount(): void;
    componentWillUnmount(): void;
    private updateDockedHeadState;
    private handleScroll;
    private handleResize;
    private handleContainerScroll;
    private handleDockedScrollBarScroll;
    private handleDragStart;
    private handleDragOver;
    private handleDragEnter;
    private handleDragEnd;
    private handleDrop;
    private handleHeadMount;
    private handleHeadTableMount;
    private handleHeadTableElementMount;
    private handleHeadTableKeyUp;
    private handleAutosizeColumn;
    private createHead;
    private createBody;
    private isInline;
    private headerIsDocked;
    private isFixed;
    private showDockedHeader;
    private showDockedScrollBar;
    private updateDragPositionImpl;
    private updateDragPosition;
    private cleanupDrag;
    private renderHeadTable;
    private renderDockedScrollbar;
    render(): JSX.Element;
}
export default Table;
export { Body, Caption, Cell, Head, HeadCell, HeadDropdownCell, Row };
export type { CellClickHandler, HeadCellSortHandler, HeadDropdownCellPossibleCloseReason, HeadDropdownCellRequestCloseHandler, HeadDropdownCellRequestOpenHandler, RowActionPrimaryClickHandler, RowActionSecondaryClickHandler, RowClickHandler, RowRequestToggleHandler, TableRequestMoveColumnHandler, TableRequestMoveRowHandler, TableRequestResizeColumnHandler, };
