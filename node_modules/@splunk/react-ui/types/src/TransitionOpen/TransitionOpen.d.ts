import React, { Component } from 'react';
import { ClassComponentProps } from '../utils/types';
interface TransitionOpenPropsBase {
    animation?: 'slideFromTop' | 'slideFromRight' | 'slideFromBottom' | 'slideFromLeft' | 'expandHeight' | 'expandWidth' | 'none';
    animateOnMount?: boolean;
    children?: React.ReactNode;
    /** @private */
    className?: string;
    /** The `id` of the inner container. */
    id?: string;
    /** An additional className to inner container. */
    innerClassName?: string;
    innerStyle?: React.CSSProperties;
    onAnimationEnd?: () => void;
    /** Whether the component is currently open or not. */
    open?: boolean;
    /** An additional className to outer container. */
    outerClassName?: string;
    /** The `id` of the outer container. */
    outerId?: string;
    outerStyle?: React.CSSProperties;
    /**
     * Keep focus within `TransitionOpen` while open.
     */
    retainFocus?: boolean;
    /**
     * When true, the `TransitionOpen` automatically takes focus when 'open' changes to true.
     */
    takeFocus?: boolean;
}
declare const defaultProps: Required<Pick<TransitionOpenPropsBase, 'animation' | 'animateOnMount' | 'innerStyle' | 'open' | 'outerStyle' | 'retainFocus' | 'takeFocus'>>;
declare type TransitionOpenProps = ClassComponentProps<TransitionOpenPropsBase, typeof defaultProps, 'div'>;
interface TransitionOpenState {
    animating: boolean;
    innerEl: HTMLDivElement | null;
    prevOpen: boolean;
    value?: number;
}
declare class TransitionOpen extends Component<TransitionOpenProps, TransitionOpenState> {
    static propTypes: React.WeakValidationMap<ClassComponentProps<TransitionOpenPropsBase, Required<Pick<TransitionOpenPropsBase, "open" | "animation" | "animateOnMount" | "innerStyle" | "outerStyle" | "retainFocus" | "takeFocus">>, "div", never>>;
    static defaultProps: Required<Pick<TransitionOpenPropsBase, "open" | "animation" | "animateOnMount" | "innerStyle" | "outerStyle" | "retainFocus" | "takeFocus">>;
    static getDerivedStateFromProps: React.GetDerivedStateFromProps<TransitionOpenProps, TransitionOpenState>;
    private allowAnimationUpdates;
    constructor(props: Readonly<TransitionOpenProps>);
    componentDidUpdate(): void;
    componentWillUnmount(): void;
    private getValue;
    private handleMount;
    private handleRest;
    private handleTab;
    private internalRender;
    private getSpringTransition;
    render(): JSX.Element;
}
export default TransitionOpen;
export { TransitionOpenPropsBase };
