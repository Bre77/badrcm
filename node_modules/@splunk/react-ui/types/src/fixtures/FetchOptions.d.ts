import 'core-js/es/promise';
declare type Movie = {
    id: number;
    title: string;
};
declare type MovieOption = Movie & {
    matchRanges?: {
        start: number;
        end: number;
    }[];
};
declare function isMovieOption(movie: Movie | MovieOption): movie is MovieOption;
/**
 * @param fetchTimeout: number - The number of milliseconds to defer fetching of options.
 * @param fetchMoreTimeout: number - The number of milliseconds to defer fetching additional options.
 * @param numberOfResults: number - Then mumber of options to retrieve per fetch.
 */
export default class FetchOptions {
    private currentFetch;
    private currentOptions;
    private fetching;
    private fetchMoreTimeout;
    private fetchPromise?;
    private fetchTimeout;
    private filter?;
    private firstIndex;
    private lastIndex;
    private list;
    private numberOfResults;
    private timer?;
    constructor({ fetchTimeout, fetchMoreTimeout, numberOfResults }?: {
        fetchTimeout?: number | undefined;
        fetchMoreTimeout?: number | undefined;
        numberOfResults?: number | undefined;
    });
    /**
     * Fake fetches options from a server.
     * @param filter: string - filter options.
     * @param timeout: number - Number of milliseconds to defer fetch.
     * @return A promise that will resolve based on the fetchTimeout value.
     *         Returns array of new options.
     */
    fetch(filter?: string, timeout?: number): Promise<MovieOption[]>;
    /**
     * Increases searching index for new options and runs fetch.
     * @param currentOptions: array - Append options to given array.
     * @return A promise that will resolve based on the fetchTimeout value.
     *         Returns array of new options appended to currentOptions.
     */
    fetchMore(currentOptions?: MovieOption[]): Promise<MovieOption[]>;
    private concatAndFilter;
    private filterResults;
    /**
     * Resets firstIndex, LastIndex, currentOptions and list to default values.
     */
    reset(): void;
    /** Cancels pending fetch promises. */
    stop(): void;
    /**
     * @return Option of given value;
     */
    getOption: (value: number) => {
        id: number;
        title: string;
    } | undefined;
    /**
     * @return Options of given values;
     */
    getSelectedOptions: (values: number[]) => {
        id: number;
        title: string;
    }[];
    /**
     * Get current length of indexes fetched.
     */
    getCurrentCount: () => number;
    /**
     * Get full count of all possible items fetched.
     */
    getFullCount: () => number;
}
export { isMovieOption, Movie, MovieOption };
