declare type ClassComponentProps<P extends {}, D extends {}, I extends keyof JSX.IntrinsicElements, B extends keyof P | keyof JSX.IntrinsicElements[I] = never> = P & D & Omit<JSX.IntrinsicElements[I], keyof P | B | 'ref' | 'css'>;
declare type ComponentProps<P extends {}, I extends keyof JSX.IntrinsicElements, B extends keyof P | keyof JSX.IntrinsicElements[I] = never> = P & Omit<JSX.IntrinsicElements[I], keyof P | B | 'ref' | 'css'>;
declare type ObjKeys = <T>(o: T) => Extract<keyof T, string>[];
declare type Writable<T> = {
    -readonly [P in keyof T]: T[P];
};
declare function assertDefined<T>(val: T, msg?: string): asserts val is NonNullable<T>;
export { assertDefined, ClassComponentProps, ComponentProps, ObjKeys, Writable };
