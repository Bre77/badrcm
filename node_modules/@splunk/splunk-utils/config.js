"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.extractAppName = extractAppName;
exports.versionLabel = exports.username = exports.splunkdPath = exports.serverTimezoneInfo = exports.rootPath = exports.portNumber = exports.locale = exports.config = exports.buildPushNumber = exports.buildNumber = exports.appBuild = exports.app = exports.isAvailable = exports.CSRFToken = void 0;

var _lodash = require("lodash");

var _cookie = require("@splunk/ui-utils/cookie");

/**
 * A set of constants describing the server environment. If window.$C isn't defined, most of the
 * values on this page are also undefined.
 *
 * The constants may be imported independently, such as:
 * ```
 * import { buildNumber, locale, rootPath } from '@splunk/splunk-utils/config';
 * @file
 */

/* global global */
// If this is running in Node, the root is the `global` object. If it's running in the browser,
// root is the `window` object.
var root = typeof window === 'undefined' ? global : window;
/**
 * A function to get a $C prop. Returns undefined if $C isn't available.
 * @private
 */

function get$CEntry(prop) {
  return (0, _lodash.get)(root, ['$C', prop]);
}
/**
 * The CSRF token. This may be `null` if the token isn't found in the cookie.
 *
 * @constant
 *
 * @public
 */


var CSRFToken = (0, _cookie.getEntry)("splunkweb_csrf_token_".concat(get$CEntry('MRSPARKLE_PORT_NUMBER')));
/**
 * If `window.$C` is undefined or invalid, isAvailable is `false`.
 * @constant
 * @public
 */

exports.CSRFToken = CSRFToken;
var isAvailable = !!get$CEntry('SPLUNKD_PATH');
/**
 * Extracts app name from the URL. To enable testing, this function is exported and pathname
 * can be overridden.
 * @private
 */

exports.isAvailable = isAvailable;

function extractAppName() {
  var pathname = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : (0, _lodash.get)(root, ['document', 'location', 'pathname'], '');
  var pathMatch = pathname.match(/\w\w.\w\w\/(app|manager)\/([^/]+)/);
  return pathMatch ? pathMatch[2] : undefined;
}
/**
 * The name of the current app as shown in the URL (not the display name).
 * @constant
 * @public
 */


var app = extractAppName();
/**
 * The build number of the current app.
 * @constant
 * @public
 */

exports.app = app;
var appBuild = get$CEntry('APP_BUILD');
/**
 * A hash string of the current build.
 * @constant
 * @type {string}
 * @public
 */

exports.appBuild = appBuild;
var buildNumber = get$CEntry('BUILD_NUMBER');
/**
 * A incremented number configured per instance. Defaults to 0.
 * @constant
 * @public
 */

exports.buildNumber = buildNumber;
var buildPushNumber = get$CEntry('BUILD_PUSH_NUMBER');
/**
 * The full object of window.$C.
 * @constant
 * @public
 */

exports.buildPushNumber = buildPushNumber;
var config = (0, _lodash.get)(root, '$C');
/**
 * The current locale, such as "en-US".
 * @constant
 * @public
 */

exports.config = config;
var locale = get$CEntry('LOCALE');
/**
 * The port that Splunk Web is using. Defaults to 8000.
 * @constant
 * @public
 */

exports.locale = locale;
var portNumber = get$CEntry('MRSPARKLE_PORT_NUMBER');
/**
 * Splunk may not be running in the root directory, so the locale may not be the first element
 * in the pathname. If it is running in the root directory, ```rootPath``` is an empty
 * string. Otherwise it returns the root. For example, in the page
 * ```
 * http://splunk.domain.com/my-root-dir/en-US/app/search/search
 * ```
 * ```rootPath``` is set to ```'my-root-dir'```.
 * @constant
 * @public
 */

exports.portNumber = portNumber;
var rootPath = get$CEntry('MRSPARKLE_ROOT_PATH');
/**
 * The serialized Splunk Enterprise time zone data. This can be parsed for use in formatting Epoch times
 * on the client.
 * @constant
 * @public
 */

exports.rootPath = rootPath;
var serverTimezoneInfo = get$CEntry('SERVER_ZONEINFO');
/**
 * The Splunk Web proxing to splunkd, such as ```/en-US/splunkd/__raw```.
 * @constant
 * @public
 */

exports.serverTimezoneInfo = serverTimezoneInfo;
var splunkdPath = get$CEntry('SPLUNKD_PATH');
/**
 * The username of the current user.
 * @constant
 * @public
 */

exports.splunkdPath = splunkdPath;
var username = get$CEntry('USERNAME');
/**
 * The version label of splunkd.
 * @constant
 * @public
 */

exports.username = username;
var versionLabel = get$CEntry('VERSION_LABEL');
exports.versionLabel = versionLabel;