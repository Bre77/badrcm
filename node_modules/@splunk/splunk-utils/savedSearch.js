"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.get = get;
exports.dispatch = dispatch;
exports.getHistory = getHistory;
exports.getLatest = getLatest;

var _querystring = _interopRequireDefault(require("querystring"));

var _fetch = require("./fetch");

var _url = require("./url");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

/**
 * A set of utilities for working with saved searches in the Splunk platform, including getting them, dispatching
 * them, and getting their history.
 * @file
 */

/**
 * Makes a GET request to the `saved/searches/{name}` REST API endpoint.
 *
 * @param {Object} savedSearch - Identify the target saved search by its name (required), app (optional), and owner (optional).
 * @param {String} savedSearch.name - The name of the target saved search.
 * @param {String} [savedSearch.app] - The app of the target saved search.
 * @param {String} [savedSearch.owner] - The owner of the target saved search.
 * @param {Object} [params] - The request parameters. See the [Splunk documentation on the
 * `saved/searches/{name}` REST API endpoint](http://docs.splunk.com/Documentation/Splunk/latest/RESTREF/RESTsearch#saved.2Fsearches.2F.7Bname.7D)
 * for available parameters.
 * @param {Object} [configOptions] - Splunk config options passed to url.createRESTURL. Defaults to
 * the values provided by @splunk/splunk-utils/config.
 * @param {Object} [baseFetchInit] - Options passed to the fetch call. Defaults to the defaultFetchInit
 * in `@splunk/splunk-utils/fetch`.
 * @returns {Promise} A promise with the results from the server.
 * @public
 */
function get(_ref) {
  var name = _ref.name,
      app = _ref.app,
      owner = _ref.owner;
  var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var configOptions = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  var baseFetchInit = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : _fetch.defaultFetchInit;
  var url = (0, _url.createRESTURL)("saved/searches/".concat(name), {
    app: app,
    owner: owner
  }, configOptions);

  var qs = _querystring["default"].encode(_objectSpread({
    output_mode: 'json'
  }, params));

  return fetch("".concat(url, "?").concat(qs), baseFetchInit).then((0, _fetch.handleResponse)(200))["catch"]((0, _fetch.handleError)("Failed to get saved search: ".concat(name)));
}
/**
 * Makes a POST request to the `saved/searches/{name}/dispatch` REST API endpoint.
 *
 * @param {Object} savedSearch - Identify the target saved search by its name (required), app (optional), and owner (optional).
 * @param {String} savedSearch.name - The name of the target saved search.
 * @param {String} [savedSearch.app] - The app of the target saved search.
 * @param {String} [savedSearch.owner] - The owner of the target saved search.
 * @param {Object} [params] - The request parameters. See the [Splunk documentation on the
 * `saved/searches/{name}/dispatch` REST API endpoint](http://docs.splunk.com/Documentation/Splunk/latest/RESTREF/RESTsearch#saved.2Fsearches.2F.7Bname.7D.2Fdispatch)
 * for available parameters.
 * @param {Object} [configOptions] - Splunk config options passed to url.createRESTURL. Defaults to
 * the values provided by @splunk/splunk-utils/config.
 * @param {Object} [baseFetchInit] - Options passed to the fetch call. Defaults to the defaultFetchInit
 * in `@splunk/splunk-utils/fetch`.
 * @returns {Promise} A promise with the results from the server.
 * @public
 */


function dispatch(_ref2) {
  var name = _ref2.name,
      app = _ref2.app,
      owner = _ref2.owner;
  var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var configOptions = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  var baseFetchInit = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : _fetch.defaultFetchInit;
  var url = (0, _url.createRESTURL)("saved/searches/".concat(name, "/dispatch"), {
    app: app,
    owner: owner
  }, configOptions);
  return fetch(url, _objectSpread(_objectSpread({}, baseFetchInit), {}, {
    method: 'POST',
    body: _querystring["default"].encode(_objectSpread(_objectSpread({}, params), {}, {
      output_mode: 'json'
    }))
  })).then((0, _fetch.handleResponse)(201))["catch"]((0, _fetch.handleError)("Failed to dispatch saved search: ".concat(name)));
}
/**
 * Makes a GET request to the `saved/searches/{name}/history` REST API endpoint.
 *
 * @param {Object} savedSearch - Identify the target saved search by its name (required), app (optional), and owner (optional).
 * @param {String} savedSearch.name - The name of the target saved search.
 * @param {String} [savedSearch.app] - The app of the target saved search.
 * @param {String} [savedSearch.owner] - The owner of the target saved search.
 * @param {Object} [params] - The request parameters. See the [Splunk documentation on the
 * `saved/searches/{name}/history` REST endpoint](http://docs.splunk.com/Documentation/Splunk/latest/RESTREF/RESTsearch#saved.2Fsearches.2F.7Bname.7D.2Fhistory)
 * for available parameters.
 * @param {Object} [configOptions] - Splunk config options passed to url.createRESTURL. Defaults to
 * the values provided by @splunk/splunk-utils/config.
 * @param {Object} [baseFetchInit] - Options passed to the fetch call. Defaults to the defaultFetchInit
 * in `@splunk/splunk-utils/fetch`.
 * @returns {Promise} A promise with the results from the server.
 * @public
 */


function getHistory(_ref3) {
  var name = _ref3.name,
      app = _ref3.app,
      owner = _ref3.owner;
  var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var configOptions = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  var baseFetchInit = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : _fetch.defaultFetchInit;
  var url = (0, _url.createRESTURL)("saved/searches/".concat(name, "/history"), {
    app: app,
    owner: owner
  }, configOptions);

  var qs = _querystring["default"].encode(_objectSpread({
    output_mode: 'json'
  }, params));

  return fetch("".concat(url, "?").concat(qs), baseFetchInit).then((0, _fetch.handleResponse)(200))["catch"]((0, _fetch.handleError)("Failed to get history for saved search: ".concat(name)));
}
/**
 * Gets the most recent search job for the specified saved search.
 *
 * @param {Object} savedSearch - Identify the target saved search by its name (required), app (optional), and owner (optional).
 * @param {String} savedSearch.name - The name of the target saved search.
 * @param {String} [savedSearch.app] - The app of the target saved search.
 * @param {String} [savedSearch.owner] - The owner of the target saved search.
 * @param {Object} [params] - The request parameters. See the [Splunk documentation on the
 * `saved/searches/{name}/history` REST API endpoint](http://docs.splunk.com/Documentation/Splunk/latest/RESTREF/RESTsearch#saved.2Fsearches.2F.7Bname.7D.2Fhistory)
 * for available parameters.
 * @param {Object} [configOptions] - Splunk config options passed to url.createRESTURL. Defaults to
 * the values provided by @splunk/splunk-utils/config.
 * @param {Object} [baseFetchInit] - Options passed to the fetch call. Defaults to the defaultFetchInit
 * in `@splunk/splunk-utils/fetch`.
 * @returns {Promise} A promise that resolves with the latest search job, or `undefined` if no search
 * jobs exist for the specified saved search.
 * @public
 */


function getLatest(savedSearch) {
  var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var configOptions = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  var baseFetchInit = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : _fetch.defaultFetchInit;
  return getHistory(savedSearch, _objectSpread(_objectSpread({}, params), {}, {
    sort_key: 'start',
    sort_dir: 'desc',
    count: 1
  }), configOptions, baseFetchInit).then(function (data) {
    return data.entry[0];
  });
}