"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.defaultTheme = defaultTheme;
exports.getUserTheme = getUserTheme;
exports.getThemeOptions = getThemeOptions;

var _scriptjs = _interopRequireDefault(require("scriptjs"));

var _url = require("@splunk/splunk-utils/url");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

/**
 * A set of functions for dealing with Splunk themes.
 * @file
 */
var defaultThemeSplunkThemeProviderMap = {
  enterprise: {
    family: 'enterprise',
    colorScheme: 'light',
    density: 'comfortable'
  },
  enterpriseDark: {
    family: 'enterprise',
    colorScheme: 'dark',
    density: 'comfortable'
  },
  light: {
    family: 'enterprise',
    colorScheme: 'light',
    density: 'comfortable'
  },
  dark: {
    family: 'enterprise',
    colorScheme: 'dark',
    density: 'comfortable'
  },
  prismaLight: {
    family: 'prisma',
    colorScheme: 'light',
    density: 'comfortable'
  },
  prismaDark: {
    family: 'prisma',
    colorScheme: 'dark',
    density: 'comfortable'
  },
  lite: {
    family: 'enterprise',
    colorScheme: 'light',
    density: 'comfortable'
  }
};

function getThemeApi(callback) {
  var url = (0, _url.createStaticURL)('build/api/get_theme.js');
  (0, _scriptjs["default"])(url, function () {
    // eslint-disable-next-line no-underscore-dangle
    callback(window.__get_theme__);
  });
}
/**
 * Determines a default theme name based on the current environment, such as `$C`.
 *
 * @deprecated Use getUserTheme instead.
 * @param {Object} [scope=window (if available)] - The environment.
 * @returns {String} The theme name (`enterprise`, `lite`, ...)
 * @public
 */


function defaultTheme() {
  var scope = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : typeof window !== 'undefined' ? window : null;

  if (!scope) {
    return 'enterprise';
  }
  /* eslint-disable no-underscore-dangle */


  var partialsTheme = scope.__splunkd_partials__ && scope.__splunkd_partials__['/services/server/info'] && scope.__splunkd_partials__['/services/server/info'].entry[0].content.product_type;
  var scopeTheme = scope.__splunk_ui_theme__;
  /* eslint-enable no-underscore-dangle */

  var cTheme = scope.$C && scope.$C.SPLUNK_UI_THEME;
  return scopeTheme || cTheme || partialsTheme || 'enterprise';
}
/**
 * Determines the user theme name based on Splunk Core theme precedence.
 *
 * @throws {error} If the theme API is not available.
 * @returns {Promise<Response>} Returns any key in the defaultThemeSplunkThemeProviderMap
 * @public
 */


function getUserTheme() {
  return new Promise(function (resolve) {
    var cb = function cb(themeApi) {
      if (themeApi) {
        themeApi.getTheme().then(function (theme) {
          resolve(theme);
        });
        return;
      }

      resolve(defaultTheme());
    };

    getThemeApi(cb);
  });
}
/**
 *
 * @param {string} theme
 * @returns {object} An object with the props expected by <ThemeProvider> from @splunk/themes
 */


function getThemeOptions(theme) {
  return defaultThemeSplunkThemeProviderMap[theme] || defaultThemeSplunkThemeProviderMap.enterprise;
}