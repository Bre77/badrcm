"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.withConfig = withConfig;
exports.insertCacheBuster = exports.createURL = exports.createStaticURL = exports.createRESTURL = exports.createDocsURL = exports.createAppDocsURL = void 0;

var _querystring = require("querystring");

var config = _interopRequireWildcard(require("./config"));

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

/**
 * A set of functions for generating Splunk Web URLs. They may be imported independently, such as:
 * ```
 * import { createURL, createStaticURL } from '@splunk/splunk-utils/url';
 * ```
 * @file
 */
function withConfig(_ref) {
  var appBuild = _ref.appBuild,
      buildNumber = _ref.buildNumber,
      buildPushNumber = _ref.buildPushNumber,
      locale = _ref.locale,
      rootPath = _ref.rootPath,
      splunkdPath = _ref.splunkdPath;

  /**
   * Inserts a cache buster into the given path.
   *
   * @param path {String} - The path to inject the cache buster into.
   * @param configOptions {Object} - Config options including `appBuild`, `buildPushNumber`, and
   * `buildNumber`. Defaults to the values provided by `@splunk/splunk-utils/config`.
   * @return {String} Returns the path with the cache buster `/@9850fc87a5ee`.
   * @private
   */
  function insertCacheBuster(path) {
    var configOptions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    var options = _objectSpread({
      appBuild: appBuild,
      buildPushNumber: buildPushNumber,
      buildNumber: buildNumber
    }, configOptions);

    var match = path.match(/(^|\w\w-\w\w\/)static\//);

    if (!match) {
      return path;
    }

    var insertPosition = match.index + match[0].length - 1;
    var isApp = path.match(/(^|\w\w-\w\w|)static\/app/);
    var appBuildString = isApp ? ":".concat(options.appBuild || 0) : '';
    var buildPushString = options.buildPushNumber ? ".".concat(options.buildPushNumber) : '';
    var cacheBusterString = "/@".concat(options.buildNumber).concat(buildPushString).concat(appBuildString);
    var before = path.substr(0, insertPosition);
    var after = path.substr(insertPosition);
    return "".concat(before).concat(cacheBusterString).concat(after);
  }
  /**
   * Returns a full path for the current appserver location.
   * This is required for proxy compatiblity, localization, and cache busting.
   *
   * For example:
   * ```js
   * createURL('app/search/job'); // "/splunk/en-US/app/search/job"
   * createURL('/app/search/job'); // "/splunk/en-US/app/search/job"
   * createURL('app/search/job', {id:3, user:'me' }); // "/splunk/en-US/app/search/job?id=3&user=me"
   * ```
   *
   * Static paths are augmented with a cache buster:
   * ```js
   * createURL('/static/js/foo.js'); // "/splunk/en-US/static/@12345/js/foo.js"
   * createURL('/static/js/foo.js'); // "/splunk/en-US/static/@12345.1/js/foo.js"
   * createURL('/static/app/search/js/foo.js'); // "/splunk/en-US/static/@12345.1:0/app/search/js/foo.js"
   * ```
   *
   * @public
   * @param path {String}
   * @param [queryParams] {Object} An object of the query parameters.
   * @param configOptions {Object} - Config options including `appBuild`, `buildPushNumber`,
   * `buildNumber`, `rootPath`, and `locale`. Defaults to the values provided by
   * `@splunk/splunk-utils/config`.
   * @return {String} Returns a valid URL with correct root path, locale, and cache buster.
   * @alias createURL
   */


  function createURL(pathInput, queryParams) {
    var configOptions = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

    var options = _objectSpread({
      appBuild: appBuild,
      buildPushNumber: buildPushNumber,
      buildNumber: buildNumber,
      rootPath: rootPath,
      locale: locale
    }, configOptions);

    var path = pathInput || '/';
    var query = queryParams ? "?".concat((0, _querystring.stringify)(queryParams)) : '';

    if (path.charAt(0) !== '/') {
      path = "/".concat(path);
    }

    path = "".concat(options.rootPath || '', "/").concat(options.locale).concat(path).concat(query);
    return insertCacheBuster(path, options);
  }
  /**
   * Prepends Splunk Web path information necessary to access a static asset. For example:
   * ```
   * createURL('fonts/roboto-regular-webfont.woff'); // "/splunk/en-US/static/@12345/fonts/roboto-regular-webfont.woff"
   * createURL('app/search/fonts/roboto-regular-webfont.woff'); // "/splunk/en-US/static/@12345.1:0/app/search/fonts/roboto-regular-webfont.woff"
   * ```
   * @public
   * @param {String} path - A path to a static resource.
   * @param [queryParams] {Object} An object of the query parameters.
   * @param configOptions {Object} - Config options including `appBuild`, `buildPushNumber`,
   * `buildNumber`, `rootPath`, and `locale`. Defaults to the values provided by
   * `@splunk/splunk-utils/config`.
   * @return {String} Returns a valid URL with correct root path, locale, and cache buster.
   * @alias createStaticURL
   */


  function createStaticURL(path) {
    for (var _len = arguments.length, rest = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      rest[_key - 1] = arguments[_key];
    }

    return createURL.apply(void 0, ["static/".concat(path)].concat(rest));
  }
  /**
   * Creates a fully qualified URL for the specified endpoint.
   * For example:
   * ```
   * createRESTURL('server/info'); // "/en-US/splunkd/__raw/services/server/info"
   * createRESTURL('saved/searches', {app: 'search'}); // "/en-US/splunkd/__raw/servicesNS/-/search/saved/searches"
   * ```
   * @public
   * @param {String} endpoint - An endpoint to a REST API.
   * @param {Object} options
   * @param {String} [options.app] - App namespace to use.
   * @param {String} [options.owner] - User namespace to use.
   * @param {Sting} [options.sharing] - Must be one of [ '' | 'app' | 'global' | 'system' ].
   * @param {Object} [configOptions] - Config options including `splunkdPath`. Defaults to the value
   *  provided by `@splunk/splunk-utils/config`.
   * @return {String} The URL of the REST API endpoint.
   * @alias createRESTURL
   */


  function createRESTURL(endpoint) {
    var namespaceOptions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var configOptions = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

    // Return the endpoint if it's a full path.
    if (/^http[s]?:\/\//.test(endpoint)) {
      return endpoint;
    }

    var basePath = configOptions.splunkdPath || splunkdPath || ''; // If it's an absolute path,

    if (/^\/.*/.test(endpoint)) {
      // Append the splunkdPath if the endpoint includes services. Otherwise, return the endpoint.
      return /^\/services/.test(endpoint) ? "".concat(basePath).concat(endpoint) : endpoint;
    } // If neither an app nor owner is provided, use /services/ endpoint.


    if (!namespaceOptions.app && !namespaceOptions.owner) {
      return "".concat(basePath, "/services/").concat(endpoint);
    } // Build a namespaced path.


    var owner;

    if (namespaceOptions.sharing) {
      owner = 'nobody';
    } else if (namespaceOptions.owner) {
      owner = encodeURIComponent(namespaceOptions.owner);
    } else {
      owner = '-';
    }

    var app;

    if (namespaceOptions.sharing === 'system') {
      app = 'system';
    } else if (namespaceOptions.app) {
      app = encodeURIComponent(namespaceOptions.app);
    } else {
      app = '-';
    }

    return "".concat(basePath, "/servicesNS/").concat(owner, "/").concat(app, "/").concat(endpoint);
  }
  /** Create docs URL private method.
   * @param {Object} [params]
   * @private
   */


  function createDocsURLFromParams(params, configOptions) {
    return createURL('/help', params, configOptions);
  }
  /** Create docs URL using location string.
   * For example:
   * ```
   * createDocsURL('learnmore.timerange.picker'); // "/en-US/help?location=learnmore.timerange.picker"
   * ```
   * @public
   * @param {String} location - Required.
   * @return {String} The URL of the Splunk help document.
   * @alias createDocsURL
   */


  function createDocsURL(location, configOptions) {
    return createDocsURLFromParams({
      location: location
    }, configOptions);
  }
  /** Create app docs URL using location string, which needs to add [appName:appVersion] prefix before the location string.
   * For example:
   * ```
   * createAppDocsURL('learnmore.timerange.picker', { appName: 'splunk_app_aws', appVersion: '5.0.3'}); // "/en-US/help?location=learnmore.timerange.picker"
   * ```
   * @public
   * @param {String} location - Required.
   * @param {Object} options - Required.
   * @param {String} options.appName - App name.
   * @param {String} options.appVersion - App version.
   * @return {String} The URL of the Splunk app help document.
   * @alias createAppDocsURL
   */


  function createAppDocsURL(location, _ref2, configOptions) {
    var appName = _ref2.appName,
        appVersion = _ref2.appVersion;
    return createDocsURLFromParams({
      location: "[".concat(appName, ":").concat(appVersion, "]").concat(location)
    }, configOptions);
  }

  return {
    createAppDocsURL: createAppDocsURL,
    createDocsURL: createDocsURL,
    createRESTURL: createRESTURL,
    createStaticURL: createStaticURL,
    createURL: createURL,
    insertCacheBuster: insertCacheBuster
  };
}

var _withConfig = withConfig(config),
    createAppDocsURL = _withConfig.createAppDocsURL,
    createDocsURL = _withConfig.createDocsURL,
    createRESTURL = _withConfig.createRESTURL,
    createStaticURL = _withConfig.createStaticURL,
    createURL = _withConfig.createURL,
    insertCacheBuster = _withConfig.insertCacheBuster;

exports.insertCacheBuster = insertCacheBuster;
exports.createURL = createURL;
exports.createStaticURL = createStaticURL;
exports.createRESTURL = createRESTURL;
exports.createDocsURL = createDocsURL;
exports.createAppDocsURL = createAppDocsURL;