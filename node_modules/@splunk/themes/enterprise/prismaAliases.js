"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _tinycolor = _interopRequireDefault(require("tinycolor2"));

var _light = _interopRequireDefault(require("./light"));

var _dark = _interopRequireDefault(require("./dark"));

var _compact = _interopRequireDefault(require("./compact"));

var _comfortable = _interopRequireDefault(require("./comfortable"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types
function createPrismaAliases(_ref) {
  var colorScheme = _ref.colorScheme,
      density = _ref.density;
  var cs = {
    light: _light["default"],
    dark: _dark["default"]
  }[colorScheme];
  var d = {
    compact: _compact["default"],
    comfortable: _comfortable["default"]
  }[density];
  /**
   * # Prisma Aliases
   * The following aliases for prisma variables are provided for convenience. Just because an alias is provided,
   * does not mean it is ideal for enterprise themes in all scenarios.
   *
   * They cover all values except most `interactiveColor*` variables.
   *
   *
   * For example, use
   *  ``` css
   *  const myClickable = styled(Clickable)`
   *      color: ${variables.contentColorDefault};
   *  }
   *  ```
   * instead of
   *  ``` css
   *  const myClickable = styled(Clickable)`
   *      color: ${pick({
   *          enterprise: variables.textColor;
   *          prisma: variables.contentColorDefault;
   *      })};
   *  }
   *  ```
   *
   * @valueSet
   */

  var prismaAliases = {
    accentColorPositive: cs.successColor,
    accentColorWarning: cs.warningColor,
    accentColorAlert: cs.alertColor,
    accentColorNegative: cs.errorColor,
    statusColorInfo: cs.infoColorL10,
    statusColorNormal: cs.successColorL10,
    statusColorLow: cs.warningColorL10,
    statusColorMedium: cs.alertColorL10,
    statusColorHigh: cs.errorColorL10,
    statusColorCritical: cs.errorColorD20,
    embossShadow: cs.overlayShadow,
    dragShadow: cs.overlayShadow,
    modalShadow: cs.overlayShadow,
    backgroundColorPopup: cs.backgroundColor,
    backgroundColorSection: cs.backgroundColor,
    backgroundColorSidebar: cs.backgroundColor,
    backgroundColorPage: cs.backgroundColor,
    backgroundColorNavigation: cs.backgroundColor,
    backgroundColorFloating: cs.backgroundColor,
    backgroundColorDialog: cs.backgroundColor,
    backgroundColorScrim: (0, _tinycolor["default"])(cs.gray30).setAlpha(0.8).toRgbString(),
    contentColorActive: cs.textColor,
    contentColorDefault: cs.textColor,
    contentColorMuted: cs.textGray,
    contentColorDisabled: cs.textDisabledColor,
    contentColorInverted: colorScheme === 'dark' ? cs.gray30 : cs.gray30,
    neutral100: colorScheme === 'dark' ? cs.gray25 : cs.gray98,
    neutral200: colorScheme === 'dark' ? cs.gray30 : cs.gray96,
    neutral300: colorScheme === 'dark' ? cs.gray45 : cs.gray92,
    neutral400: colorScheme === 'dark' ? cs.gray60 : _tinycolor["default"].mix(cs.gray92, cs.gray80).toRgbString(),
    neutral500: cs.gray80,
    interactiveColorPrimary: cs.brandColor,
    interactiveColorBorder: cs.borderColor,
    spacingXSmall: d.spacingQuarter,
    spacingSmall: d.spacingHalf,
    spacingMedium: "calc(".concat(d.spacing, " * 0.75)"),
    spacingLarge: d.spacing,
    spacingXLarge: "calc(".concat(d.spacing, " * 1.5)"),
    spacingXXLarge: "calc(".concat(d.spacing, " * 2)"),
    spacingXXXLarge: "calc(".concat(d.spacing, " * 2.5)")
  };
  return prismaAliases;
}

var _default = createPrismaAliases;
exports["default"] = _default;