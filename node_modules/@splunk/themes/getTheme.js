"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.clearGetThemeCache = exports["default"] = void 0;

var _memoize = _interopRequireDefault(require("lodash/memoize"));

var _enterprise = _interopRequireDefault(require("./enterprise"));

var _prisma = _interopRequireDefault(require("./prisma"));

var _utils = require("./utils");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

/**
 * **NOTE:** Use cases for this function are limited. Instead, use `useSplunkTheme` in React components and `variables` in styled-components' CSS.
 * This function is for use outside of React and styled-components.
 * @file
 */

/**
 * The `getTheme` function returns all theme variables for a given theme. This function is memoized.
 *
 * ```js
 * import getTheme from '@splunk/themes/getTheme';
 *
 * const baseTheme = getTheme({family: 'prisma', colorScheme: 'light', density: 'compact' });
 *
 * console.log(baseTheme.family, baseTheme.focusColor);
 * ```
 * @param {object} [options] - The attributes of the theme as defined below.
 * @param {'prisma' | 'enterprise'} [options.family = 'prisma']
 * @param {'dark' | 'light'} [options.colorScheme = 'dark']
 * @param {'comfortable' | 'compact'} [options.density = 'comfortable']
 * @param {Boolean} [options.isPrisma = true]
 * @param {Boolean} [options.isEnterprise = false]
 * @param {Boolean} [options.isComfortable = true]
 * @param {Boolean} [options.isCompact = false]
 * @param {Boolean} [options.isDark = true]
 * @param {Boolean} [options.isLight = false]
 * @returns {object} A flat object of all variables and their values.
 * @public
 */
function getTheme() {
  var settings = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  var _addThemeDefaults = (0, _utils.addThemeDefaults)(settings),
      family = _addThemeDefaults.family,
      colorScheme = _addThemeDefaults.colorScheme,
      density = _addThemeDefaults.density;

  var isPrisma = family === 'prisma';
  var isEnterprise = family === 'enterprise';
  var isComfortable = density === 'comfortable';
  var isCompact = density === 'compact';
  var isDark = colorScheme === 'dark';
  var isLight = colorScheme === 'light';
  return Object.freeze(_objectSpread({
    colorScheme: colorScheme,
    density: density,
    family: family,
    isPrisma: isPrisma,
    isEnterprise: isEnterprise,
    isComfortable: isComfortable,
    isCompact: isCompact,
    isDark: isDark,
    isLight: isLight
  }, family === 'enterprise' ? (0, _enterprise["default"])({
    colorScheme: colorScheme,
    density: density
  }) : (0, _prisma["default"])({
    colorScheme: colorScheme,
    density: density
  })));
}

var getThemeMemoized = (0, _memoize["default"])(getTheme, function () {
  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      family = _ref.family,
      colorScheme = _ref.colorScheme,
      density = _ref.density;

  return "".concat(family).concat(colorScheme).concat(density);
});

var clearGetThemeCache = function clearGetThemeCache() {
  var _getThemeMemoized$cac, _getThemeMemoized$cac2;

  return (_getThemeMemoized$cac = (_getThemeMemoized$cac2 = getThemeMemoized.cache).clear) === null || _getThemeMemoized$cac === void 0 ? void 0 : _getThemeMemoized$cac.call(_getThemeMemoized$cac2);
};

exports.clearGetThemeCache = clearGetThemeCache;
var _default = getThemeMemoized;
exports["default"] = _default;