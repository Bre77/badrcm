"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.typographyVariants = exports["default"] = void 0;

var _styledComponents = require("styled-components");

var _lodash = require("lodash");

var _variables = _interopRequireDefault(require("../variables"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _templateObject2() {
  var data = _taggedTemplateLiteral(["\n                    margin: 0;\n                    padding: 0;\n                "]);

  _templateObject2 = function _templateObject2() {
    return data;
  };

  return data;
}

function _templateObject() {
  var data = _taggedTemplateLiteral(["\n        ", "\n\n        color: ", ";\n        font-family: ", ";\n        font-size: ", ";\n        font-weight: ", ";\n        line-height: ", ";\n    "]);

  _templateObject = function _templateObject() {
    return data;
  };

  return data;
}

function _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

var typographyVariants = ['body', 'title1', 'title2', 'title3', 'title4', 'title5', 'title6', 'title7', 'largeBody', 'smallBody', 'footnote', 'monoBody', 'monoSmallBody'];
exports.typographyVariants = typographyVariants;

function isTypographyVariant(s) {
  if (typeof s !== 'string') {
    return false;
  }

  return typographyVariants.includes(s);
}

function getStylesForVariant(variant) {
  var color = _variables["default"].contentColorDefault;
  var family = _variables["default"].fontFamily;
  var lineHeight = _variables["default"].lineHeight; // eslint-disable-line prefer-destructuring

  var size = _variables["default"].fontSize;
  var weight = 'normal';

  switch (variant) {
    case 'title1':
      color = _variables["default"].contentColorActive;
      lineHeight = '40px';
      size = '36px';
      weight = _variables["default"].fontWeightBold;
      break;

    case 'title2':
      color = _variables["default"].contentColorActive;
      lineHeight = '48px';
      size = _variables["default"].fontSizeXXLarge;
      weight = _variables["default"].fontWeightBold;
      break;

    case 'title3':
      color = _variables["default"].contentColorActive;
      lineHeight = '24px';
      size = '20px';
      weight = _variables["default"].fontWeightBold;
      break;

    case 'title4':
      color = _variables["default"].contentColorActive;
      lineHeight = '22px';
      size = _variables["default"].fontSizeLarge;
      weight = _variables["default"].fontWeightBold;
      break;

    case 'title5':
      color = _variables["default"].contentColorActive;
      lineHeight = _variables["default"].lineHeight;
      size = _variables["default"].fontSize;
      weight = _variables["default"].fontWeightBold;
      break;

    case 'title6':
      color = _variables["default"].contentColorActive;
      lineHeight = _variables["default"].lineHeight;
      size = _variables["default"].fontSize;
      weight = _variables["default"].fontWeightSemiBold;
      break;

    case 'title7':
      color = _variables["default"].contentColorActive;
      lineHeight = '16px';
      size = _variables["default"].fontSizeSmall;
      weight = _variables["default"].fontWeightSemiBold;
      break;

    case 'largeBody':
      color = _variables["default"].contentColorDefault;
      lineHeight = '24px';
      size = _variables["default"].fontSizeLarge;
      weight = 'normal';
      break;

    case 'smallBody':
      color = _variables["default"].contentColorDefault;
      lineHeight = '16px';
      size = _variables["default"].fontSizeSmall;
      weight = 'normal';
      break;

    case 'footnote':
      color = _variables["default"].contentColorDefault;
      lineHeight = '13px';
      size = '10px';
      weight = 'normal';
      break;

    case 'monoBody':
      family = _variables["default"].monoFontFamily;
      break;

    case 'monoSmallBody':
      color = _variables["default"].contentColorDefault;
      family = _variables["default"].monoFontFamily;
      lineHeight = '16px';
      size = _variables["default"].fontSizeSmall;
      weight = 'normal';
      break;

    case 'body':
      // Theme defaults set the 'body' style
      break;

    default:
      {
        if (false) {
          // eslint-disable-line no-console
          console.log("Unknown typography variant, ".concat(variant, ". Using default values for theme."));
        } // Make sure this "never" happens https://www.typescriptlang.org/docs/handbook/2/narrowing.html#exhaustiveness-checking


        var exhaustiveCheck = variant;
        return exhaustiveCheck;
      }
  }

  return {
    color: color,
    family: family,
    size: size,
    weight: weight,
    lineHeight: lineHeight,
    withReset: true
  };
}

var colorPropToVariableMap = {
  active: _variables["default"].contentColorActive,
  "default": _variables["default"].contentColorDefault,
  disabled: _variables["default"].contentColorDisabled,
  inverted: _variables["default"].contentColorInverted,
  muted: _variables["default"].contentColorMuted
};
var familyPropToVariableMap = {
  sansSerif: _variables["default"].sansFontFamily,
  monospace: _variables["default"].monoFontFamily
};
/**
 * A mixin for styling text content using predefined typography variants
 * and/or customizing font-settings with system parameters: e.g. size, weight, font-family.
 *
 * The default variant is `body` and will be used if no variant or settings
 * are given: i.e. `typography()` or `typography({})`.
 * Variants have the reset applied by default.
 *
 *  ##### Example
 *  ```js
 *  import styled from 'styled-components';
 *  import { typography } from '@splunk/themes/mixins';
 *
 *  const MyTitle = styled.h1`
 *      ${typography('title1')};
 *  `;
 *
 *  const MyCustomizedTitle = styled.h1`
 *      ${typography('title1', { color: 'inverted' })};
 *  `;
 *
 *  const CustomTitle = styled.h1`
 *      ${typography({size: 56, weight: 'light', color: 'inverted' })};
 *  `;
 *  ```
 * @name typography
 * @kind function
 * @param {string} [variant] Use a predefined typography variant:
 *  `'body'`,
 *  `'title1'`,
 *  `'title2'`,
 *  `'title3'`,
 *  `'title4'`,
 *  `'title5'`,
 *  `'subtitle'`,
 *  `'smallSubtitle'`,
 *  `'largeBody'`,
 *  `'smallBody'`,
 *  `'footnote'`,
 *  `'monoBody'`, or
 *  `'monoSmallBody'`,
 * @param {object} [typographyParams] Customize the font settings or element using system values for: `family`, `size`, `lineHeight`, `color`, and `weight`.
 * Default margin and padding can be removed with `withReset`.
 * @public
 */

function typography(variantOrParams, additionalParams) {
  var variant = isTypographyVariant(variantOrParams) ? variantOrParams : undefined;
  var params;

  if (variant && additionalParams !== undefined) {
    params = additionalParams;
  } else if (variant === undefined && _typeof(variantOrParams) === 'object' && additionalParams === undefined) {
    params = variantOrParams;
  } else {
    params = {};
  }

  var variantParams = variant ? getStylesForVariant(variant) : {}; // Transform params to be ready for css literal below: i.e size="24" -> "24px"

  var transformedParams = _objectSpread(_objectSpread({}, params), {}, {
    size: params.size ? "".concat(params.size, "px") : undefined,
    lineHeight: params.lineHeight ? "".concat(params.lineHeight, "px") : undefined,
    color: params.color ? colorPropToVariableMap[params.color] : undefined,
    family: params.family ? familyPropToVariableMap[params.family] : undefined
  });

  var defaultTypographyParams = {
    color: _variables["default"].contentColorDefault,
    family: _variables["default"].fontFamily,
    size: _variables["default"].fontSize,
    weight: 'normal',
    lineHeight: _variables["default"].lineHeight,
    withReset: false
  };
  var finalParams = (0, _lodash.merge)(defaultTypographyParams, variantParams, transformedParams);
  return function () {
    return (0, _styledComponents.css)(_templateObject(), function () {
      return finalParams.withReset && (0, _styledComponents.css)(_templateObject2());
    }, finalParams.color, finalParams.family, finalParams.size, finalParams.weight, finalParams.lineHeight);
  };
}

var _default = typography;
exports["default"] = _default;