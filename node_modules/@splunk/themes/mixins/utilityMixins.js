"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.clearfix = clearfix;
exports.ellipsis = ellipsis;
exports.printWidth100Percent = printWidth100Percent;
exports.printHide = printHide;
exports.printNoBackground = printNoBackground;
exports.printWrapAll = printWrapAll;
exports.screenReaderContent = screenReaderContent;
exports.overlayColors = overlayColors;
exports.colorWithAlpha = colorWithAlpha;
exports["default"] = exports.reset = void 0;

var _tinycolor = _interopRequireDefault(require("tinycolor2"));

var _styledComponents = require("styled-components");

var _colorBlend = require("color-blend");

var _variables = _interopRequireDefault(require("../variables"));

var _pick = _interopRequireDefault(require("../pick"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _templateObject() {
  var data = _taggedTemplateLiteral(["\n        /* Generic resets */\n        animation: none 0s ease 0s 1 normal none running;\n        backface-visibility: visible;\n        background: transparent none repeat 0 0 / auto auto padding-box border-box scroll;\n        border: medium none currentColor;\n        border-collapse: separate;\n        border-image: none;\n        border-radius: 0;\n        border-spacing: 0;\n        bottom: auto;\n        box-shadow: none;\n        caption-side: top;\n        clear: none;\n        clip: auto;\n        columns: auto;\n        column-count: auto;\n        column-fill: balance;\n        column-gap: normal;\n        column-rule: medium none currentColor;\n        column-span: 1;\n        column-width: auto;\n        content: normal;\n        counter-increment: none;\n        counter-reset: none;\n        empty-cells: show;\n        float: none;\n        font-style: normal;\n        font-variant: normal;\n        font-weight: normal;\n        font-stretch: normal;\n        height: auto;\n        hyphens: none;\n        left: auto;\n        letter-spacing: normal;\n        list-style: disc outside none;\n        margin: 0;\n        max-height: none;\n        max-width: none;\n        min-height: 0;\n        min-width: 0;\n        opacity: 1;\n        orphans: 2;\n        overflow: visible;\n        overflow-x: visible;\n        overflow-y: visible;\n        padding: 0;\n        page-break-after: auto;\n        page-break-before: auto;\n        page-break-inside: auto;\n        perspective: none;\n        perspective-origin: 50% 50%;\n        pointer-events: auto;\n        position: static;\n        right: auto;\n        tab-size: 8;\n        table-layout: auto;\n        text-align: left;\n        text-align-last: auto;\n        text-decoration: none;\n        text-indent: 0;\n        text-shadow: none;\n        text-transform: none;\n        top: auto;\n        transform: none;\n        transform-origin: 50% 50% 0;\n        transform-style: flat;\n        transition: none 0s ease 0s;\n        user-select: auto;\n        vertical-align: baseline;\n        white-space: normal;\n        widows: 2;\n        width: auto;\n        word-spacing: normal;\n        z-index: auto;\n        /* Splunk-specific resets */\n        border-width: 1px;\n        box-sizing: border-box;\n        color: ", ";\n        cursor: inherit;\n        display: ", ";\n        font-family: ", ";\n        font-size: ", ";\n        line-height: ", ";\n        outline: medium none ", ";\n        visibility: inherit;\n    "]);

  _templateObject = function _templateObject() {
    return data;
  };

  return data;
}

function _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

/**
 * @file
 * A collection of style-related helper functions. All of them return a single object containing
 * DOM CSS properties, for example: `{ display: …, fontFamily: … }`.
 */

/**
 * The `reset` mixin resets css properties to their browser defaults, plus many to
 * theme-specific values. This ensures an element is not inheriting inappropriate styles.
 *
 *  ##### Example
 *  ```js
 *  import styled from 'styled-components';
 *  import { reset } from '@splunk/themes/mixins';
 *
 *  const myBlock = styled.div`
 *      ${reset('block')};
 *  `
 *  ```
 * @name reset
 * @kind function
 * @param {string} [display=inline] Set the `display` property (block, inline-block, …)
 * @public
 */
var reset = function reset() {
  var display = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'inline';
  return function () {
    return (0, _styledComponents.css)(_templateObject(), (0, _pick["default"])({
      enterprise: _variables["default"].textColor,
      prisma: _variables["default"].contentColorDefault
    }), display, _variables["default"].fontFamily, _variables["default"].fontSize, _variables["default"].lineHeight, _variables["default"].focusColor);
  };
};
/**
 * `clearfix` is used on a container to ensure its height is at least as tall as any floating
 * children.
 *
 *  ##### Example
 *  ```js
 *  import styled from 'styled-components';
 *  import { clearfix } from '@splunk/themes/mixins';
 *
 *  const myBlock = styled.div`
 *      ${clearfix()};
 *  `
 *  ```
 * @public
 */


exports.reset = reset;

function clearfix() {
  return {
    '&::after': {
      display: 'table',
      content: '""',
      clear: 'both'
    }
  };
}
/**
 * Use `ellipsis` for overflowing text. Requires `display` to be set to `inline-block` or `block`.
 *
 *  ##### Example
 *  ```js
 *  import styled from 'styled-components';
 *  import { ellipsis } from '@splunk/themes/mixins';
 *
 *  const myBlock = styled.div`
 *      ${clearfix()};
 *      width: 300px;
 *  `
 *  ```
 * @public
 */


function ellipsis() {
  return {
    overflow: 'hidden',
    textOverflow: 'ellipsis',
    whiteSpace: 'nowrap'
  };
}
/**
 * Force an element to be exactly 100% wide so that it doesn't overflow the page.
 *
 *  ##### Example
 *  ```js
 *  import styled from 'styled-components';
 *  import { printWidth100Percent } from '@splunk/themes/mixins';
 *
 *  const myBlock = styled.div`
 *      @media print {
 *          .myElement {
 *             ${printWidth100Percent()};
 *          }
 *      }
 *  }
 *  `
 *  ```
 *  @public
 */


function printWidth100Percent() {
  return {
    maxWidth: '100% !important',
    width: '100% !important',
    overflow: 'hidden !important'
  };
}
/**
 * Hide an element (such as a button).
 *
 *  ##### Example
 *  ```js
 *  import styled from 'styled-components';
 *  import { printHide } from '@splunk/themes/mixins';
 *
 *  const myBlock = styled.div`
 *      @media print {
 *          .myElement {
 *              ${printHide()};
 *          }
 *      }
 *  }
 *  ```
 * @public
 */


function printHide() {
  return {
    display: 'none !important'
  };
}
/**
 * Remove background gradients and images.
 *
 *  ##### Example
 *  ```js
 *  import styled from 'styled-components';
 *  import { printNoBackground } from '@splunk/themes/mixins';
 *
 *  const myBlock = styled.div`
 *      @media print {
 *          .myElement {
 *              ${printNoBackground()};
 *          }
 *      }
 *  }
 *  ```
 * @public
 */


function printNoBackground() {
  return {
    background: 'none !important'
  };
}
/**
 * Ensure that all text wraps so that it doesn't overflow the page.
 *
 *  ##### Example
 *  ```js
 *  import styled from 'styled-components';
 *  import { printWrapAll } from '@splunk/themes/mixins';
 *
 *  const myBlock = styled.div`
 *      @media print {
 *          .myElement {
 *              ${printWrapAll()};
 *          }
 *      }
 *  }
 *  ```
 * @public
 */


function printWrapAll() {
  // TS: have to assert as CSSObject because csstype doesn't allow !important
  return {
    wordBreak: 'break-all !important',
    wordWrap: 'break-word !important',
    overflowWrap: 'break-word !important',
    whiteSpace: 'normal !important'
  };
}
/**
 * Visually hide content. Typically used to target content for assistive technologies.
 *
 *  ##### Example
 *  ``` js
 *  import screenReaderContent from '@splunk/themes/mixins';
 *
 *  .myElement {
 *      ${props => props.theme.mixins.screenReaderContent()};
 *  }
 *  ```
 * @public
 */


function screenReaderContent() {
  return {
    position: 'absolute',
    overflow: 'hidden',
    clip: 'rect(0 0 0 0)',
    height: '1px',
    width: '1px',
    margin: '-1px',
    padding: 0,
    border: 0
  };
}

/**
 * Calculates how one color would appear over another using a normal blend mode.
 * Colors can either be strings or functions, such as variable functions.
 *
 *  ##### Example
 *  ```js
 *  import styled from 'styled-components';
 *  import { overlayColors } from '@splunk/themes/mixins';
 *  import { interactiveColorPrimary, interactiveColorOverlaySelected } from '@splunk/themes/variables';
 *
 *  const myButton = styled.button`
 *      background: ${overlayColors(interactiveColorPrimary, interactiveColorOverlaySelected)};
 *  `
 *  ```
 * @name overlayColors
 * @kind function
 * @param {string|function} background
 * @param {string|function} foreground The color to overlay over the background.
 * @public
 */
function overlayColors(c1, c2) {
  return function (props) {
    var c1Value = typeof c1 === 'function' ? c1(props) : c1;
    var c2Value = typeof c2 === 'function' ? c2(props) : c2;
    var c3 = (0, _colorBlend.normal)((0, _tinycolor["default"])(c1Value).toRgb(), (0, _tinycolor["default"])(c2Value).toRgb());
    return (0, _tinycolor["default"])(c3).toRgbString();
  };
}
/**
 * Sets the alpha value on a given color.
 *
 *  ##### Example
 *  ```js
 *  import styled from 'styled-components';
 *  import { colorWithAlpha } from '@splunk/themes/mixins';
 *  import { interactiveColorPrimary } from '@splunk/themes/variables';
 *
 *  const myButton = styled.button`
 *      background: ${colorWithAlpha(interactiveColorPrimary, 0.5)};
 *  `
 *  ```
 * @name colorWithAlpha
 * @kind function
 * @param {string|function} color
 * @param {number} alpha The alpha value accepts range between 0-1.
 * @public
 */


function colorWithAlpha(color, alpha) {
  return function (props) {
    var colorValue = typeof color === 'function' ? color(props) : color;

    if (false && (alpha < 0 || alpha > 1)) {
      // eslint-disable-next-line no-console
      console.warn("The alpha value \"".concat(alpha, "\" is not within acceptable 0-1 range."));
    }

    return (0, _tinycolor["default"])(colorValue).setAlpha(alpha).toRgbString();
  };
}

var _default = {
  reset: reset,
  clearfix: clearfix,
  ellipsis: ellipsis,
  printWidth100Percent: printWidth100Percent,
  printHide: printHide,
  printNoBackground: printNoBackground,
  printWrapAll: printWrapAll,
  screenReaderContent: screenReaderContent,
  colorWithAlpha: colorWithAlpha,
  overlayColors: overlayColors
};
exports["default"] = _default;