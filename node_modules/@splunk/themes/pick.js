"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isInterpolationResult = isInterpolationResult;
exports["default"] = exports.getThemeVariant = void 0;

var _utils = require("./utils");

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

var valueToKey = {
  enterprise: 'family',
  prisma: 'family',
  light: 'colorScheme',
  dark: 'colorScheme',
  compact: 'density',
  comfortable: 'density'
};

function isInterpolationResult(tree) {
  // for this to work as expected for objects/CSSProperties, it may be necessary to change
  // it to only consider objects that have valid pick tree keys (but no other keys)
  // as trees
  return _typeof(tree) !== 'object' || Array.isArray(tree) || tree === null;
}
/**
 * This function is exported for use in pickVariant exclusively.
 */


var getThemeVariant = function getThemeVariant(tree, theme) {
  // If it's not an object with one of the six keys, it must be an end value.
  var treeKey = Object.keys(tree).shift();

  if (!treeKey) {
    throw new Error('A pick tree cannot be empty.');
  }

  var themeKey = valueToKey[treeKey];

  if (!themeKey) {
    throw new Error("Invalid pick tree key: ".concat(treeKey));
  } // Recursively crawl the tree.


  var themeCurrentValue = theme[themeKey];
  var treeValue = tree[themeCurrentValue]; // If it's not an object or it's a null value, it must be the end value.

  if (isInterpolationResult(treeValue)) {
    return treeValue; // this may be undefined, when the css does not support the theme
  }

  return getThemeVariant(treeValue, theme);
};
/**
 * Pick is used to create theme-specific css.
 *
 * This example selects an appropriate variable for the current theme.
 * ```
 * import { pick, variables } from '@splunk/themes';
 *
 * const Wrapper = styled.div`
 *      color: ${pick({
 *          enterprise: {
 *              light: variables.grey35,
 *              dark:  variables.grey92,
 *          },
 *          prisma: variables.contentColorDefault,
 *      })}
 * `;
 * ```
 * This example selects an appropriate block of css for the current theme.
 * ```
 *  const Label = styled.div`
 *      ${pick({
 *          enterprise: css`
 *              font-weight: ${variables.fontWeightSemiBold};
 *          `,
 *          prisma: css`
 *              color: ${variables.contentColorDefault),
 *          `,
 *      })}
 * `;
 * ```
 * @param {object} themeOptions - An object consisting of a tree of theme options (`enterprise|prisma`, `light|dark`, or `compact|comfortable`).
 * @returns {function} The returned function is called by `styled-components`, which provides the theme context.
 * @public
 */


exports.getThemeVariant = getThemeVariant;

var pick = function pick(tree) {
  return function (_ref) {
    var theme = _ref.theme;
    var themeCleaned = (0, _utils.addThemeDefaults)(theme === null || theme === void 0 ? void 0 : theme.splunkThemeV1);
    return getThemeVariant(tree, themeCleaned);
  };
};

var _default = pick;
exports["default"] = _default;