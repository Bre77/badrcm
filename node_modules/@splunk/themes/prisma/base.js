"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _tinycolor = _interopRequireDefault(require("tinycolor2"));

var _dataViz = _interopRequireDefault(require("./dataViz"));

var _light = _interopRequireDefault(require("./light"));

var _dark = _interopRequireDefault(require("./dark"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types
function createPrismaBase(_ref) {
  var colorScheme = _ref.colorScheme;
  var colorSchemeVars = {
    light: _light["default"],
    dark: _dark["default"]
  }[colorScheme];
  /**
   * ## Misc. colors
   *
   * @colorSet verbose
   */

  var usageColors = {
    focusColor: (0, _tinycolor["default"])(colorSchemeVars.interactiveColorPrimary).setAlpha(0.7).toRgbString(),
    transparent: 'transparent',
    linkColor: colorSchemeVars.interactiveColorPrimary
  };
  /**
   * ## Interactive state shadows
   *
   * @shadowSet
   *
   */

  var shadows = {
    hoverShadow: "0 0 0 2px ".concat(colorSchemeVars.backgroundColorPage, ", 0 0 0 5px ").concat(colorSchemeVars.interactiveColorOverlayHover),
    focusShadow: "0 0 0 2px ".concat(colorSchemeVars.backgroundColorPage, ", 0 0 0 5px ").concat(usageColors.focusColor),
    focusShadowInset: "inset 0 0 0 3px ".concat(usageColors.focusColor)
  };
  /**
   * ## Backgrounds
   *
   * @colorSet verbose
   */

  var backgrounds = {
    draggableBackground: "radial-gradient(circle at 1px 1px, ".concat(colorSchemeVars.contentColorMuted, ", ").concat(colorSchemeVars.contentColorMuted, " 1px, transparent 1px) 0 0 / 4px 6px")
  };
  var sansFontFamily = "'Splunk Platform Sans', 'Splunk Data Sans', Roboto, Droid, 'Helvetica Neue', Helvetica, Arial, sans-serif";
  /**
   * ## Fonts
   *
   * @valueSet
   */

  var fonts = {
    sansFontFamily: sansFontFamily,
    serifFontFamily: "Georgia, 'Times New Roman', Times, serif",
    monoFontFamily: "'Splunk Platform Mono', 'Roboto Mono', Consolas, 'Droid Sans Mono', Monaco, 'Courier New', Courier, monospace",
    fontFamily: sansFontFamily,
    fontWeightBold: '700',
    fontWeightSemiBold: '500'
  };
  /**
   * ## Layers
   * If a variable does not suit your purpose, set a value relatively, such as zindexModal +1.
   *
   * @valueSet
   */

  var zindexes = {
    zindexLayer: 1000,
    zindexFixedNavbar: 1030,
    zindexModalBackdrop: 1040,
    zindexModal: 1050,
    zindexPopover: 1060,
    zindexToastMessages: 2000
  };
  return _objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread({}, fonts), usageColors), _dataViz["default"]), shadows), backgrounds), zindexes);
}

var _default = createPrismaBase;
exports["default"] = _default;