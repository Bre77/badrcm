"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

/**
 * ## Background colors
 * Background colors should be used only for backgrounds of higher level sections & containers of a UI.
 *
 * @colorSet verbose
 */
var backgroundColors = {
  backgroundColorPopup: '#27292e',
  backgroundColorSection: '#1a1c20',
  backgroundColorSidebar: '#0b0c0e',
  backgroundColorPage: '#111215',
  backgroundColorNavigation: '#08090a',
  backgroundColorFloating: '#ffffff',
  backgroundColorDialog: '#1e2024',
  backgroundColorScrim: 'rgba(0, 0, 0, 0.8)'
};
/**
 * ## Content colors
 * Content colors should be used for text, icons and dividers.
 *
 * @colorSet verbose
 */

var contentColors = {
  contentColorActive: '#fafafa',
  contentColorDefault: '#b5b5b5',
  contentColorDisabled: '#6b6b6b',
  contentColorInverted: '#000000',
  contentColorMuted: '#909090'
};
/**
 * ## Interactive colors
 * Interactive colors are specifically chosen for borders and backgrounds of controls and other interactive content.
 * "Overlay" colors are intended to be placed over the default background color, such as interactiveColorPrimary.
 * If the default background color is not transparent, the `blend` mixin can be used to create a new color that combines the two.
 *
 * @colorSet verbose
 */

var interactiveColors = {
  interactiveColorPrimary: '#3993FF',
  interactiveColorBorder: 'rgba(255, 255, 255, 0.5)',
  interactiveColorBorderHover: 'rgba(255, 255, 255, 0.7)',
  interactiveColorBorderDisabled: 'rgba(255, 255, 255, 0.30)',
  interactiveColorOverlaySelected: 'rgba(255, 255, 255, 0.1)',
  interactiveColorOverlayHover: 'rgba(255, 255, 255, 0.05)',
  interactiveColorOverlayActive: 'rgba(0, 0, 0, 0.2)',
  interactiveColorOverlayDrag: 'rgba(57, 147, 255, 0.16)',
  interactiveColorBackground: '#272a2f',
  interactiveColorBackgroundDisabled: 'rgba(255, 255, 255, 0.15)'
};
/**
 * ## Neutral colors
 * Neutrals are used for dividers and as backup colors that can sparingly be used for cases, when the other defined colors are not enough.
 *
 * @colorSet verbose
 */

var neutralColors = {
  black: '#000000',
  neutral100: '#33343b',
  neutral200: '#43454b',
  neutral300: '#505158',
  neutral400: '#818285',
  neutral500: '#acacad',
  white: '#ffffff'
};
/**
 * ## Accent colors
 * Accent colors aid and categorize the visual communication of the system response.
 *
 * @colorSet verbose
 */

var accentColors = {
  accentColorPositive: '#85f415',
  accentColorWarning: '#f49106',
  accentColorAlert: '#f0581f',
  accentColorNegative: '#ff4242'
};
/**
 * ## Status colors
 * Status colors are reserved for communicating urgency and severity associated with data objects.
 *
 * @colorSet verbose
 */

var statusColors = {
  statusColorInfo: '#61cafa',
  statusColorNormal: '#85f415',
  statusColorLow: '#2cbda3',
  statusColorMedium: '#f49106',
  statusColorHigh: '#ff4242',
  statusColorCritical: '#ff3361'
};
/**
 * ## Elevation shadows
 *
 * @shadowSet
 *
 */

var elevationShadows = {
  embossShadow: '0px 1px 5px rgba(0, 0, 0, 0.35), 0px 0px 1px rgba(0, 0, 0, 0.35)',
  overlayShadow: '0px 26px 103px rgba(0, 0, 0, 0.64), 0px 11px 18px rgba(0, 0, 0, 0.32), 0px 3px 6px rgba(0, 0, 0, 0.3)',
  dragShadow: '0px 26px 103px rgba(0, 0, 0, 0.64), 0px 11px 18px rgba(0, 0, 0, 0.32), 0px 3px 6px rgba(0, 0, 0, 0.3)',
  modalShadow: '0px 50px 200px #000000, 0px 29px 66px rgba(0, 0, 0, 0.41), 0px 14px 47px rgba(0, 0, 0, 0.17), 0px 5px 10px rgba(0, 0, 0, 0.15)'
};
/**
 * ## Syntax colors
 * Syntax colors are used only for code blocks.
 *
 * @colorSet verbose alphabetical
 */

var syntaxColors = {
  syntaxBlue: '#6cd0f0',
  syntaxBrown: '#fccf87',
  syntaxGray: '#7d7d7d',
  syntaxGreen: '#cef06c',
  syntaxOrange: '#f7933f',
  syntaxPink: '#f494e5',
  syntaxPurple: '#a870ef',
  syntaxRed: '#e85b79',
  syntaxTeal: '#45d4ba'
};

var theme = _objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread({}, accentColors), statusColors), elevationShadows), backgroundColors), contentColors), neutralColors), interactiveColors), syntaxColors);

var _default = theme;
exports["default"] = _default;