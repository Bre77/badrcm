import { AnyTheme, Interpolation, ThemedProps } from '../types';
declare const typographyVariants: readonly ["body", "title1", "title2", "title3", "title4", "title5", "title6", "title7", "largeBody", "smallBody", "footnote", "monoBody", "monoSmallBody"];
declare type TypographyVariant = typeof typographyVariants[number];
interface TypographyParams {
    /**
     * Set the font-family to sans-serif or monospace based on current theme.
     */
    family?: 'sansSerif' | 'monospace';
    /**
     * Set the size to a system-standard size.
     */
    size?: 56 | 36 | 32 | 24 | 20 | 18 | 16 | 14 | 12 | 10;
    /**
     * Set the line-height to a system-standard size.
     */
    lineHeight?: 64 | 40 | 32 | 28 | 24 | 22 | 20 | 16 | 13;
    /**
     * Set the color to a system-standard color: e.g. `active` for `@splunk/themes/variables.contentColorActive`.
     */
    color?: 'active' | 'default' | 'disabled' | 'inverted' | 'muted';
    /**
     * Set the font-weight to a system-standard value.
     *
     * Number or equivalent string can be used.
     * See: [font-weight | MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/font-weight)
     */
    weight?: 300 | 400 | 500 | 600 | 700 | 800 | 900 | 'light' | 'normal' | 'semiBold' | 'bold' | 'extraBold' | 'heavy';
    /**
     * Apply a reset to the element's margin and padding. This defaults to true if using a `variant`.
     */
    withReset?: boolean;
}
/**
 * A mixin for styling text content using predefined typography variants
 * and/or customizing font-settings with system parameters: e.g. size, weight, font-family.
 *
 * The default variant is `body` and will be used if no variant or settings
 * are given: i.e. `typography()` or `typography({})`.
 * Variants have the reset applied by default.
 *
 *  ##### Example
 *  ```js
 *  import styled from 'styled-components';
 *  import { typography } from '@splunk/themes/mixins';
 *
 *  const MyTitle = styled.h1`
 *      ${typography('title1')};
 *  `;
 *
 *  const MyCustomizedTitle = styled.h1`
 *      ${typography('title1', { color: 'inverted' })};
 *  `;
 *
 *  const CustomTitle = styled.h1`
 *      ${typography({size: 56, weight: 'light', color: 'inverted' })};
 *  `;
 *  ```
 * @name typography
 * @kind function
 * @param {string} [variant] Use a predefined typography variant:
 *  `'body'`,
 *  `'title1'`,
 *  `'title2'`,
 *  `'title3'`,
 *  `'title4'`,
 *  `'title5'`,
 *  `'subtitle'`,
 *  `'smallSubtitle'`,
 *  `'largeBody'`,
 *  `'smallBody'`,
 *  `'footnote'`,
 *  `'monoBody'`, or
 *  `'monoSmallBody'`,
 * @param {object} [typographyParams] Customize the font settings or element using system values for: `family`, `size`, `lineHeight`, `color`, and `weight`.
 * Default margin and padding can be removed with `withReset`.
 * @public
 */
declare function typography<T extends AnyTheme, A extends ThemedProps>(): Interpolation<T, A>;
declare function typography<T extends AnyTheme, A extends ThemedProps>(variant: TypographyVariant): Interpolation<T, A>;
declare function typography<T extends AnyTheme, A extends ThemedProps>({ family, size, lineHeight, color, weight, withReset, }: TypographyParams): Interpolation<T, A>;
declare function typography<T extends AnyTheme, A extends ThemedProps>(variant: TypographyVariant, additionalParams: TypographyParams): Interpolation<T, A>;
export default typography;
export { typographyVariants, TypographyVariant, TypographyParams };
