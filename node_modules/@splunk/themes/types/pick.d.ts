import { AnyTheme, Interpolation, InterpolationResult, ThemeSettings, Tree, TreeOrInterpolationResult } from './types';
export declare function isInterpolationResult<T extends AnyTheme, A extends object>(tree?: TreeOrInterpolationResult<T, A>): tree is InterpolationResult<T, A>;
/**
 * This function is exported for use in pickVariant exclusively.
 */
export declare const getThemeVariant: <T extends AnyTheme, A extends object>(tree: Tree<T, A>, theme: ThemeSettings<T>) => InterpolationResult<T, A>;
/**
 * Pick is used to create theme-specific css.
 *
 * This example selects an appropriate variable for the current theme.
 * ```
 * import { pick, variables } from '@splunk/themes';
 *
 * const Wrapper = styled.div`
 *      color: ${pick({
 *          enterprise: {
 *              light: variables.grey35,
 *              dark:  variables.grey92,
 *          },
 *          prisma: variables.contentColorDefault,
 *      })}
 * `;
 * ```
 * This example selects an appropriate block of css for the current theme.
 * ```
 *  const Label = styled.div`
 *      ${pick({
 *          enterprise: css`
 *              font-weight: ${variables.fontWeightSemiBold};
 *          `,
 *          prisma: css`
 *              color: ${variables.contentColorDefault),
 *          `,
 *      })}
 * `;
 * ```
 * @param {object} themeOptions - An object consisting of a tree of theme options (`enterprise|prisma`, `light|dark`, or `compact|comfortable`).
 * @returns {function} The returned function is called by `styled-components`, which provides the theme context.
 * @public
 */
declare const pick: <A extends object, T extends AnyTheme = AnyTheme>(tree: Tree<T, A>) => Interpolation<T, A>;
export default pick;
