import React from 'react';
import { AnyTheme } from './types';
declare type DistributiveOmit<T, K extends keyof T> = T extends unknown ? Omit<T, K> : never;
export interface SplunkThemeProps<T extends AnyTheme> {
    splunkTheme: T;
}
declare type WithoutSplunkThemeProps<P extends SplunkThemeProps<T>, T extends AnyTheme> = DistributiveOmit<P, keyof SplunkThemeProps<T>>;
declare function withSplunkTheme<C extends React.ComponentClass<P>, P extends SplunkThemeProps<T>, T extends AnyTheme = AnyTheme>(Component: C): React.ForwardRefExoticComponent<WithoutSplunkThemeProps<JSX.LibraryManagedAttributes<C, P> & {
    ref?: React.Ref<InstanceType<typeof Component>>;
}, T>>;
declare function withSplunkTheme<P extends SplunkThemeProps<T> & {
    ref?: React.Ref<unknown>;
}, T extends AnyTheme = AnyTheme>(Component: React.ForwardRefExoticComponent<P>): React.ForwardRefExoticComponent<WithoutSplunkThemeProps<P, T>>;
export default withSplunkTheme;
