"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.clearVariablesCache = exports["default"] = void 0;

var _memoize = _interopRequireDefault(require("lodash/memoize"));

var _getTheme = _interopRequireDefault(require("./getTheme"));

var _utils = require("./utils");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

/**
 * @file
 * ## Theme Variables
 * All variables are available in one util for use in styled-component templates.
 * Each variable is a function which styled-components will call with the available theme information.
 * If there is no SplunkThemeProvider, variables will default to Prisma Dark Comfortable.
 *
 * Variables will return `undefined` if the variable does not exist in the current theme.
 * ```
 * import variables from '@splunk/themes/variables';
 * import styled from 'styled-components';
 * ...
 * const PrismaWrapper = styled.div`
 *     color: ${variables.contentColorDefault};
 * `;
 * ```
 *
 * Variables may also be imported individually.
 * ```
 * import { contentColorDefault } from '@splunk/themes/variables';
 * import styled from 'styled-components';
 * ...
 * const PrismaWrapper = styled.div`
 *     color: ${contentColorDefault};
 * `;
 * ```
 *
 * This function must be used in conjunction with `pick` if different variables are needed in different themes.
 * ```
 * import { pick, variables } from '@splunk/themes';
 * import styled from 'styled-components';
 *
 * const Wrapper = styled.div`
 *     color: ${pick({
 *          enterprise: variables.textColor,
 *          prisma: variables.contentColorDefault
 *     });
 * `;
 * ```
 * ## Custom Variables
 * Custom variables cannot be added to this package. However, `pick()` can be used to create sets of
 * theme variables. These can be then be imported separately and used as above.
 * ```
 * import pick from '@splunk/themes/pick';
 *
 * export const myVariables = {
 *    orange: pick({
 *        light: '#C80',
 *        dark: '#F90',
 *    }),
 *    space: pick({
 *        enterprise: '20px',
 *        prisma: {
 *            comfortable: '16px',
 *            compact: '12px',
 *        },
 *    }),
 * };
 * ```
 */
var getThemeVariable = function getThemeVariable(name, settings, customizer) {
  var theme = (0, _utils.getCustomizedTheme)(settings, customizer);
  var returnValue = theme[name];

  if (false && typeof returnValue === 'undefined') {
    // eslint-disable-next-line no-console
    console.warn("The variable '".concat(name, "' does not exist in the theme '").concat(theme.family, " ").concat(theme.colorScheme, " ").concat(theme.density, "'."));
  }

  return returnValue;
};

var getThemeVariableMemoized = (0, _memoize["default"])(getThemeVariable, function (name, _ref, customizer) {
  var family = _ref.family,
      colorScheme = _ref.colorScheme,
      density = _ref.density;
  return "".concat(name, "-").concat(family, "-").concat(colorScheme, "-").concat(density, "-").concat(!!customizer);
});

var clearVariablesCache = function clearVariablesCache() {
  var _getThemeVariableMemo, _getThemeVariableMemo2;

  return (_getThemeVariableMemo = (_getThemeVariableMemo2 = getThemeVariableMemoized.cache).clear) === null || _getThemeVariableMemo === void 0 ? void 0 : _getThemeVariableMemo.call(_getThemeVariableMemo2);
};
/**
 * The `get` helper will insert a theme variable into a `styled-components` css template.
 * Note, this will return `undefined` if the variable does not exist in the current theme.
 * This function must be used in conjunction with `pick` if different variables are needed in different themes.
 * ```
 * import get from '@splunk/themes/get';
 * ...
 * const Wrapper = styled.div`
 *     color: ${get('contentColorDefaultDefault')}; // prisma theme only
 * `;
 * ```
 * @param {string} name - The name of the variable to get from the current theme configuration.
 * @returns {function} The returned function is called by `styled-components`, which provides the theme context.
 * @private
 */


exports.clearVariablesCache = clearVariablesCache;

var get = function get(name) {
  return function (_ref2) {
    var _ref2$theme = _ref2.theme;
    _ref2$theme = _ref2$theme === void 0 ? {} : _ref2$theme;
    var splunkThemeV1 = _ref2$theme.splunkThemeV1;

    var _ref3 = splunkThemeV1 || {},
        family = _ref3.family,
        colorScheme = _ref3.colorScheme,
        density = _ref3.density,
        customizer = _ref3.customizer;

    return getThemeVariableMemoized(name, {
      family: family,
      colorScheme: colorScheme,
      density: density
    }, customizer);
  };
};

var variableNames = Object.keys(_objectSpread(_objectSpread({}, (0, _getTheme["default"])({
  family: 'prisma'
})), (0, _getTheme["default"])({
  family: 'enterprise'
}))); // each variable is converted to a get() function.
// TS: The AllVariables type allows safe access to all variables shared across themes,
// and unsafe access to variables exclusive to Enterprise or Prisma

var variables = variableNames.reduce(function (acc, currentValue) {
  // using defineProperty instead of acc[currentValue] to work around readonly issue
  Object.defineProperty(acc, currentValue, {
    value: get(currentValue)
  });
  return acc;
}, {});
var _default = variables;
exports["default"] = _default;