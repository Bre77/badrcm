"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _react = _interopRequireWildcard(require("react"));

var _styledComponents = require("styled-components");

var _utils = require("./utils");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

// implementation for both

/**
 * `withSplunkTheme` allows theme variables to be used within a React class component.
 * This includes the basic configuration of `family`, `colorScheme` and `density`,
 * as well as all the specific variables available in that theme.
 *
 * If no data `SplunkThemeProvider` was configured, the Prisma Dark Comfortable theme is returned.
 *
 * ```
 * import React, { Component } from 'react';
 * import PropTypes from 'prop-types';
 * import withSplunkTheme from '@splunk/themes/withSplunkTheme';
 *
 *
 * class MyComponent extends Component {
 *     static propTypes = {
 *         splunkTheme: PropTypes.object,
 *     };
 *
 *     render() {
 *         const { isComfortable, focusColor } = this.props.splunkTheme;
 *
 *         const style = {
 *             color: focusColor,
 *             padding: isComfortable ? '10px' : '5px',
 *         }
 *
 *         return (
 *             <div style={style}>
 *                 Hello
 *             </div>
 *         )
 *     }
 * }
 *
 * const MyComponentWithTheme = withSplunkTheme(MyComponent);
 * MyComponentWithTheme.propTypes = MyComponent.propTypes;
 *
 * export default MyComponentWithTheme;
 *
 * ```
 * @name withSplunkTheme
 * @function
 * @public
 */
function withSplunkTheme( // eslint-disable-line @typescript-eslint/explicit-module-boundary-types
Component) {
  var ComponentWithSplunkTheme = /*#__PURE__*/_react["default"].forwardRef(function (props, ref) {
    var _ref = (0, _react.useContext)(_styledComponents.ThemeContext) || {},
        splunkThemeV1 = _ref.splunkThemeV1,
        rest = _objectWithoutProperties(_ref, ["splunkThemeV1"]);

    var _ref2 = splunkThemeV1 || {},
        family = _ref2.family,
        colorScheme = _ref2.colorScheme,
        density = _ref2.density,
        customizer = _ref2.customizer;

    var themeSettings = (0, _utils.addThemeDefaults)({
      family: family,
      colorScheme: colorScheme,
      density: density
    });

    var splunkTheme = _objectSpread(_objectSpread({}, rest), (0, _utils.getCustomizedTheme)(themeSettings, customizer));

    return /*#__PURE__*/_react["default"].createElement(Component, _extends({}, props, {
      ref: ref,
      splunkTheme: splunkTheme
    }));
  });

  var displayName = Component.displayName || Component.name || 'Component';
  ComponentWithSplunkTheme.displayName = "withSplunkTheme(".concat(displayName, ")");
  return ComponentWithSplunkTheme;
} // see https://github.com/Microsoft/TypeScript/issues/28938 for the two "as T" assertions above


var _default = withSplunkTheme;
exports["default"] = _default;