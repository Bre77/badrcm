"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.expandShortHandHex = expandShortHandHex;
exports.isValidHexColor = isValidHexColor;
exports.isCSSColor = isCSSColor;
exports.extendedColorKeywords = void 0;

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

/* eslint-disable import/prefer-default-export */

/**
 * @file
 * A set of functions for Color.
 */

/**
 * Converts shorthand hex color value to the equivalent six-digit hexadecimal value.
 *
 *
 * @param {String|null|undefined} value - Three-digit or four-digit shorthand hexadecimal value to be converted.
 * @returns {String|null|undefined} value - If valid three or four-digit shorthand hexadecimal value, returns
 * converted six-digit or eight-digit code; original value otherwise.
 * @public
 */
function expandShortHandHex(value) {
  if (typeof value === 'string') {
    var startsWithPound = value.startsWith('#');
    var valueWithoutPound = startsWithPound ? value.slice(1) : value;
    var isShorthanded = /^[0-9A-F]{3,4}$/i.test(valueWithoutPound);

    var _valueWithoutPound = _slicedToArray(valueWithoutPound, 4),
        r = _valueWithoutPound[0],
        g = _valueWithoutPound[1],
        b = _valueWithoutPound[2],
        _valueWithoutPound$ = _valueWithoutPound[3],
        a = _valueWithoutPound$ === void 0 ? '' : _valueWithoutPound$;

    var sixHexadecimal = isShorthanded ? "".concat(r).concat(r).concat(g).concat(g).concat(b).concat(b).concat(a).concat(a) : valueWithoutPound;
    return startsWithPound ? "#".concat(sixHexadecimal) : sixHexadecimal;
  }

  return value;
}
/**
 * Returns true when `value` is a valid `<hex-color>`.
 * `<hex-color>`s are strings that can be 3, 4, 6, or 8 digits and must start with `#`.
 *
 * @param {string} value
 * @returns {boolean}
 * @public
 */


function isValidHexColor(value) {
  return /(^#[0-9a-f]{3}$)|(^#[0-9a-f]{6}$)|(^#[0-9a-f]{4}$)|(^#[0-9a-f]{8}$)/i.test(value.toString().toLowerCase());
}
/**
 * `Array` containing `string`s of the [named colors](https://www.w3.org/TR/css-color-4/#named-colors) from [CSS Color Module 4](https://www.w3.org/TR/css-color-4).
 * @public
 */


var extendedColorKeywords = ['aliceblue', 'antiquewhite', 'aqua', 'aquamarine', 'azure', 'beige', 'bisque', 'black', 'blanchedalmond', 'blue', 'blueviolet', 'brown', 'burlywood', 'cadetblue', 'chartreuse', 'chocolate', 'coral', 'cornflowerblue', 'cornsilk', 'crimson', 'cyan', 'darkblue', 'darkcyan', 'darkgoldenrod', 'darkgray', 'darkgreen', 'darkgrey', 'darkkhaki', 'darkmagenta', 'darkolivegreen', 'darkorange', 'darkorchid', 'darkred', 'darksalmon', 'darkseagreen', 'darkslateblue', 'darkslategray', 'darkslategrey', 'darkturquoise', 'darkviolet', 'deeppink', 'deepskyblue', 'dimgray', 'dimgrey', 'dodgerblue', 'firebrick', 'floralwhite', 'forestgreen', 'fuchsia', 'gainsboro', 'ghostwhite', 'gold', 'goldenrod', 'gray', 'green', 'greenyellow', 'grey', 'honeydew', 'hotpink', 'indianred', 'indigo', 'ivory', 'khaki', 'lavender', 'lavenderblush', 'lawngreen', 'lemonchiffon', 'lightblue', 'lightcoral', 'lightcyan', 'lightgoldenrodyellow', 'lightgray', 'lightgreen', 'lightgrey', 'lightpink', 'lightsalmon', 'lightseagreen', 'lightskyblue', 'lightslategray', 'lightslategrey', 'lightsteelblue', 'lightyellow', 'lime', 'limegreen', 'linen', 'magenta', 'maroon', 'mediumaquamarine', 'mediumblue', 'mediumorchid', 'mediumpurple', 'mediumseagreen', 'mediumslateblue', 'mediumspringgreen', 'mediumturquoise', 'mediumvioletred', 'midnightblue', 'mintcream', 'mistyrose', 'moccasin', 'navajowhite', 'navy', 'oldlace', 'olive', 'olivedrab', 'orange', 'orangered', 'orchid', 'palegoldenrod', 'palegreen', 'paleturquoise', 'palevioletred', 'papayawhip', 'peachpuff', 'peru', 'pink', 'plum', 'powderblue', 'purple', 'rebeccapurple', 'red', 'rosybrown', 'royalblue', 'saddlebrown', 'salmon', 'sandybrown', 'seagreen', 'seashell', 'sienna', 'silver', 'skyblue', 'slateblue', 'slategray', 'slategrey', 'snow', 'springgreen', 'steelblue', 'tan', 'teal', 'thistle', 'tomato', 'turquoise', 'violet', 'wheat', 'white', 'whitesmoke', 'yellow', 'yellowgreen'];
/**
 * Validates if the given string is a [<color> type](https://www.w3.org/TR/css-color-4/#color-type) in CSS.
 *
 * Supports:
 * - `<hex-color>`s 3, 4, 6 and 8 digit
 * - `<named-color>`https://www.w3.org/TR/css-color-4/#named-colors
 * - `'currentColor'`
 * - `'transparent'`
 *
 * Does not support:
 * - the color-functions: `<rgb()>`, `<rgba()>`, `<hsl()>`, `<hsla()>`, `<hwb()>`, `<lab()>`, `<lch()>`, and `<color()>`.
 * - `<device-cmyk()>`
 * - `<system-color>`
 *
 * @param {string} value
 * @returns {boolean}
 * @public
 */

exports.extendedColorKeywords = extendedColorKeywords;

function isCSSColor(value) {
  if (typeof value !== 'string') {
    return false;
  } // <hex-color>


  if (isValidHexColor(value)) {
    return true;
  } // <named-color>, transparent, currentColor
  // Check last so iterating extendedColorKeywords is last resort


  return value === 'transparent' || value === 'currentColor' || extendedColorKeywords.includes(value.toLowerCase());
}