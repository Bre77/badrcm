"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.create = create;
exports.default = void 0;

var crypto = require('crypto');

var webpack = require('webpack');

var DEBUG = process.env.NODE_ENV !== 'production';

function create() {
  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      _ref$babelTypescript = _ref.babelTypescript,
      babelTypescript = _ref$babelTypescript === void 0 ? true : _ref$babelTypescript;

  return {
    mode: DEBUG ? 'development' : 'production',
    node: {
      __filename: true
    },
    module: {
      rules: [// This help to fix issue SPL-144317 and SUI-1042. Leaks lodash out to global
      // The issue caused by https://github.com/lodash/lodash/issues/1798
      // So, opting out of AMD parsing for lodash
      {
        parser: {
          amd: false
        },
        include: /lodash/,
        // This is to fix SUI-1212, it does no harm to other scenarios but helps
        // isolating lodash when it's used with dashboard extension
        use: ['imports-loader?define=>false']
      }, {
        test: babelTypescript ? /\.[j|t]sx?$/ : /\.jsx?$/,
        exclude: /(node_modules|bower_components)/,
        use: [{
          loader: 'babel-loader',
          options: {
            cacheDirectory: DEBUG,
            rootMode: 'upward-optional'
          }
        }]
      }, {
        test: /\.txt$/,
        use: ['raw-loader']
      }, {
        test: /\.(png|jpg|jpeg|gif|svg|woff|woff2)$/,
        use: [{
          loader: 'url-loader',
          options: {
            name: DEBUG ? '[path][name].[ext]?[hash]' : '[hash].[ext]',
            limit: 100000
          }
        }]
      }, {
        test: /\.(eot|ttf|wav|mp3)$/,
        use: [{
          loader: 'file-loader',
          options: {
            name: DEBUG ? '[path][name].[ext]?[hash]' : '[hash].[ext]'
          }
        }]
      }]
    },
    plugins: [new webpack.DefinePlugin({
      'process.env.SC_ATTR': JSON.stringify("sc".concat(crypto.randomBytes(8).toString('hex')))
    })],
    resolve: {
      extensions: ['.wasm', '.mjs', '.js', '.jsx', '.ts', '.tsx']
    },
    output: {
      filename: DEBUG ? '[name].js?[chunkhash]' : '[name].[chunkhash].js',
      chunkFilename: DEBUG ? '[name].[id].js?[chunkhash]' : '[name].[id].[chunkhash].js'
    }
  };
}

var _default = create();

exports.default = _default;