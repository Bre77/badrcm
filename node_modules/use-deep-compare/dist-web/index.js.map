{"version":3,"file":"index.js","sources":["../dist-src/useDeepCompareMemoize.js","../dist-src/useDeepCompareCallback.js","../dist-src/useDeepCompareEffect.js","../dist-src/useDeepCompareMemo.js"],"sourcesContent":["import React from \"react\";\nimport deepEqual from \"dequal\";\nexport function checkDeps(deps, name) {\n  const reactHookName = `React.${name.replace(/DeepCompare/, \"\")}`;\n\n  if (!deps || deps.length === 0) {\n    throw new Error(`${name} should not be used with no dependencies. Use ${reactHookName} instead.`);\n  }\n}\nexport function useDeepCompareMemoize(value) {\n  const ref = React.useRef([]);\n\n  if (!deepEqual(value, ref.current)) {\n    ref.current = value;\n  }\n\n  return ref.current;\n}","import React from 'react';\nimport { checkDeps, useDeepCompareMemoize } from \"./useDeepCompareMemoize.js\";\n/**\n * `useDeepCompareEffect` will return a memoized version of the callback that\n * only changes if one of the `deps` has changed.\n *\n * Usage note: only use this if `deps` are objects or arrays that contain\n * objects. Otherwise you should just use React.useEffect.\n *\n */\n\nfunction useDeepCompareCallback(callback, dependencies) {\n  if (process.env.NODE_ENV !== 'production') {\n    checkDeps(dependencies, 'useDeepCompareCallback');\n  }\n\n  return React.useCallback(callback, useDeepCompareMemoize(dependencies));\n}\n\nexport default useDeepCompareCallback;","import React from 'react';\nimport { checkDeps, useDeepCompareMemoize } from \"./useDeepCompareMemoize.js\";\n/**\n * `useDeepCompareEffect` Accepts a function that contains imperative, possibly\n * effectful code.\n *\n * @param effect Imperative function that can return a cleanup function\n * @param deps If present, effect will only activate if the values in the list\n * change.\n *\n * Usage note: only use this if `deps` are objects or arrays that contain\n * objects. Otherwise you should just use React.useEffect.\n *\n */\n\nfunction useDeepCompareEffect(effect, dependencies) {\n  if (process.env.NODE_ENV !== 'production') {\n    checkDeps(dependencies, 'useDeepCompareEffect');\n  }\n\n  React.useEffect(effect, useDeepCompareMemoize(dependencies));\n}\n\nexport default useDeepCompareEffect;","import React from 'react';\nimport { checkDeps, useDeepCompareMemoize } from \"./useDeepCompareMemoize.js\";\n/**\n * `useDeepCompareMemo` will only recompute the memoized value when one of the\n * `deps` has changed.\n *\n * Usage note: only use this if `deps` are objects or arrays that contain\n * objects. Otherwise you should just use React.useMemo.\n *\n */\n\nfunction useDeepCompareMemo(factory, dependencies) {\n  if (process.env.NODE_ENV !== 'production') {\n    checkDeps(dependencies, 'useDeepCompareMemo');\n  }\n\n  return React.useMemo(factory, useDeepCompareMemoize(dependencies));\n}\n\nexport default useDeepCompareMemo;"],"names":[],"mappings":";;;AAEO,SAAS,SAAS,CAAC,IAAI,EAAE,IAAI,EAAE;EACpC,MAAM,aAAa,GAAG,CAAC,MAAM,EAAE,IAAI,CAAC,OAAO,CAAC,aAAa,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC;;EAEjE,IAAI,CAAC,IAAI,IAAI,IAAI,CAAC,MAAM,KAAK,CAAC,EAAE;IAC9B,MAAM,IAAI,KAAK,CAAC,CAAC,EAAE,IAAI,CAAC,8CAA8C,EAAE,aAAa,CAAC,SAAS,CAAC,CAAC,CAAC;GACnG;CACF;AACD,AAAO,SAAS,qBAAqB,CAAC,KAAK,EAAE;EAC3C,MAAM,GAAG,GAAG,KAAK,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC;;EAE7B,IAAI,CAAC,SAAS,CAAC,KAAK,EAAE,GAAG,CAAC,OAAO,CAAC,EAAE;IAClC,GAAG,CAAC,OAAO,GAAG,KAAK,CAAC;GACrB;;EAED,OAAO,GAAG,CAAC,OAAO,CAAC;;;CACpB,DCfD;;;;;;;;;AASA,SAAS,sBAAsB,CAAC,QAAQ,EAAE,YAAY,EAAE;EACtD,IAAI,OAAO,CAAC,GAAG,CAAC,QAAQ,KAAK,YAAY,EAAE;IACzC,SAAS,CAAC,YAAY,EAAE,wBAAwB,CAAC,CAAC;GACnD;;EAED,OAAO,KAAK,CAAC,WAAW,CAAC,QAAQ,EAAE,qBAAqB,CAAC,YAAY,CAAC,CAAC,CAAC;CACzE;;ACfD;;;;;;;;;;;;;AAaA,SAAS,oBAAoB,CAAC,MAAM,EAAE,YAAY,EAAE;EAClD,IAAI,OAAO,CAAC,GAAG,CAAC,QAAQ,KAAK,YAAY,EAAE;IACzC,SAAS,CAAC,YAAY,EAAE,sBAAsB,CAAC,CAAC;GACjD;;EAED,KAAK,CAAC,SAAS,CAAC,MAAM,EAAE,qBAAqB,CAAC,YAAY,CAAC,CAAC,CAAC;CAC9D;;ACnBD;;;;;;;;;AASA,SAAS,kBAAkB,CAAC,OAAO,EAAE,YAAY,EAAE;EACjD,IAAI,OAAO,CAAC,GAAG,CAAC,QAAQ,KAAK,YAAY,EAAE;IACzC,SAAS,CAAC,YAAY,EAAE,oBAAoB,CAAC,CAAC;GAC/C;;EAED,OAAO,KAAK,CAAC,OAAO,CAAC,OAAO,EAAE,qBAAqB,CAAC,YAAY,CAAC,CAAC,CAAC;CACpE;;;;"}