{"version":3,"file":"index.esm.js","sources":["../src/index.ts"],"sourcesContent":["import * as React from 'react'\nimport { useDeepCompareMemo } from 'use-deep-compare'\n\nfunction useEventListener<KD extends keyof DocumentEventMap>(\n  element: Document | null | undefined,\n  eventType: KD,\n  listener: (this: Document, evt: DocumentEventMap[KD]) => void,\n  options?: boolean | AddEventListenerOptions,\n): void\nfunction useEventListener<KH extends keyof HTMLElementEventMap>(\n  element: HTMLElement | null | undefined,\n  eventType: KH,\n  listener: (this: HTMLElement, evt: HTMLElementEventMap[KH]) => void,\n  options?: boolean | AddEventListenerOptions,\n): void\nfunction useEventListener<KW extends keyof WindowEventMap>(\n  element: Window | null | undefined,\n  eventType: KW,\n  listener: (this: Window, evt: WindowEventMap[KW]) => void,\n  options?: boolean | AddEventListenerOptions,\n): void\nfunction useEventListener(\n  element: Document | HTMLElement | Window | null | undefined,\n  eventType: string,\n  listener: (evt: Event) => void,\n  options?: boolean | AddEventListenerOptions,\n): void\n\nfunction useEventListener<\n  KD extends keyof DocumentEventMap,\n  KH extends keyof HTMLElementEventMap,\n  KW extends keyof WindowEventMap\n>(\n  element: Document | HTMLElement | Window | null | undefined,\n  eventType: KD | KH | KW | string,\n  listener: (\n    this: typeof element,\n    evt:\n      | DocumentEventMap[KD]\n      | HTMLElementEventMap[KH]\n      | WindowEventMap[KW]\n      | Event,\n  ) => void,\n  options?: boolean | AddEventListenerOptions,\n): void {\n  const listenerRef = React.useRef(listener)\n  listenerRef.current = listener\n\n  const memorizedOptions = useDeepCompareMemo(() => options, [options])\n\n  React.useEffect(() => {\n    if (!element) return undefined\n\n    // to avoid keep updating listener in DOM\n    const wrappedListener: typeof listenerRef.current = (evt) =>\n      listenerRef.current.call(element, evt)\n\n    element.addEventListener(eventType, wrappedListener, memorizedOptions)\n\n    return () => {\n      element.removeEventListener(eventType, wrappedListener, memorizedOptions)\n    }\n  }, [element, eventType, memorizedOptions])\n}\n\nexport default useEventListener\n"],"names":["element","eventType","listener","options","listenerRef","React","current","memorizedOptions","useDeepCompareMemo","wrappedListener","evt","call","addEventListener","removeEventListener"],"mappings":"mHA4BA,SAKEA,EACAC,EACAC,EAQAC,SAEMC,EAAcC,EAAaH,GACjCE,EAAYE,QAAUJ,QAEhBK,EAAmBC,EAAmB,IAAML,EAAS,CAACA,IAE5DE,EAAgB,SACTL,EAAS,aAGRS,EAA+CC,GACnDN,EAAYE,QAAQK,KAAKX,EAASU,UAEpCV,EAAQY,iBAAiBX,EAAWQ,EAAiBF,GAE9C,KACLP,EAAQa,oBAAoBZ,EAAWQ,EAAiBF,KAEzD,CAACP,EAASC,EAAWM"}